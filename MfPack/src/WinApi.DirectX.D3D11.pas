// FactoryX
//
// Copyright: © FactoryX. All rights reserved.
//
// Project: WinApi.DirectX - D3D11
// Project location: https://sourceforge.net/projects/MFPack
//                   https://github.com/FactoryXCode/MfPack
// Module: WinApi.DirectX.D3D11.pas
// Kind: Pascal / Delphi unit
// Release date: 13-08-2022
// Language: ENU
//
// Revision Version: 3.1.7
// Description: Microsoft DirectX D3D11 used by Media Foundation.
//              You can use Direct3D 11 graphics to create 3-D graphics for games,
//              scientific and desktop apps.
//
// Organisation: FactoryX
// Initiator(s): Tony (maXcomX), Peter (OzShips)
// Contributor(s): Tony Kalf (maXcomX)
//
//------------------------------------------------------------------------------
// CHANGE LOG
// Date       Person              Reason
// ---------- ------------------- ----------------------------------------------
// 19/06/2024 All                 RammStein release  SDK 10.0.22621.0 (Windows 11)
//------------------------------------------------------------------------------
//
// Remarks: Embarcadero's <= Delphi 10.4 D3D11 is outdated!
//
// Related objects: -
// Related projects: MfPackX317
// Known Issues: -
//
// Compiler version: 23 up to 35
// SDK version: 10.0.22621.0
//
// Todo: -
//
//==============================================================================
// Source: D3D11.h
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//==============================================================================
//
// LICENSE
//
// The contents of this file are subject to the Mozilla Public License
// Version 2.0 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// https://www.mozilla.org/en-US/MPL/2.0/
//
// Software distributed under the License is distributed on an "AS IS"
// basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
// License for the specific language governing rights and limitations
// under the License.
//
// Non commercial users may distribute this sourcecode provided that this
// header is included in full at the top of the file.
// Commercial users are not allowed to distribute this sourcecode as part of
// their product.
//
//==============================================================================
unit WinApi.DirectX.D3D11;

interface

{$HPPEMIT '#include "D3D11.h"'}
{$HPPEMIT '#include "D3DCommon.h"'}
{$HPPEMIT '#include "dxgiommon.h"'}
{$HPPEMIT '#include "dxgiformat.h"'}
{$HPPEMIT '#include "dxgi.h"'}

uses
  {Winapi}
  Winapi.Windows,
  WinApi.WinApiTypes,
  WinApi.WinError,
  {System}
  System.SysUtils,
  {DirectX}
  WinApi.DirectX.DXGICommon,
  WinApi.DirectX.DXGIFormat,
  Winapi.DirectX.DXGI,
  WinApi.DirectX.D3DCommon,
  {MediaFoundationApi}
  WinApi.MediaFoundationApi.MfUtils;


  {$MINENUMSIZE 4}

  {$IFDEF WIN32}
    {$ALIGN 1}
  {$ELSE}
    {$ALIGN 8} // Win64
  {$ENDIF}

  {$I 'WinApiTypes.inc'}


const
  D3D11_16BIT_INDEX_STRIP_CUT_VALUE = $FFFF;
  {$EXTERNALSYM D3D11_16BIT_INDEX_STRIP_CUT_VALUE}
  D3D11_32BIT_INDEX_STRIP_CUT_VALUE = $FFFFFFFF;
  {$EXTERNALSYM D3D11_32BIT_INDEX_STRIP_CUT_VALUE}
  D3D11_8BIT_INDEX_STRIP_CUT_VALUE = $FF;
  {$EXTERNALSYM D3D11_8BIT_INDEX_STRIP_CUT_VALUE}
  D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
  {$EXTERNALSYM D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT}
  D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
  {$EXTERNALSYM D3D11_CLIP_OR_CULL_DISTANCE_COUNT}
  D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
  {$EXTERNALSYM D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST}
  D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS}
  D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
  {$EXTERNALSYM D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT}
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS}
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT}
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST}
  D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS}
  D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT}
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS}
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
  {$EXTERNALSYM D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT}
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST}
  D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS}
  D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
  {$EXTERNALSYM D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT}
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS}
  D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
  {$EXTERNALSYM D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT}
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST}
  D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS}
  D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
  {$EXTERNALSYM D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT}
  D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
  {$EXTERNALSYM D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT}
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS}
  D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEMP_REGISTER_COUNT}
  D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST}
  D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS}
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX}
  D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = 10;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN}
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = 8;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE}
  D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
  {$EXTERNALSYM D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE}
  D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP= 84;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP= 168;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP= 204;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
  {$EXTERNALSYM D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP}
  D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
  {$EXTERNALSYM D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION}
  D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
  {$EXTERNALSYM D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT}
  D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
  {$EXTERNALSYM D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP}
  D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
  {$EXTERNALSYM D3D11_CS_4_X_THREAD_GROUP_MAX_X}
  D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
  {$EXTERNALSYM D3D11_CS_4_X_THREAD_GROUP_MAX_Y}
  D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_CS_4_X_UAV_REGISTER_COUNT}
  D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
  {$EXTERNALSYM D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION}
  D3D11_CS_TGSM_REGISTER_COUNT = 8192;
  {$EXTERNALSYM D3D11_CS_TGSM_REGISTER_COUNT}
  D3D11_CS_TGSM_REGISTER_READS_PER_INST= 1;
  {$EXTERNALSYM D3D11_CS_TGSM_REGISTER_READS_PER_INST}
  D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS}
  D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS}
  D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP}
  D3D11_CS_THREAD_GROUP_MAX_X = 1024;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MAX_X}
  D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MAX_Y}
  D3D11_CS_THREAD_GROUP_MAX_Z = 64;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MAX_Z}
  D3D11_CS_THREAD_GROUP_MIN_X = 1;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MIN_X}
  D3D11_CS_THREAD_GROUP_MIN_Y = 1;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MIN_Y}
  D3D11_CS_THREAD_GROUP_MIN_Z = 1;
  {$EXTERNALSYM D3D11_CS_THREAD_GROUP_MIN_Z}
  D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
  {$EXTERNALSYM D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL}
  D3D11_DEFAULT_BLEND_FACTOR_ALPHA = 1.0;
  {$EXTERNALSYM D3D11_DEFAULT_BLEND_FACTOR_ALPHA}
  D3D11_DEFAULT_BLEND_FACTOR_BLUE = 1.0;
  {$EXTERNALSYM D3D11_DEFAULT_BLEND_FACTOR_BLUE}
  D3D11_DEFAULT_BLEND_FACTOR_GREEN = 1.0;
  {$EXTERNALSYM D3D11_DEFAULT_BLEND_FACTOR_GREEN}
  D3D11_DEFAULT_BLEND_FACTOR_RED = 1.0;
  {$EXTERNALSYM D3D11_DEFAULT_BLEND_FACTOR_RED}
  D3D11_DEFAULT_BORDER_COLOR_COMPONENT = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_BORDER_COLOR_COMPONENT}
  D3D11_DEFAULT_DEPTH_BIAS = 0;
  {$EXTERNALSYM D3D11_DEFAULT_DEPTH_BIAS}
  D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_DEPTH_BIAS_CLAMP}
  D3D11_DEFAULT_MIP_LOD_BIAS = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_MIP_LOD_BIAS}
  D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX= 0;
  {$EXTERNALSYM D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX}
  D3D11_DEFAULT_SAMPLE_MASK = $FFFFFFFF;
  {$EXTERNALSYM D3D11_DEFAULT_SAMPLE_MASK}
  D3D11_DEFAULT_SCISSOR_ENDX = 0;
  {$EXTERNALSYM D3D11_DEFAULT_SCISSOR_ENDX}
  D3D11_DEFAULT_SCISSOR_ENDY = 0;
  {$EXTERNALSYM D3D11_DEFAULT_SCISSOR_ENDY}
  D3D11_DEFAULT_SCISSOR_STARTX = 0 ;
  {$EXTERNALSYM D3D11_DEFAULT_SCISSOR_STARTX}
  D3D11_DEFAULT_SCISSOR_STARTY = 0 ;
  {$EXTERNALSYM D3D11_DEFAULT_SCISSOR_STARTY}
  D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS}
  D3D11_DEFAULT_STENCIL_READ_MASK = $ff;
  {$EXTERNALSYM D3D11_DEFAULT_STENCIL_READ_MASK}
  D3D11_DEFAULT_STENCIL_REFERENCE = 0;
  {$EXTERNALSYM D3D11_DEFAULT_STENCIL_REFERENCE}
  D3D11_DEFAULT_STENCIL_WRITE_MASK = $FF;
  {$EXTERNALSYM D3D11_DEFAULT_STENCIL_WRITE_MASK}
  D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX  = 0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX}
  D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_HEIGHT}
  D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_MAX_DEPTH}
  D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_MIN_DEPTH}
  D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_TOPLEFTX}
  D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_TOPLEFTY}
  D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
  {$EXTERNALSYM D3D11_DEFAULT_VIEWPORT_WIDTH}
  D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS}
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS}
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT}
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST}
  D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS}
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
  {$EXTERNALSYM D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS}
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT}
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST}
  D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS}
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS}
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT}
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST}
  D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS}
  D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_DS_OUTPUT_REGISTER_COMPONENTS}
  D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_DS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_DS_OUTPUT_REGISTER_COUNT}
  D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
  {$EXTERNALSYM D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP}
  D3D11_FLOAT32_MAX = 3.402823466e+38;
  {$EXTERNALSYM D3D11_FLOAT32_MAX}
  D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6;
  {$EXTERNALSYM D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP}
  D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR}
  D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR}
  D3D11_FLOAT_TO_SRGB_OFFSET = 0.055;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_OFFSET}
  D3D11_FLOAT_TO_SRGB_SCALE_1 = 12.92;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_SCALE_1}
  D3D11_FLOAT_TO_SRGB_SCALE_2 = 1.055;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_SCALE_2}
  D3D11_FLOAT_TO_SRGB_THRESHOLD = 0.0031308;
  {$EXTERNALSYM D3D11_FLOAT_TO_SRGB_THRESHOLD}
  D3D11_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999;
  {$EXTERNALSYM D3D11_FTOI_INSTRUCTION_MAX_INPUT}
  D3D11_FTOI_INSTRUCTION_MIN_INPUT = -2147483648.999;
  {$EXTERNALSYM D3D11_FTOI_INSTRUCTION_MIN_INPUT}
  D3D11_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999;
  {$EXTERNALSYM D3D11_FTOU_INSTRUCTION_MAX_INPUT}
  D3D11_FTOU_INSTRUCTION_MIN_INPUT = 0.0;
  {$EXTERNALSYM D3D11_FTOU_INSTRUCTION_MIN_INPUT}
  D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST}
  D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS}
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT}
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS}
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT}
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST}
  D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS}
  D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_COMPONENTS}
  D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_GS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_COUNT}
  D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_READS_PER_INST}
  D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_READ_PORTS}
  D3D11_GS_INPUT_REGISTER_VERTICES = 32;
  {$EXTERNALSYM D3D11_GS_INPUT_REGISTER_VERTICES}
  D3D11_GS_MAX_INSTANCE_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_MAX_INSTANCE_COUNT}
  D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
  {$EXTERNALSYM D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES}
  D3D11_GS_OUTPUT_ELEMENTS = 32;
  {$EXTERNALSYM D3D11_GS_OUTPUT_ELEMENTS}
  D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_GS_OUTPUT_REGISTER_COMPONENTS}
  D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_GS_OUTPUT_REGISTER_COUNT}
  D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT}
  D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT}
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS}
  D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST}
  D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS}
  D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = $FFFFFFFF;
  {$EXTERNALSYM D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND}
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT}
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST}
  D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS}
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT}
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST}
  D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS}
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS}
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT}
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST}
  D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS}
  D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = $FFFFFFFF;
  {$EXTERNALSYM D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND}
  D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0;
  {$EXTERNALSYM D3D11_HS_MAXTESSFACTOR_LOWER_BOUND}
  D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0;
  {$EXTERNALSYM D3D11_HS_MAXTESSFACTOR_UPPER_BOUND}
  D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS}
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS}
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT}
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST}
  D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS}
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS}
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT}
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST}
  D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS}
  D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
  {$EXTERNALSYM D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES}
  D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
  {$EXTERNALSYM D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY}
  D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
  {$EXTERNALSYM D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES}
  D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
  {$EXTERNALSYM D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT}
  D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_INSTANCE_ID_BIT_COUNT}
  D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT}
  D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT}
  D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_PRIMITIVE_ID_BIT_COUNT}
  D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_VERTEX_ID_BIT_COUNT}
  D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT}
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
  {$EXTERNALSYM D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS}
  D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT}
  D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = $FFFFFFFF;
  {$EXTERNALSYM D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT}
  D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = $FFFFFFFF;
  {$EXTERNALSYM D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER}
  D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = $FFFFFFFF;
  {$EXTERNALSYM D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL}
  D3D11_KEEP_UNORDERED_ACCESS_VIEWS = $FFFFFFFF;
  {$EXTERNALSYM D3D11_KEEP_UNORDERED_ACCESS_VIEWS}
  D3D11_LINEAR_GAMMA = 1.0;
  {$EXTERNALSYM D3D11_LINEAR_GAMMA}
  D3D11_MAJOR_VERSION = 11;
  {$EXTERNALSYM D3D11_MAJOR_VERSION}

  D3D11_MAX_BORDER_COLOR_COMPONENT = 1.0;
  {$EXTERNALSYM D3D11_MAX_BORDER_COLOR_COMPONENT}
  D3D11_MAX_DEPTH = 1.0;
  {$EXTERNALSYM D3D11_MAX_DEPTH}
  D3D11_MAX_MAXANISOTROPY = 16;
  {$EXTERNALSYM D3D11_MAX_MAXANISOTROPY}
  D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
  {$EXTERNALSYM D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT}

  D3D11_MAX_POSITION_VALUE = 3.402823466e+34;
  {$EXTERNALSYM D3D11_MAX_POSITION_VALUE}
  D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
  {$EXTERNALSYM D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP}
  D3D11_MINOR_VERSION = 0;
  {$EXTERNALSYM D3D11_MINOR_VERSION}
  D3D11_MIN_BORDER_COLOR_COMPONENT = 0.0;
  {$EXTERNALSYM D3D11_MIN_BORDER_COLOR_COMPONENT}
  D3D11_MIN_DEPTH = 0.0;
  {$EXTERNALSYM D3D11_MIN_DEPTH}
  D3D11_MIN_MAXANISOTROPY = 0;
  {$EXTERNALSYM D3D11_MIN_MAXANISOTROPY}

  D3D11_MIP_LOD_BIAS_MAX = 15.99;
  {$EXTERNALSYM D3D11_MIP_LOD_BIAS_MAX}
  D3D11_MIP_LOD_BIAS_MIN = -16.0;
  {$EXTERNALSYM D3D11_MIP_LOD_BIAS_MIN}
  D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT}
  D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;
  {$EXTERNALSYM D3D11_MIP_LOD_RANGE_BIT_COUNT}

  D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4;
  {$EXTERNALSYM D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH}
  D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
  {$EXTERNALSYM D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT}
  D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
  {$EXTERNALSYM D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
  {$EXTERNALSYM D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_PS_CS_UAV_REGISTER_COMPONENTS}
  D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
  {$EXTERNALSYM D3D11_PS_CS_UAV_REGISTER_COUNT}
  D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D11_PS_CS_UAV_REGISTER_READS_PER_INST}
  D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_PS_CS_UAV_REGISTER_READ_PORTS}
  D3D11_PS_FRONTFACING_DEFAULT_VALUE = $FFFFFFFF;
  {$EXTERNALSYM D3D11_PS_FRONTFACING_DEFAULT_VALUE}
  D3D11_PS_FRONTFACING_FALSE_VALUE = 0;
  {$EXTERNALSYM D3D11_PS_FRONTFACING_FALSE_VALUE}
  D3D11_PS_FRONTFACING_TRUE_VALUE = $FFFFFFFF;
  {$EXTERNALSYM D3D11_PS_FRONTFACING_TRUE_VALUE}
  D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_PS_INPUT_REGISTER_COMPONENTS}
  D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_PS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_PS_INPUT_REGISTER_COUNT}
  D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_PS_INPUT_REGISTER_READS_PER_INST}
  D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_PS_INPUT_REGISTER_READ_PORTS}

  D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0;
  {$EXTERNALSYM D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT}
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS}
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT}
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS}
  D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D11_PS_OUTPUT_MASK_REGISTER_COUNT}
  D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_PS_OUTPUT_REGISTER_COMPONENTS}
  D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
  {$EXTERNALSYM D3D11_PS_OUTPUT_REGISTER_COUNT}
  D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5;
  {$EXTERNALSYM D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT}
  D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
  {$EXTERNALSYM D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT}
  D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE}
  D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
  {$EXTERNALSYM D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP}
  D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
  {$EXTERNALSYM D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT}
  D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE}
  D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
  {$EXTERNALSYM D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP}
  D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
  {$EXTERNALSYM D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP}
  D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
  {$EXTERNALSYM D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION}
  D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
  {$EXTERNALSYM D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT}
  D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
  {$EXTERNALSYM D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT}
  D3D11_REQ_MAXANISOTROPY = 16;
  {$EXTERNALSYM D3D11_REQ_MAXANISOTROPY}
  D3D11_REQ_MIP_LEVELS = 15;
  {$EXTERNALSYM D3D11_REQ_MIP_LEVELS}
  D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
  {$EXTERNALSYM D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES}
  D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE}
  D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
  {$EXTERNALSYM D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH}
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
  {$EXTERNALSYM D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM}
  D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25;
  {$EXTERNALSYM D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM}
  D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
  {$EXTERNALSYM D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP}
  D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE}
  D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
  {$EXTERNALSYM D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION}
  D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
  {$EXTERNALSYM D3D11_REQ_TEXTURE1D_U_DIMENSION}
  D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
  {$EXTERNALSYM D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION}
  D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
  {$EXTERNALSYM D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION}
  D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
  {$EXTERNALSYM D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION}
  D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
  {$EXTERNALSYM D3D11_REQ_TEXTURECUBE_DIMENSION}
  D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
  {$EXTERNALSYM D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL}
  D3D11_SHADER_MAJOR_VERSION = 5;
  {$EXTERNALSYM D3D11_SHADER_MAJOR_VERSION}
  D3D11_SHADER_MAX_INSTANCES = 65535;
  {$EXTERNALSYM D3D11_SHADER_MAX_INSTANCES}
  D3D11_SHADER_MAX_INTERFACES = 253;
  {$EXTERNALSYM D3D11_SHADER_MAX_INTERFACES}
  D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
  {$EXTERNALSYM D3D11_SHADER_MAX_INTERFACE_CALL_SITES}
  D3D11_SHADER_MAX_TYPES = 65535;
  {$EXTERNALSYM D3D11_SHADER_MAX_TYPES}
  D3D11_SHADER_MINOR_VERSION = 0;
  {$EXTERNALSYM D3D11_SHADER_MINOR_VERSION}
  D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
  {$EXTERNALSYM D3D11_SHIFT_INSTRUCTION_PAD_VALUE}
  D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
  {$EXTERNALSYM D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT}
  D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
  {$EXTERNALSYM D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT}
  D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
  {$EXTERNALSYM D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES}
  D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
  {$EXTERNALSYM D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES}
  D3D11_SO_BUFFER_SLOT_COUNT = 4;
  {$EXTERNALSYM D3D11_SO_BUFFER_SLOT_COUNT}
  D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = $FFFFFFFF;
  {$EXTERNALSYM D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP}
  D3D11_SO_NO_RASTERIZED_STREAM = $FFFFFFFF;
  {$EXTERNALSYM D3D11_SO_NO_RASTERIZED_STREAM}
  D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
  {$EXTERNALSYM D3D11_SO_OUTPUT_COMPONENT_COUNT}
  D3D11_SO_STREAM_COUNT = 4;
  {$EXTERNALSYM D3D11_SO_STREAM_COUNT}
  D3D11_SPEC_DATE_DAY = 04;
  {$EXTERNALSYM D3D11_SPEC_DATE_DAY}
  D3D11_SPEC_DATE_MONTH = 06;
  {$EXTERNALSYM D3D11_SPEC_DATE_MONTH}
  D3D11_SPEC_DATE_YEAR = 2009;
  {$EXTERNALSYM D3D11_SPEC_DATE_YEAR}
  D3D11_SPEC_VERSION = 1.0;
  {$EXTERNALSYM D3D11_SPEC_VERSION}
  D3D11_SRGB_GAMMA = 2.2;
  {$EXTERNALSYM D3D11_SRGB_GAMMA}
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_DENOMINATOR_1}
  D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_DENOMINATOR_2}
  D3D11_SRGB_TO_FLOAT_EXPONENT = 2.4;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_EXPONENT}
  D3D11_SRGB_TO_FLOAT_OFFSET = 0.055;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_OFFSET}
  D3D11_SRGB_TO_FLOAT_THRESHOLD = 0.04045;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_THRESHOLD}
  D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5;
  {$EXTERNALSYM D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP}
  D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_STANDARD_COMPONENT_BIT_COUNT}
  D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
  {$EXTERNALSYM D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED}
  D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
  {$EXTERNALSYM D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE}
  D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
  {$EXTERNALSYM D3D11_STANDARD_PIXEL_COMPONENT_COUNT}
  D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D11_STANDARD_PIXEL_ELEMENT_COUNT}
  D3D11_STANDARD_VECTOR_SIZE = 4;
  {$EXTERNALSYM D3D11_STANDARD_VECTOR_SIZE}
  D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D11_STANDARD_VERTEX_ELEMENT_COUNT}
  D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
  {$EXTERNALSYM D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT}
  D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT}
  D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT}
  D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
  {$EXTERNALSYM D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
  {$EXTERNALSYM D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
  {$EXTERNALSYM D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR}
  D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
  {$EXTERNALSYM D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR}
  D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
  {$EXTERNALSYM D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
  {$EXTERNALSYM D3D11_UNBOUND_MEMORY_ACCESS_RESULT}
  D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
  {$EXTERNALSYM D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX}
  D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
  {$EXTERNALSYM D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE}
  D3D11_VIEWPORT_BOUNDS_MAX = 32767;
  {$EXTERNALSYM D3D11_VIEWPORT_BOUNDS_MAX}
  D3D11_VIEWPORT_BOUNDS_MIN = -32768;
  {$EXTERNALSYM D3D11_VIEWPORT_BOUNDS_MIN}
  D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_VS_INPUT_REGISTER_COMPONENTS}
  D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_VS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_VS_INPUT_REGISTER_COUNT}
  D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D11_VS_INPUT_REGISTER_READS_PER_INST}
  D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D11_VS_INPUT_REGISTER_READ_PORTS}
  D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D11_VS_OUTPUT_REGISTER_COMPONENTS}
  D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D11_VS_OUTPUT_REGISTER_COUNT}
  D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
  {$EXTERNALSYM D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT}
  D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
  {$EXTERNALSYM D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP}
  D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
  {$EXTERNALSYM D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP}

  _FACD3D11 = $87C;
  {$EXTERNALSYM _FACD3D11}
  _FACD3D11DEBUG = _FACD3D11 + 1;
  {$EXTERNALSYM _FACD3D11DEBUG}

  D3D11_APPEND_ALIGNED_ELEMENT = $FFFFFFFF;
  {$EXTERNALSYM D3D11_APPEND_ALIGNED_ELEMENT}

  D3D11_FILTER_TYPE_MASK = $3;
  {$EXTERNALSYM D3D11_FILTER_TYPE_MASK}

  D3D11_MIN_FILTER_SHIFT = 4;
  {$EXTERNALSYM D3D11_MIN_FILTER_SHIFT}

  D3D11_MAG_FILTER_SHIFT = 2;
  {$EXTERNALSYM D3D11_MAG_FILTER_SHIFT}

  D3D11_MIP_FILTER_SHIFT = 0;
  {$EXTERNALSYM D3D11_MIP_FILTER_SHIFT}

  D3D11_COMPARISON_FILTERING_BIT = $80;
  {$EXTERNALSYM D3D11_COMPARISON_FILTERING_BIT}

  D3D11_ANISOTROPIC_FILTERING_BIT = $40;
  {$EXTERNALSYM D3D11_ANISOTROPIC_FILTERING_BIT}

  D3D11_STANDARD_MULTISAMPLE_PATTERN = $FFFFFFFF;
  {$EXTERNALSYM D3D11_STANDARD_MULTISAMPLE_PATTERN}
  D3D11_CENTER_MULTISAMPLE_PATTERN = $FFFFFFFE ;
  {$EXTERNALSYM D3D11_CENTER_MULTISAMPLE_PATTERN}

  D3D11_SDK_VERSION = 7;
  {$EXTERNALSYM D3D11_SDK_VERSION}

type

  PD3D11_BIND_FLAG = ^D3D11_BIND_FLAG;
  D3D11_BIND_FLAG = UINT;
  {$EXTERNALSYM D3D11_BIND_FLAG}


const
  // See: AuthenticatedChannel
  D3D11_OMAC_SIZE = 16;
  {$EXTERNALSYM D3D11_OMAC_SIZE}
  // -------------------------

  D3D11_BIND_VERTEX_BUFFER = UINT($1);
  {$EXTERNALSYM D3D11_BIND_VERTEX_BUFFER}
  D3D11_BIND_INDEX_BUFFER = UINT($2);
  {$EXTERNALSYM D3D11_BIND_INDEX_BUFFER}
  D3D11_BIND_CONSTANT_BUFFER = UINT($4);
  {$EXTERNALSYM D3D11_BIND_CONSTANT_BUFFER}
  D3D11_BIND_SHADER_RESOURCE = UINT($8);
  {$EXTERNALSYM D3D11_BIND_SHADER_RESOURCE}
  D3D11_BIND_STREAM_OUTPUT = UINT($10);
  {$EXTERNALSYM D3D11_BIND_STREAM_OUTPUT}
  D3D11_BIND_RENDER_TARGET = UINT($20);
  {$EXTERNALSYM D3D11_BIND_RENDER_TARGET}
  D3D11_BIND_DEPTH_STENCIL = UINT($40);
  {$EXTERNALSYM D3D11_BIND_DEPTH_STENCIL}
  D3D11_BIND_UNORDERED_ACCESS = UINT($80);
  {$EXTERNALSYM D3D11_BIND_UNORDERED_ACCESS}

type
  D3D11_CPU_ACCESS_FLAG = UINT;
  {$EXTERNALSYM D3D11_CPU_ACCESS_FLAG}

const
  D3D11_CPU_ACCESS_WRITE = D3D11_CPU_ACCESS_FLAG($10000);
  {$EXTERNALSYM D3D11_CPU_ACCESS_WRITE}
  D3D11_CPU_ACCESS_READ = D3D11_CPU_ACCESS_FLAG($20000);
  {$EXTERNALSYM D3D11_CPU_ACCESS_READ}

type
  D3D11_CLEAR_FLAG = UINT;
  {$EXTERNALSYM D3D11_CLEAR_FLAG}

const
  D3D11_CLEAR_DEPTH = D3D11_CLEAR_FLAG($1);
  {$EXTERNALSYM D3D11_CLEAR_DEPTH}
  D3D11_CLEAR_STENCIL = D3D11_CLEAR_FLAG($2);
  {$EXTERNALSYM D3D11_CLEAR_STENCIL}

type
  D3D11_MAP = UINT;
  {$EXTERNALSYM D3D11_MAP}

const
  D3D11_MAP_READ = D3D11_MAP(1);
  {$EXTERNALSYM D3D11_MAP_READ}
  D3D11_MAP_WRITE = D3D11_MAP(2);
  {$EXTERNALSYM D3D11_MAP_WRITE}
  D3D11_MAP_READ_WRITE = D3D11_MAP(3);
  {$EXTERNALSYM D3D11_MAP_READ_WRITE}
  D3D11_MAP_WRITE_DISCARD = D3D11_MAP(4);
  {$EXTERNALSYM D3D11_MAP_WRITE_DISCARD}
  D3D11_MAP_WRITE_NO_OVERWRITE = D3D11_MAP(5);
  {$EXTERNALSYM D3D11_MAP_WRITE_NO_OVERWRITE}

type
  PD3D11_CREATE_DEVICE_FLAG = ^D3D11_CREATE_DEVICE_FLAG;
  D3D11_CREATE_DEVICE_FLAG = UINT;
  {$EXTERNALSYM D3D11_CREATE_DEVICE_FLAG}

  // const  are placed here to prevent E2086
const
  D3D11_CREATE_DEVICE_SINGLETHREADED = D3D11_CREATE_DEVICE_FLAG($1);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_SINGLETHREADED}
  D3D11_CREATE_DEVICE_DEBUG = D3D11_CREATE_DEVICE_FLAG($2);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_DEBUG}
  D3D11_CREATE_DEVICE_SWITCH_TO_REF = D3D11_CREATE_DEVICE_FLAG($4);  // NOTE: This flag is not supported in Direct3D11.
  {$EXTERNALSYM D3D11_CREATE_DEVICE_SWITCH_TO_REF}
  D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = D3D11_CREATE_DEVICE_FLAG($8);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS}
  D3D11_CREATE_DEVICE_BGRA_SUPPORT = D3D11_CREATE_DEVICE_FLAG($20);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_BGRA_SUPPORT}
  D3D11_CREATE_DEVICE_DEBUGGABLE = D3D11_CREATE_DEVICE_FLAG($40);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_DEBUGGABLE}
  D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = D3D11_CREATE_DEVICE_FLAG($80);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY}
  D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = D3D11_CREATE_DEVICE_FLAG($100);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT}
  D3D11_CREATE_DEVICE_VIDEO_SUPPORT = D3D11_CREATE_DEVICE_FLAG($800);
  {$EXTERNALSYM D3D11_CREATE_DEVICE_VIDEO_SUPPORT}

  // VideoDecoder
  D3D11_DECODER_PROFILE_MPEG2_MOCOMP   : TGUID = '{e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66}';
  D3D11_DECODER_PROFILE_MPEG2_IDCT     : TGUID = '{bf22ad00-03ea-4690-8077-473346209b7e}';
  D3D11_DECODER_PROFILE_MPEG2_VLD      : TGUID = '{ee27417f-5e28-4e65-beea-1d26b508adc9}';
  D3D11_DECODER_PROFILE_MPEG1_VLD      : TGUID = '{6f3ec719-3735-42cc-8063-65cc3cb36616}';
  D3D11_DECODER_PROFILE_MPEG2and1_VLD  : TGUID = '{86695f12-340e-4f04-9fd3-9253dd327460}';

  D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT         : TGUID = '{1b81be64-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_MOCOMP_FGT           : TGUID = '{1b81be65-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_IDCT_NOFGT           : TGUID = '{1b81be66-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_IDCT_FGT             : TGUID = '{1b81be67-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_VLD_NOFGT            : TGUID = '{1b81be68-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_VLD_FGT              : TGUID = '{1b81be69-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT : TGUID = '{d5f04ff9-3418-45d8-9561-32a76aae2ddd}';

  D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT : TGUID = '{d79be8da-0cf1-4c81-b82a-69a4e236f43d}';
  D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT             : TGUID = '{f9aaccbb-c2b6-4cfc-8779-5707b1760552}';
  D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT          : TGUID = '{705b9d82-76cf-49d6-b7e6-ac8872db013c}';

  D3D11_DECODER_PROFILE_WMV8_POSTPROC  : TGUID = '{1b81be80-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_WMV8_MOCOMP    : TGUID = '{1b81be81-a0c7-11d3-b984-00c04f2e73c5}';

  D3D11_DECODER_PROFILE_WMV9_POSTPROC  : TGUID = '{1b81be90-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_WMV9_MOCOMP    : TGUID = '{1b81be91-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_WMV9_IDCT      : TGUID = '{1b81be94-a0c7-11d3-b984-00c04f2e73c5}';

  D3D11_DECODER_PROFILE_VC1_POSTPROC : TGUID = '{1b81beA0-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_VC1_MOCOMP   : TGUID = '{1b81beA1-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_VC1_IDCTx7   : TGUID = '{1b81beA2-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_VC1_VLD      : TGUID = '{1b81beA3-a0c7-11d3-b984-00c04f2e73c5}';
  D3D11_DECODER_PROFILE_VC1_D2010    : TGUID = '{1b81beA4-a0c7-11d3-b984-00c04f2e73c5}';

  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE          : TGUID = '{efd64d74-c9e8-41d7-a5e9-e9b0e39fa319}';
  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC : TGUID = '{ed418a9f-010d-4eda-9ae3-9a65358d8d2e}';
  D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC   : TGUID = '{ab998b5b-4258-44a9-9feb-94e597a6baae}';

  D3D11_DECODER_PROFILE_HEVC_VLD_MAIN   : TGUID = '{5b11d51b-2f4c-4452-bcc3-09f2a1160cc0}';
  D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 : TGUID = '{107af0e0-ef1a-4d19-aba8-67a163073d13}';

  D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0         : TGUID = '{463707f8-a1d0-4585-876d-83aa6d60b89e}';
  D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2   : TGUID = '{a4c749ef-6ecf-48aa-8448-50a7a1165ff7}';
  D3D11_DECODER_PROFILE_VP8_VLD                  : TGUID = '{90b899ea-3a62-4705-88b3-8df04b2744e7}';

  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE0             : TGUID = '{b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a}';
  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE1             : TGUID = '{6936ff0f-45b1-4163-9cc1-646ef6946108}';
  D3D11_DECODER_PROFILE_AV1_VLD_PROFILE2             : TGUID = '{0c5f2aa1-e541-4089-bb7b-98110a19d7c8}';
  D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2       : TGUID = '{17127009-a00f-4ce1-994e-bf4081f6f3f0}';
  D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2_420   : TGUID = '{2d80bed6-9cac-4835-9e91-327bbc4f9ee8}';

  // AuthenticatedChannel
  D3D11_AUTHENTICATED_QUERY_PROTECTION                                   : TGUID = '{a84eb584-c495-48aa-b94d-8bd2d6fbce05}';
  D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE                                 : TGUID = '{bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be}';
  D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE                                : TGUID = '{ec1c539d-8cff-4e2a-bcc4-f5692f99f480}';
  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION                               : TGUID = '{2634499e-d018-4d74-ac17-7f724059528d}';
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT     : TGUID = '{0db207b3-9450-46a6-82de-1b96d44f9cf2}';
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS           : TGUID = '{649bbadb-f0f4-4639-a15b-24393fc3abac}';
  D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT : TGUID = '{012f0bd6-e662-4474-befd-aa53e5143c6d}';
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT                              : TGUID = '{2c042b5e-8c07-46d5-aabe-8f75cbad4c31}';
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID                                    : TGUID = '{839ddca3-9b4e-41e4-b053-892bd2a11ee7}';
  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES                     : TGUID = '{6214d9d2-432c-4abb-9fce-216eea269e3b}';
  D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT        : TGUID = '{b30f7066-203c-4b07-93fc-ceaafd61241e}';
  D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID              : TGUID = '{f83a5958-e986-4bda-beb0-411f6a7a01b7}';
  D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE           : TGUID = '{ec1791c7-dad3-4f15-9ec3-faa93d60d4f0}';
  D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE                               : TGUID = '{06114bdb-3523-470a-8dca-fbc2845154f0}';
  D3D11_AUTHENTICATED_CONFIGURE_PROTECTION                               : TGUID = '{50455658-3f47-4362-bf99-bfdfcde9ed29}';
  D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION                           : TGUID = '{6346cc54-2cfc-4ad4-8224-d15837de7700}';
  D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE                          : TGUID = '{0772d047-1b40-48e8-9ca6-b5f510de9f01}';
  D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE               : TGUID = '{41fff286-6ae0-4d43-9d55-a46e9efd158a}';

  // CryptoSession
  D3D11_KEY_EXCHANGE_RSAES_OAEP  : TGUID = '{c1949895-d72a-4a1d-8e5d-ed857d171520}';

  // VideoProcessorEnum
  D3D11_CRYPTO_TYPE_AES128_CTR                   : TGUID = '{9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f}';
  D3D11_DECODER_ENCRYPTION_HW_CEPE_CENC          : TGUID = '{b0405235-c13d-44f2-9ae5-dd48e08e5b67}';
  D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC   : TGUID = '{b0405235-c13d-44f2-9ae5-dd48e08e5b67}';
  D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS   : TGUID = '{422d9319-9d21-4bb7-9371-faf5a82c3e04}';
  D3D11_KEY_EXCHANGE_HW_PROTECTION               : TGUID = '{b1170d8a-628d-4da3-ad3b-82ddb08b4970}';


  // Moved to here to prevent warning  W1012 Constant expression violates subrange bounds.
type
  PD3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = ^D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS;
  D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = Cardinal;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS}
const
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32           = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($1);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22           = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($2);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224         = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($4);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332         = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($8);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322        = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($10);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55           = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($20);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64           = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($40);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87           = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($80);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($100);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223}
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER        = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS($80000000);
    {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER}


  // Moved to here to prevent warning  W1012 Constant expression violates subrange bounds.
type
  PD3D11_BUS_TYPE = ^D3D11_BUS_TYPE;
  D3D11_BUS_TYPE = Cardinal;
  {$EXTERNALSYM D3D11_BUS_TYPE}
const
    D3D11_BUS_TYPE_OTHER                                            = D3D11_BUS_TYPE($00000000);
    {$EXTERNALSYM D3D11_BUS_TYPE_OTHER}
    D3D11_BUS_TYPE_PCI                                              = D3D11_BUS_TYPE($00000001);
    {$EXTERNALSYM D3D11_BUS_TYPE_PCI}
    D3D11_BUS_TYPE_PCIX                                             = D3D11_BUS_TYPE($00000002);
    {$EXTERNALSYM D3D11_BUS_TYPE_PCIX}
    D3D11_BUS_TYPE_PCIEXPRESS                                       = D3D11_BUS_TYPE($00000003);
    {$EXTERNALSYM D3D11_BUS_TYPE_PCIEXPRESS}
    D3D11_BUS_TYPE_AGP                                              = D3D11_BUS_TYPE($00000004);
    {$EXTERNALSYM D3D11_BUS_TYPE_AGP}
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET                       = D3D11_BUS_TYPE($00010000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET}
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP          = D3D11_BUS_TYPE($00020000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP}
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET        = D3D11_BUS_TYPE($00030000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET}
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR                = D3D11_BUS_TYPE($00040000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR}
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = D3D11_BUS_TYPE($00050000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE}
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD                            = D3D11_BUS_TYPE($80000000);
    {$EXTERNALSYM D3D11_BUS_IMPL_MODIFIER_NON_STANDARD}


type

  // Forward Interface Declarations

  ID3D11DeviceChild = interface;
  ID3D11DepthStencilState = interface;
  ID3D11BlendState = interface;
  ID3D11RasterizerState = interface;
  ID3D11Resource = interface;
  ID3D11Buffer = interface;
  ID3D11Texture1D = interface;
  ID3D11Texture2D = interface;
  ID3D11Texture3D = interface;
  ID3D11View = interface;
  ID3D11ShaderResourceView = interface;
  ID3D11RenderTargetView = interface;
  ID3D11DepthStencilView = interface;
  ID3D11UnorderedAccessView = interface;
  PID3D11VertexShader = ^ID3D11VertexShader;
  ID3D11VertexShader = interface;
  ID3D11HullShader = interface;
  ID3D11DomainShader = interface;
  ID3D11GeometryShader = interface;
  ID3D11PixelShader = interface;
  ID3D11ComputeShader = interface;
  ID3D11InputLayout = interface;
  ID3D11SamplerState = interface;
  ID3D11Asynchronous = interface;
  ID3D11Query = interface;
  ID3D11Predicate = interface;
  ID3D11Counter = interface;
  ID3D11ClassInstance = interface;
  ID3D11ClassLinkage = interface;
  ID3D11CommandList = interface;
  ID3D11DeviceContext = interface;
  ID3D11Device = interface;
  PID3D11VideoProcessorInputView = ^ID3D11VideoProcessorInputView;
  ID3D11VideoProcessorInputView = interface;



  CD3D11_DEFAULT = record end;
  {$EXTERNALSYM CD3D11_DEFAULT}
  PCD3D11_DEFAULT = ^CD3D11_DEFAULT;
  D3D11_DEFAULT = CD3D11_DEFAULT;
  {$EXTERNALSYM D3D11_DEFAULT}


  D3D11_INPUT_CLASSIFICATION =(
    D3D11_INPUT_PER_VERTEX_DATA = 0,
    D3D11_INPUT_PER_INSTANCE_DATA = 1);
  {$EXTERNALSYM D3D11_INPUT_CLASSIFICATION}


  D3D11_INPUT_ELEMENT_DESC = record
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    Format: DXGI_FORMAT;
    InputSlot: UINT;
    AlignedByteOffset: UINT;
    InputSlotClass: D3D11_INPUT_CLASSIFICATION;
    InstanceDataStepRate: UINT;
  end;
  {$EXTERNALSYM D3D11_INPUT_ELEMENT_DESC}
  PD3D11_INPUT_ELEMENT_DESC = ^D3D11_INPUT_ELEMENT_DESC;

  PD3D11_FILL_MODE = ^D3D11_FILL_MODE;
  D3D11_FILL_MODE = (
    D3D11_FILL_WIREFRAME = 2,
    D3D11_FILL_SOLID = 3);
  {$EXTERNALSYM D3D11_FILL_MODE}

  PD3D11_PRIMITIVE_TOPOLOGY = ^D3D11_PRIMITIVE_TOPOLOGY;
  D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
  {$EXTERNALSYM D3D11_PRIMITIVE_TOPOLOGY}

  D3D11_PRIMITIVE = D3D_PRIMITIVE;
  {$EXTERNALSYM D3D11_PRIMITIVE}

  D3D11_CULL_MODE = (
    D3D11_CULL_NONE = 1,
    D3D11_CULL_FRONT = 2,
    D3D11_CULL_BACK = 3);
  {$EXTERNALSYM D3D11_CULL_MODE}

  D3D11_SO_DECLARATION_ENTRY = record
    Stream: UINT;
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    StartComponent: BYTE;
    ComponentCount: BYTE;
    OutputSlot: BYTE;
  end;
  {$EXTERNALSYM D3D11_SO_DECLARATION_ENTRY}
  PD3D11_SO_DECLARATION_ENTRY = ^D3D11_SO_DECLARATION_ENTRY;


  D3D11_VIEWPORT = record
    TopLeftX: FLOAT;
    TopLeftY: FLOAT;
    Width: FLOAT;
    Height: FLOAT;
    MinDepth: FLOAT;
    MaxDepth: FLOAT;

  public
    constructor Create(const o: D3D11_VIEWPORT); overload;

    constructor Create(aTopLeftX: FLOAT;
                       aTopLeftY: FLOAT;
                       aWidth: FLOAT;
                       aHeight: FLOAT;
                       aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                       aMaxDepth: FLOAT = D3D11_MAX_DEPTH); overload;

    constructor Create(const buff: ID3D11Buffer;
                       pRTView: ID3D11RenderTargetView;
                       aTopLeftX: FLOAT = 0.0;
                       aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                       aMaxDepth: FLOAT = D3D11_MAX_DEPTH); overload;

    constructor Create(const pTex1D: ID3D11Texture1D;
                       pRTView: ID3D11RenderTargetView;
                       aTopLeftX: FLOAT = 0.0;
                       aTinDepth: FLOAT = D3D11_MIN_DEPTH;
                       aTaxDepth: FLOAT = D3D11_MAX_DEPTH); overload;

    constructor Create(const pTex2D: ID3D11Texture2D;
                       pRTView: ID3D11RenderTargetView;
                       aTopLeftX: FLOAT = 0.0;
                       aTopLeftY: FLOAT = 0.0;
                       aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                       aMaxDepth: FLOAT = D3D11_MAX_DEPTH); overload;

    constructor Create(const pTex3D: ID3D11Texture3D;
                       pRTView: ID3D11RenderTargetView;
                       aTopLeftX: FLOAT = 0.0;
                       aTopLeftY: FLOAT = 0.0;
                       aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                       aMaxDepth: FLOAT = D3D11_MAX_DEPTH); overload;
  end;
  {$EXTERNALSYM D3D11_VIEWPORT}
  TD3D11_VIEWPORT = D3D11_VIEWPORT;
  PD3D11_VIEWPORT = ^D3D11_VIEWPORT;

  D3D11_RESOURCE_DIMENSION = (
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D11_RESOURCE_DIMENSION_BUFFER = 1,
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
    );
  {$EXTERNALSYM D3D11_RESOURCE_DIMENSION}

  D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;
  {$EXTERNALSYM D3D11_SRV_DIMENSION}

  D3D11_DSV_DIMENSION = (
    D3D11_DSV_DIMENSION_UNKNOWN = 0,
    D3D11_DSV_DIMENSION_TEXTURE1D = 1,
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D11_DSV_DIMENSION_TEXTURE2D = 3,
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    );
  {$EXTERNALSYM D3D11_DSV_DIMENSION}


  D3D11_RTV_DIMENSION = (
    D3D11_RTV_DIMENSION_UNKNOWN = 0,
    D3D11_RTV_DIMENSION_BUFFER = 1,
    D3D11_RTV_DIMENSION_TEXTURE1D = 2,
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_RTV_DIMENSION_TEXTURE2D = 4,
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D11_RTV_DIMENSION_TEXTURE3D = 8
    );
  {$EXTERNALSYM D3D11_RTV_DIMENSION}

  D3D11_UAV_DIMENSION = (
    D3D11_UAV_DIMENSION_UNKNOWN = 0,
    D3D11_UAV_DIMENSION_BUFFER = 1,
    D3D11_UAV_DIMENSION_TEXTURE1D = 2,
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_UAV_DIMENSION_TEXTURE2D = 4,
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_UAV_DIMENSION_TEXTURE3D = 8
    );
  {$EXTERNALSYM D3D11_UAV_DIMENSION}

  D3D11_USAGE = (
    D3D11_USAGE_DEFAULT = 0,
    D3D11_USAGE_IMMUTABLE = 1,
    D3D11_USAGE_DYNAMIC = 2,
    D3D11_USAGE_STAGING = 3
    );
  {$EXTERNALSYM D3D11_USAGE}

  D3D11_RESOURCE_MISC_FLAG = (
    D3D11_RESOURCE_MISC_GENERATE_MIPS = UINT($1),
    D3D11_RESOURCE_MISC_SHARED = UINT($2),
    D3D11_RESOURCE_MISC_TEXTURECUBE = UINT($4),
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = UINT($10),
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = UINT($20),
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = UINT($40),
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = UINT($80),
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = UINT($100),
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = UINT($200));
  {$EXTERNALSYM D3D11_RESOURCE_MISC_FLAG}

  D3D11_MAP_FLAG = (
    D3D11_MAP_FLAG_DO_NOT_WAIT = UINT($100000));
  {$EXTERNALSYM D3D11_MAP_FLAG}

  D3D11_RAISE_FLAG = (
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = UINT($1));
  {$EXTERNALSYM D3D11_RAISE_FLAG}


  D3D11_RECT = TRECT;
  PD3D11_RECT = ^D3D11_RECT;


  D3D11_BOX = record
    left: UINT;
    top: UINT;
    front: UINT;
    right: UINT;
    bottom: UINT;
    back: UINT;

  public
    constructor Create(const o: D3D11_BOX); overload;

    constructor Create(aLeft: LONG;
                       aTop: LONG;
                       aFront: LONG;
                       aRight: LONG;
                       aBottom: LONG;
                       aBack: LONG); overload;

    class operator Equal(const l: D3D11_BOX;
                         const r: D3D11_BOX): Boolean;

    class operator NotEqual(const l: D3D11_BOX;
                            const r: D3D11_BOX): Boolean;
  end;
  {$EXTERNALSYM D3D11_BOX}
  PD3D11_BOX = ^D3D11_BOX;


  // Interface ID3D11DeviceChild
  // ===========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11DeviceChild);'}
  {$EXTERNALSYM ID3D11DeviceChild}
  ID3D11DeviceChild = interface(IUnknown)
  ['{1841E5C8-16B0-489B-BCC8-44CFB0D5DEAE}']
    procedure GetDevice(out ppDevice: ID3D11Device); stdcall;

    function GetPrivateData(const guid: TGUID;
                            var pDataSize: UINT;
                            pData: Pointer): HRESULT; stdcall;

    function SetPrivateData(const guid: TGUID;
                            DataSize: UINT;
                            const pData: Pointer): HRESULT; stdcall;

    function SetPrivateDataInterface(const guid: TGUID;
                                     const pData: IUnknown): HRESULT; stdcall;
   end;
  {$EXTERNALSYM ID3D11DeviceChild}
  IID_ID3D11DeviceChild = ID3D11DeviceChild;


  D3D11_COMPARISON_FUNC = (
    D3D11_COMPARISON_NEVER = 1,
    D3D11_COMPARISON_LESS = 2,
    D3D11_COMPARISON_EQUAL = 3,
    D3D11_COMPARISON_LESS_EQUAL = 4,
    D3D11_COMPARISON_GREATER = 5,
    D3D11_COMPARISON_NOT_EQUAL = 6,
    D3D11_COMPARISON_GREATER_EQUAL = 7,
    D3D11_COMPARISON_ALWAYS = 8
    );
  {$EXTERNALSYM D3D11_COMPARISON_FUNC}

  D3D11_DEPTH_WRITE_MASK = (
    D3D11_DEPTH_WRITE_MASK_ZERO = 0,
    D3D11_DEPTH_WRITE_MASK_ALL = 1
    );
  {$EXTERNALSYM D3D11_DEPTH_WRITE_MASK}

  D3D11_STENCIL_OP = (
    D3D11_STENCIL_OP_KEEP = 1,
    D3D11_STENCIL_OP_ZERO = 2,
    D3D11_STENCIL_OP_REPLACE = 3,
    D3D11_STENCIL_OP_INCR_SAT = 4,
    D3D11_STENCIL_OP_DECR_SAT = 5,
    D3D11_STENCIL_OP_INVERT = 6,
    D3D11_STENCIL_OP_INCR = 7,
    D3D11_STENCIL_OP_DECR = 8
    );
  {$EXTERNALSYM D3D11_STENCIL_OP}

  D3D11_DEPTH_STENCILOP_DESC = record
    StencilFailOp : D3D11_STENCIL_OP;
    StencilDepthFailOp : D3D11_STENCIL_OP;
    StencilPassOp : D3D11_STENCIL_OP;
    StencilFunc : D3D11_COMPARISON_FUNC;
  end;
  {$EXTERNALSYM D3D11_DEPTH_STENCILOP_DESC}
  PD3D11_DEPTH_STENCILOP_DESC = ^D3D11_DEPTH_STENCILOP_DESC;

  D3D11_DEPTH_STENCIL_DESC = record
    DepthEnable : BOOL;
    DepthWriteMask: D3D11_DEPTH_WRITE_MASK;
    DepthFunc : D3D11_COMPARISON_FUNC;
    StencilEnable: BOOL;
    StencilReadMask: UINT8;
    StencilWriteMask: UINT8;
    FrontFace: D3D11_DEPTH_STENCILOP_DESC;
    BackFace: D3D11_DEPTH_STENCILOP_DESC;

    Constructor Create(default: boolean); overload;

    Constructor Create(const o: D3D11_DEPTH_STENCIL_DESC); overload;

    Constructor Create(aDepthEnable: BOOL;
                       aDepthWriteMask: D3D11_DEPTH_WRITE_MASK;
                       aDepthFunc: D3D11_COMPARISON_FUNC;
                       aStencilEnable: BOOL;
                       aStencilReadMask: UINT8;
                       aStencilWriteMask: UINT8;
                       aFrontStencilFailOp: D3D11_STENCIL_OP;
                       aFrontStencilDepthFailOp: D3D11_STENCIL_OP;
                       aFrontStencilPassOp: D3D11_STENCIL_OP;
                       aFrontStencilFunc: D3D11_COMPARISON_FUNC;
                       aBackStencilFailOp: D3D11_STENCIL_OP;
                       aBackStencilDepthFailOp: D3D11_STENCIL_OP;
                       aBackStencilPassOp: D3D11_STENCIL_OP;
                       aBackStencilFunc: D3D11_COMPARISON_FUNC); overload;

  end;
  {$EXTERNALSYM D3D11_DEPTH_STENCIL_DESC}
  PD3D11_DEPTH_STENCIL_DESC = ^D3D11_DEPTH_STENCIL_DESC;


  // Interface ID3D11DepthStencilState
  // =================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11DepthStencilState);'}
  {$EXTERNALSYM ID3D11DepthStencilState}
  ID3D11DepthStencilState = interface(ID3D11DeviceChild)
  ['{03823EFB-8D8F-4E1C-9AA2-F64BB2CBFDF1}']

    procedure GetDesc(out pDesc: D3D11_DEPTH_STENCIL_DESC); stdcall;

  end;
  {$EXTERNALSYM IID_ID3D11DepthStencilState}
  IID_ID3D11DepthStencilState = ID3D11DepthStencilState;


  D3D11_BLEND = (
    D3D11_BLEND_ZERO = 1,
    D3D11_BLEND_ONE = 2,
    D3D11_BLEND_SRC_COLOR = 3,
    D3D11_BLEND_INV_SRC_COLOR = 4,
    D3D11_BLEND_SRC_ALPHA = 5,
    D3D11_BLEND_INV_SRC_ALPHA = 6,
    D3D11_BLEND_DEST_ALPHA = 7,
    D3D11_BLEND_INV_DEST_ALPHA = 8,
    D3D11_BLEND_DEST_COLOR = 9,
    D3D11_BLEND_INV_DEST_COLOR = 10,
    D3D11_BLEND_SRC_ALPHA_SAT = 11,
    D3D11_BLEND_BLEND_FACTOR = 14,
    D3D11_BLEND_INV_BLEND_FACTOR = 15,
    D3D11_BLEND_SRC1_COLOR = 16,
    D3D11_BLEND_INV_SRC1_COLOR = 17,
    D3D11_BLEND_SRC1_ALPHA = 18,
    D3D11_BLEND_INV_SRC1_ALPHA = 19
    );
  {$EXTERNALSYM D3D11_BLEND}

  D3D11_BLEND_OP = (
    D3D11_BLEND_OP_ADD = 1,
    D3D11_BLEND_OP_SUBTRACT = 2,
    D3D11_BLEND_OP_REV_SUBTRACT = 3,
    D3D11_BLEND_OP_MIN = 4,
    D3D11_BLEND_OP_MAX = 5
    );
  {$EXTERNALSYM D3D11_BLEND_OP}

  D3D11_COLOR_WRITE_ENABLE = (
    D3D11_COLOR_WRITE_ENABLE_RED = 1,
    D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D11_COLOR_WRITE_ENABLE_ALL = (D3D11_COLOR_WRITE_ENABLE_RED +
                                    D3D11_COLOR_WRITE_ENABLE_GREEN +
                                    D3D11_COLOR_WRITE_ENABLE_BLUE +
                                    D3D11_COLOR_WRITE_ENABLE_ALPHA)
    );
  {$EXTERNALSYM D3D11_COLOR_WRITE_ENABLE}

  D3D11_RENDER_TARGET_BLEND_DESC = record
    BlendEnable: BOOL;
    SrcBlend: D3D11_BLEND;
    DestBlend: D3D11_BLEND;
    BlendOp: D3D11_BLEND_OP;
    SrcBlendAlpha: D3D11_BLEND;
    DestBlendAlpha: D3D11_BLEND;
    BlendOpAlpha: D3D11_BLEND_OP;
    RenderTargetWriteMask: UINT8;
  end;
  {$EXTERNALSYM D3D11_RENDER_TARGET_BLEND_DESC}
  PD3D11_RENDER_TARGET_BLEND_DESC = ^D3D11_RENDER_TARGET_BLEND_DESC;

  D3D11_BLEND_DESC = record
    AlphaToCoverageEnable: BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget: array [0..7] of D3D11_RENDER_TARGET_BLEND_DESC;

    constructor Create(Default: Boolean); overload;

    constructor Create(const o: D3D11_BLEND_DESC); overload;
  end;
  {$EXTERNALSYM D3D11_BLEND_DESC}
  PD3D11_BLEND_DESC = ^D3D11_BLEND_DESC;


  // Interface ID3D11BlendState
  // ==========================
  //
  {$EXTERNALSYM IID_ID3D11BlendState}
    IID_ID3D11BlendState = ID3D11BlendState;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11BlendState);'}
  {$EXTERNALSYM ID3D11BlendState}
    ID3D11BlendState = interface (ID3D11DeviceChild)
    ['{75B68FAA-347D-4159-8F45-A0640F01CD9A}']

      procedure GetDesc(out pDesc: D3D11_BLEND_DESC); stdcall;

    end;


  D3D11_RASTERIZER_DESC = record
    FillMode: D3D11_FILL_MODE;
    CullMode: D3D11_CULL_MODE;
    FrontCounterClockwise: Bool;
    DepthBias: Integer;
    DepthBiasClamp: FLOAT;
    SlopeScaledDepthBias: FLOAT;
    DepthClipEnable: Bool;
    ScissorEnable: Bool;
    MultisampleEnable: Bool;
    AntialiasedLineEnable: Bool;
    public
      constructor Create(const o: D3D11_RASTERIZER_DESC); overload;

      constructor Create(Default: boolean); overload;

      constructor Create(aFillMode: D3D11_FILL_MODE;
                         aCullMode: D3D11_CULL_MODE;
                         aFrontCounterClockwise: Bool;
                         aDepthBias: UINT32;
                         aDepthBiasClamp: FLOAT;
                         aSlopeScaledDepthBias: FLOAT;
                         aDepthClipEnable: Bool;
                         aScissorEnable: Bool;
                         aMultisampleEnable: Bool;
                         aAntialiasedLineEnable: Bool); overload;
  end;
  {$EXTERNALSYM D3D11_RASTERIZER_DESC}
  PD3D11_RASTERIZER_DESC = ^D3D11_RASTERIZER_DESC;



  // Interface ID3D11RasterizerState
  // ===============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11RasterizerState);'}
  {$EXTERNALSYM ID3D11RasterizerState}
  ID3D11RasterizerState = interface(ID3D11DeviceChild)
  ['{9BB4AB81-AB1A-4D8F-B506-FC04200B6EE7}']

    procedure GetDesc(out pDesc: D3D11_RASTERIZER_DESC); stdcall;

  end;
  {$EXTERNALSYM IID_ID3D11RasterizerState}
  IID_ID3D11RasterizerState = ID3D11RasterizerState;


  D3D11_SUBRESOURCE_DATA = record
    pSysMem: Pointer;
    SysMemPitch: UINT;
    SysMemSlicePitch: UINT;
  end;
  {$EXTERNALSYM D3D11_SUBRESOURCE_DATA}
  PD3D11_SUBRESOURCE_DATA = ^D3D11_SUBRESOURCE_DATA;

  D3D11_MAPPED_SUBRESOURCE = record
    pData: Pointer;
    RowPitch: UINT;
    DepthPitch: UINT;
  end;
  {$EXTERNALSYM D3D11_MAPPED_SUBRESOURCE}
  PD3D11_MAPPED_SUBRESOURCE = ^D3D11_MAPPED_SUBRESOURCE;


  // Interface ID3D11Resource
  // ========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Resource);'}
  {$EXTERNALSYM ID3D11Resource}
  PID3D11Resource = ^ID3D11Resource;
  ID3D11Resource = interface (ID3D11DeviceChild)
  ['{DC8E63F3-D12B-4952-B47B-5E45026A862D}']

    procedure GetType(out pResourceDimension: D3D11_RESOURCE_DIMENSION); stdcall;

    procedure SetEvictionPriority(EvictionPriority: UINT); stdcall;

    function GetEvictionPriority: UINT; stdcall;

  end;
  IID_ID3D11Resource = ID3D11Resource;
  {$EXTERNALSYM IID_ID3D11Resource}


  D3D11_BUFFER_DESC = record
    ByteWidth: UINT;
    Usage: D3D11_USAGE;
    BindFlags: UINT;
    CPUAccessFlags: UINT;
    MiscFlags: UINT;
    StructureByteStride: UINT;

  public
    constructor Create(const o: D3D11_BUFFER_DESC); overload;

    constructor Create(aByteWidth: UINT;
                       aBindFlags: UINT;
                       aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                       aCpuaccessFlags: UINT = 0;
                       aMiscFlags: UINT = 0;
                       aStructureByteStride: UINT = 0); overload;
  end;
  {$EXTERNALSYM D3D11_BUFFER_DESC}
  PD3D11_BUFFER_DESC = ^D3D11_BUFFER_DESC;


  // Interface ID3D11Buffer
  // ======================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Buffer);'}
  {$EXTERNALSYM ID3D11Buffer}
  PID3D11Buffer = ^ID3D11Buffer;
  ID3D11Buffer = interface(ID3D11Resource)
  ['{48570B85-D1EE-4FCD-A250-EB350722B037}']

    procedure GetDesc(out pDesc: D3D11_BUFFER_DESC); stdcall;

  end;
  IID_ID3D11Buffer = ID3D11Buffer;
  {$EXTERNALSYM IID_ID3D11Buffer}



  D3D11_TEXTURE1D_DESC = record
    Width: UINT;
    MipLevels: UINT;
    ArraySize: UINT;
    Format: DXGI_FORMAT;
    Usage: D3D11_USAGE;
    BindFlags: UINT;
    CPUAccessFlags: UINT;
    MiscFlags: UINT;
  public
    constructor Create(const o: D3D11_TEXTURE1D_DESC); overload;

    constructor Create(aFormat: DXGI_FORMAT;
                       aWidth: UINT;
                       aArraySize: UINT = 1;
                       aMipLevels: UINT = 0;
                       aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                       aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                       aCpuaccessFlags: UINT = 0;
                       aMiscFlags: UINT = 0); overload;
  end;
  {$EXTERNALSYM D3D11_TEXTURE1D_DESC}
  PD3D11_TEXTURE1D_DESC = ^D3D11_TEXTURE1D_DESC;


  // Interface ID3D11Texture1D
  // =========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Texture1D);'}
  {$EXTERNALSYM ID3D11Texture1D}
  ID3D11Texture1D = interface(ID3D11Resource)
  ['{F8FB5C27-C6B3-4F75-A4C8-439AF2EF564C}']

    procedure GetDesc(out pDesc: D3D11_TEXTURE1D_DESC); stdcall;

  end;
  IID_ID3D11Texture1D = ID3D11Texture1D;
  {$EXTERNALSYM IID_ID3D11Texture1D}


  D3D11_TEXTURE2D_DESC = record
    Width: UINT;
    Height: UINT;
    MipLevels: UINT;
    ArraySize: UINT;
    Format: DXGI_FORMAT;
    SampleDesc: DXGI_SAMPLE_DESC;
    Usage: D3D11_USAGE;
    BindFlags: UINT;
    CPUAccessFlags: UINT;
    MiscFlags: UINT;

  public
    constructor Create(const o: D3D11_TEXTURE2D_DESC); overload;

    constructor Create(aFormat: DXGI_FORMAT;
                       aWidth: UINT;
                       aHeight: UINT;
                       aArraySize: UINT = 1;
                       aMipLevels: UINT = 0;
                       aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                       aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                       aCpuaccessFlags: UINT = 0;
                       aSampleCount: UINT = 1;
                       aSampleQuality: UINT = 0;
                       aMiscFlags: UINT = 0); overload;

  end;
  {$EXTERNALSYM D3D11_TEXTURE2D_DESC}
  PD3D11_TEXTURE2D_DESC = ^D3D11_TEXTURE2D_DESC;


  // Interface ID3D11Texture2D
  // =========================
  //
  {$EXTERNALSYM IID_ID3D11Texture2D}
  IID_ID3D11Texture2D = ID3D11Texture2D;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Texture2D);'}
  {$EXTERNALSYM ID3D11Texture2D}
  ID3D11Texture2D = interface(ID3D11Resource)
  ['{6F15AAF2-D208-4E89-9AB4-489535D34F9C}']
    procedure GetDesc(out pDesc: D3D11_TEXTURE2D_DESC); stdcall;
  end;


  D3D11_TEXTURE3D_DESC = record
    Width: UINT;
    Height: UINT;
    Depth: UINT;
    MipLevels: UINT;
    Format: DXGI_FORMAT;
    Usage: D3D11_USAGE;
    BindFlags: UINT;
    CPUAccessFlags: UINT;
    MiscFlags: UINT;

  public
    constructor Create(const o: D3D11_TEXTURE3D_DESC); overload;

    constructor Create(aFormat: DXGI_FORMAT;
                       aWidth: UINT;
                       aHeight: UINT;
                       aDepth: UINT;
                       aMipLevels: UINT = 0;
                       aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                       aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                       aCpuaccessFlags: UINT = 0;
                       aMiscFlags: UINT = 0); overload;
  end;
  {$EXTERNALSYM D3D11_TEXTURE3D_DESC}
  PD3D11_TEXTURE3D_DESC = ^D3D11_TEXTURE3D_DESC;


  // Interface ID3D11Texture3D
  // =========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Texture3D);'}
  {$EXTERNALSYM ID3D11Texture3D}
  ID3D11Texture3D = interface(ID3D11Resource)
  ['{037E866E-F56D-4357-A8AF-9DABBE6E250E}']

    procedure GetDesc(out pDesc: D3D11_TEXTURE3D_DESC); stdcall;

  end;
  IID_ID3D11Texture3D = ID3D11Texture3D;
  {$EXTERNALSYM IID_ID3D11Texture3D}


  D3D11_TEXTURECUBE_FACE = (
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5);
  {$EXTERNALSYM D3D11_TEXTURECUBE_FACE}


  // Interface ID3D11View
  // ====================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11View);'}
  {$EXTERNALSYM ID3D11View}
  ID3D11View = interface(ID3D11DeviceChild)
  ['{839D1216-BB2E-412B-B7F4-A9DBEBE08ED1}']

    procedure GetResource(out ppResource: ID3D11Resource); stdcall;

  end;
  IID_ID3D11View = ID3D11View;
  {$EXTERNALSYM IID_ID3D11View}



  D3D11_BUFFER_SRV = record
    case Byte of
      0:
        (FirstElement: UINT;
         NumElements: UINT;);
      1:
        (ElementOffset: UINT;
         ElementWidth: UINT;)
    end;
  {$EXTERNALSYM D3D11_BUFFER_SRV}
  PD3D11_BUFFER_SRV = ^D3D11_BUFFER_SRV;


  D3D11_BUFFEREX_SRV_FLAG = (
    D3D11_BUFFEREX_SRV_FLAG_RAW = $1);
  {$EXTERNALSYM D3D11_BUFFEREX_SRV_FLAG}
  PD3D11_BUFFEREX_SRV_FLAG = ^D3D11_BUFFEREX_SRV_FLAG;

  D3D11_BUFFEREX_SRV = record
    FirstElement: UINT;
    NumElements: UINT;
    Flags: UINT;
  end;
  {$EXTERNALSYM D3D11_BUFFEREX_SRV}
  PD3D11_BUFFEREX_SRV = ^D3D11_BUFFEREX_SRV;

  D3D11_TEX1D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_SRV}
  PD3D11_TEX1D_SRV = ^D3D11_TEX1D_SRV;

  D3D11_TEX1D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_ARRAY_SRV}
  PD3D11_TEX1D_ARRAY_SRV = ^D3D11_TEX1D_ARRAY_SRV;

  D3D11_TEX2D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_SRV}
  PD3D11_TEX2D_SRV = ^D3D11_TEX2D_SRV;

  D3D11_TEX2D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_ARRAY_SRV}
  PD3D11_TEX2D_ARRAY_SRV = ^D3D11_TEX2D_ARRAY_SRV;

  D3D11_TEX3D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX3D_SRV}
  PD3D11_TEX3D_SRV = ^D3D11_TEX3D_SRV;

  D3D11_TEXCUBE_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
  end;
  {$EXTERNALSYM D3D11_TEXCUBE_SRV}
  PD3D11_TEXCUBE_SRV = ^D3D11_TEXCUBE_SRV;

  D3D11_TEXCUBE_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    First2DArrayFace: UINT;
    NumCubes: UINT;
  end;
  {$EXTERNALSYM D3D11_TEXCUBE_ARRAY_SRV}
  PD3D11_TEXCUBE_ARRAY_SRV = ^D3D11_TEXCUBE_ARRAY_SRV;

  D3D11_TEX2DMS_SRV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_SRV}
  PD3D11_TEX2DMS_SRV = ^D3D11_TEX2DMS_SRV;

  D3D11_TEX2DMS_ARRAY_SRV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_ARRAY_SRV}
  PD3D11_TEX2DMS_ARRAY_SRV = ^D3D11_TEX2DMS_ARRAY_SRV;

  D3D11_SHADER_RESOURCE_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_SRV_DIMENSION;

    public
      constructor Create(const o: D3D11_SHADER_RESOURCE_VIEW_DESC); overload;

      constructor Create(aViewDimension: D3D11_SRV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMostDetailedMip: UINT = 0; // FirstElement for BUFFER
                         aMipLevels : UINT = UINT(-1); // NumElements for BUFFER
                         aFirstArraySlice: UINT = 0; // First2DArrayFace for TEXTURECUBEARRAY
                         aArraySize : UINT = UINT(-1); // NumCubes for TEXTURECUBEARRAY
                         aFlags: UINT = 0); overload;

      constructor Create(const aBuffer: ID3D11Buffer;
                         aFormat: DXGI_FORMAT;
                         aFirstElement: UINT;
                         aNumElements: UINT;
                         aFlags: UINT = 0); overload;

      constructor Create(const pTex1D: ID3D11Texture1D;
                         aViewDimension: D3D11_SRV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMostDetailedMip: UINT = 0;
                         aMipLevels: UINT = UINT(-1);
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1)); overload;

      constructor Create(const pTex2D: ID3D11Texture2D;
                         aViewDimension: D3D11_SRV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMostDetailedMip: UINT = 0;
                         aMipLevels: UINT = UINT(-1);
                         aFirstArraySlice: UINT = 0; (*First2DArrayFace for TEXTURECUBEARRAY *)
                         aArraySize: UINT = UINT(-1)   (*NumCubes for TEXTURECUBEARRAY *)); overload;

      constructor Create(const pTex3D: ID3D11Texture3D;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMostDetailedMip: UINT = 0;
                         aMipLevels: UINT = UINT(-1)); overload;

    case Byte of
      0: (Buffer: D3D11_BUFFER_SRV);
      1: (Texture1D: D3D11_TEX1D_SRV);
      2: (Texture1DArray: D3D11_TEX1D_ARRAY_SRV);
      3: (Texture2D: D3D11_TEX2D_SRV);
      4: (Texture2DArray: D3D11_TEX2D_ARRAY_SRV);
      5: (Texture2DMS: D3D11_TEX2DMS_SRV);
      6: (Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV);
      7: (Texture3D: D3D11_TEX3D_SRV);
      8: (TextureCube: D3D11_TEXCUBE_SRV);
      9: (TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV);
      10: (BufferEx: D3D11_BUFFEREX_SRV);

  end;
  {$EXTERNALSYM D3D11_SHADER_RESOURCE_VIEW_DESC}
  PD3D11_SHADER_RESOURCE_VIEW_DESC = ^D3D11_SHADER_RESOURCE_VIEW_DESC;


  // Interface ID3D11ShaderResourceView
  // ==================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ShaderResourceView);'}
  {$EXTERNALSYM ID3D11ShaderResourceView}
  PID3D11ShaderResourceView = ^ID3D11ShaderResourceView;
  ID3D11ShaderResourceView = interface(ID3D11View)
  ['{B0E06FE0-8192-4E1A-B1CA-36D7414710B2}']

    procedure GetDesc(out pDesc: D3D11_SHADER_RESOURCE_VIEW_DESC); stdcall;

  end;
  IID_ID3D11ShaderResourceView = ID3D11ShaderResourceView;
  {$EXTERNALSYM IID_ID3D11ShaderResourceView}


  D3D11_BUFFER_RTV = record
    case Byte of
      0: (FirstElement: UINT;
          numElements: UINT);
      1: (ElementOffset: UINT;
          ElementWidth: UINT);
  end;
  {$EXTERNALSYM D3D11_BUFFER_RTV}
  PD3D11_BUFFER_RTV = ^D3D11_BUFFER_RTV;

  D3D11_TEX1D_RTV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_RTV}
  PD3D11_TEX1D_RTV = ^D3D11_TEX1D_RTV;

  D3D11_TEX1D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_ARRAY_RTV}
  PD3D11_TEX1D_ARRAY_RTV = ^D3D11_TEX1D_ARRAY_RTV;

  D3D11_TEX2D_RTV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_RTV}
  PD3D11_TEX2D_RTV = ^D3D11_TEX2D_RTV;

  D3D11_TEX2DMS_RTV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_RTV}
  PD3D11_TEX2DMS_RTV = ^D3D11_TEX2DMS_RTV;

  D3D11_TEX2D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_ARRAY_RTV}
  PD3D11_TEX2D_ARRAY_RTV = ^D3D11_TEX2D_ARRAY_RTV;

  D3D11_TEX2DMS_ARRAY_RTV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_ARRAY_RTV}
  PD3D11_TEX2DMS_ARRAY_RTV = ^D3D11_TEX2DMS_ARRAY_RTV;

  D3D11_TEX3D_RTV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX3D_RTV}
  PD3D11_TEX3D_RTV = ^D3D11_TEX3D_RTV;

  D3D11_RENDER_TARGET_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_RTV_DIMENSION;
    public
      constructor Create(const o: D3D11_RENDER_TARGET_VIEW_DESC); overload;

      constructor Create(aViewDimension: D3D11_RTV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;        {FirstElement for BUFFER}
                         aFirstArraySlice: UINT = 0; {NumElements for BUFFER, FirstWSlice for TEXTURE3D}
                         aArraySize: UINT = UINT(-1) {WSize for TEXTURE3D}); overload;


      constructor Create(const aBuffer: ID3D11Buffer;
                         aFormat: DXGI_FORMAT;
                         aFirstElement: UINT;
                         aNumElements: UINT); overload;

      constructor Create(const pTex1D: ID3D11Texture1D;
                         aViewDimension: D3D11_RTV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1)); overload;

      constructor Create(const pTex2D: ID3D11Texture2D;
                         aViewDimension: D3D11_RTV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1)); overload;

      constructor Create(const pTex3D: ID3D11Texture3D;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstWSlice: UINT = 0;
                         awSize: UINT = UINT(-1)); overload;

    case Byte of
      0: (Buffer: D3D11_BUFFER_RTV);
      1: (Texture1D: D3D11_TEX1D_RTV);
      2: (Texture1DArray: D3D11_TEX1D_ARRAY_RTV);
      3: (Texture2D: D3D11_TEX2D_RTV);
      4: (Texture2DArray: D3D11_TEX2D_ARRAY_RTV);
      5: (Texture2DMS: D3D11_TEX2DMS_RTV);
      6: (Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV);
      7: (Texture3D: D3D11_TEX3D_RTV);
  end;
  {$EXTERNALSYM D3D11_RENDER_TARGET_VIEW_DESC}
  PD3D11_RENDER_TARGET_VIEW_DESC = ^D3D11_RENDER_TARGET_VIEW_DESC;


  // Interface ID3D11RenderTargetView
  // ================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11RenderTargetView);'}
  {$EXTERNALSYM ID3D11RenderTargetView}
  PID3D11RenderTargetView = ^ID3D11RenderTargetView;
  ID3D11RenderTargetView = interface(ID3D11View)
  ['{DFDBA067-0B8D-4865-875B-D7B4516CC164}']

    procedure GetDesc(out pDesc: D3D11_RENDER_TARGET_VIEW_DESC); stdcall;

  end;
  IID_ID3D11RenderTargetView = ID3D11RenderTargetView;
  {$EXTERNALSYM IID_ID3D11RenderTargetView}


  D3D11_TEX1D_DSV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_DSV}
  PD3D11_TEX1D_DSV = ^D3D11_TEX1D_DSV;

  D3D11_TEX1D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_ARRAY_DSV}
  PD3D11_TEX1D_ARRAY_DSV = ^D3D11_TEX1D_ARRAY_DSV;

  D3D11_TEX2D_DSV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_DSV}
  PD3D11_TEX2D_DSV = ^D3D11_TEX2D_DSV;

  D3D11_TEX2D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_ARRAY_DSV}
  PD3D11_TEX2D_ARRAY_DSV = ^D3D11_TEX2D_ARRAY_DSV;

  D3D11_TEX2DMS_DSV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_DSV}
  PD3D11_TEX2DMS_DSV = ^D3D11_TEX2DMS_DSV;

  D3D11_TEX2DMS_ARRAY_DSV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2DMS_ARRAY_DSV}
  PD3D11_TEX2DMS_ARRAY_DSV = ^D3D11_TEX2DMS_ARRAY_DSV;

  D3D11_DSV_FLAG = (
    D3D11_DSV_READ_ONLY_DEPTH = UINT($1),
    D3D11_DSV_READ_ONLY_STENCIL = UINT($2));
  {$EXTERNALSYM D3D11_DSV_FLAG}
  PD3D11_DSV_FLAG = ^D3D11_DSV_FLAG;

  D3D11_DEPTH_STENCIL_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_DSV_DIMENSION;
    Flags: UINT;

    public
      constructor Create(const o: D3D11_DEPTH_STENCIL_VIEW_DESC); overload;

      constructor Create(aViewDimension: D3D11_DSV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1);
                         aFlags: UINT = 0); overload;

      constructor Create(const pTex1D: ID3D11Texture1D;
                         aViewDimension: D3D11_DSV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1);
                         aFlags: UINT = 0); overload;

      constructor Create(const pTex2D: ID3D11Texture2D;
                         aViewDimension: D3D11_DSV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1);
                         aFlags: UINT = 0); overload;

    case Byte of
      0: (Texture1D: D3D11_TEX1D_DSV);
      1: (Texture1DArray: D3D11_TEX1D_ARRAY_DSV);
      2: (Texture2D: D3D11_TEX2D_DSV);
      3: (Texture2DArray: D3D11_TEX2D_ARRAY_DSV);
      4: (Texture2DMS: D3D11_TEX2DMS_DSV);
      5: (Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV);
  end;
  {$EXTERNALSYM D3D11_DEPTH_STENCIL_VIEW_DESC}
  PD3D11_DEPTH_STENCIL_VIEW_DESC = ^D3D11_DEPTH_STENCIL_VIEW_DESC;


  // Interface ID3D11DepthStencilView
  // ================================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11DepthStencilView);'}
  {$EXTERNALSYM ID3D11DepthStencilView}
  ID3D11DepthStencilView = interface(ID3D11View)
  ['{9FDAC92A-1876-48C3-AFAD-25B94F84A9B6}']
    procedure GetDesc(out pDesc: D3D11_DEPTH_STENCIL_VIEW_DESC); stdcall;
  end;
  IID_ID3D11DepthStencilView = ID3D11DepthStencilView;
  {$EXTERNALSYM IID_ID3D11DepthStencilView}


  D3D11_BUFFER_UAV_FLAG = (
    D3D11_BUFFER_UAV_FLAG_RAW = $1,
    D3D11_BUFFER_UAV_FLAG_APPEND = $2,
    D3D11_BUFFER_UAV_FLAG_COUNTER = $4);
  {$EXTERNALSYM D3D11_BUFFER_UAV_FLAG}

  D3D11_BUFFER_UAV = record
    FirstElement: UINT;
    NumElements: UINT;
    Flags: UINT;
  end;
  {$EXTERNALSYM D3D11_BUFFER_UAV}
  PD3D11_BUFFER_UAV = ^D3D11_BUFFER_UAV;

  D3D11_TEX1D_UAV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_UAV}
  PD3D11_TEX1D_UAV = ^D3D11_TEX1D_UAV;

  D3D11_TEX1D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX1D_ARRAY_UAV}
  PD3D11_TEX1D_ARRAY_UAV = ^D3D11_TEX1D_ARRAY_UAV;

  D3D11_TEX2D_UAV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_UAV}
  PD3D11_TEX2D_UAV = ^D3D11_TEX2D_UAV;

  D3D11_TEX2D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_ARRAY_UAV}
  PD3D11_TEX2D_ARRAY_UAV = ^D3D11_TEX2D_ARRAY_UAV;

  D3D11_TEX3D_UAV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX3D_UAV}
  PD3D11_TEX3D_UAV = ^D3D11_TEX3D_UAV;

  D3D11_UNORDERED_ACCESS_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D11_UAV_DIMENSION;

    public
      constructor Create(const o: D3D11_UNORDERED_ACCESS_VIEW_DESC); overload;

      constructor Create(aViewDimension: D3D11_UAV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0; (* FirstElement for BUFFER *)
                         aFirstArraySlice: UINT = 0; (* NumElements for BUFFER, FirstWSlice for TEXTURE3D *)
                         aArraySize: UINT = UINT(-1); (* WSize for TEXTURE3D *)
                         aFlags: UINT = 0 (* BUFFER only *)); overload;

      constructor Create(const aBuffer: ID3D11Buffer;
                         aFormat: DXGI_FORMAT;
                         aFirstElement: UINT;
                         aNumElements: UINT;
                         aFlags: UINT = 0); overload;

      constructor Create(const pTex1D: ID3D11Texture1D;
                         aViewDimension: D3D11_UAV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice: UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1)); overload;

      constructor Create(const pTex2D: ID3D11Texture2D;
                         aViewDimension: D3D11_UAV_DIMENSION;
                         aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                         aMipSlice : UINT = 0;
                         aFirstArraySlice: UINT = 0;
                         aArraySize: UINT = UINT(-1)); overload;

     constructor Create(const pTex3D: ID3D11Texture3D;
                        aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                        aMipSlice : UINT = 0;
                        aFirstWSlice: UINT = 0;
                        awSize: UINT = UINT(-1)); overload;

    case Byte of
      0: (Buffer: D3D11_BUFFER_UAV);
      1: (Texture1D: D3D11_TEX1D_UAV);
      2: (Texture1DArray: D3D11_TEX1D_ARRAY_UAV);
      3: (Texture2D: D3D11_TEX2D_UAV);
      4: (Texture2DArray: D3D11_TEX2D_ARRAY_UAV);
      5: (Texture3D: D3D11_TEX3D_UAV);
  end;
  {$EXTERNALSYM D3D11_UNORDERED_ACCESS_VIEW_DESC}
  PD3D11_UNORDERED_ACCESS_VIEW_DESC = ^D3D11_UNORDERED_ACCESS_VIEW_DESC;


  // Interface ID3D11UnorderedAccessView
  // ===================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11UnorderedAccessView);'}
  {$EXTERNALSYM ID3D11UnorderedAccessView}
  PID3D11UnorderedAccessView = ^ID3D11UnorderedAccessView;
  ID3D11UnorderedAccessView = interface(ID3D11View)
  ['{28ACF509-7F5C-48F6-8611-F316010A6380}']

    procedure GetDesc(out pDesc: D3D11_UNORDERED_ACCESS_VIEW_DESC); stdcall;

  end;
  IID_ID3D11UnorderedAccessView = ID3D11UnorderedAccessView;
  {$EXTERNALSYM IID_ID3D11UnorderedAccessView}


  // Interface ID3D11VertexShader
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VertexShader);'}
  {$EXTERNALSYM ID3D11VertexShader}
  ID3D11VertexShader = interface(ID3D11DeviceChild)
  ['{3B301D64-D678-4289-8897-22F8928B72F3}']

  end;
  IID_ID3D11VertexShader = ID3D11VertexShader;
  {$EXTERNALSYM IID_ID3D11VertexShader}


  // Interface ID3D11HullShader
  // ==========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11HullShader);'}
  {$EXTERNALSYM ID3D11HullShader}
  ID3D11HullShader = interface(ID3D11DeviceChild)
  ['{8E5C6061-628A-4C8E-8264-BBE45CB3D5DD}']

  end;
  {$EXTERNALSYM IID_ID3D11HullShader}
  IID_ID3D11HullShader = ID3D11HullShader;


  // Interface ID3D11DomainShader
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11DomainShader);'}
  {$EXTERNALSYM ID3D11DomainShader}
  ID3D11DomainShader = interface(ID3D11DeviceChild)
  ['{F582C508-0F36-490C-9977-31EECE268CFA}']

  end;
  IID_ID3D11DomainShader = ID3D11DomainShader;
  {$EXTERNALSYM IID_ID3D11DomainShader}


  // Interface ID3D11GeometryShader
  // ==============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11GeometryShader);'}
  {$EXTERNALSYM ID3D11GeometryShader}
  ID3D11GeometryShader = interface(ID3D11DeviceChild)
  ['{38325B96-EFFB-4022-BA02-2E795B70275C}']

  end;
  IID_ID3D11GeometryShader = ID3D11GeometryShader;
  {$EXTERNALSYM IID_ID3D11GeometryShader}


  // Interface ID3D11PixelShader
  // ===========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11PixelShader);'}
  {$EXTERNALSYM ID3D11PixelShader}
  ID3D11PixelShader = interface(ID3D11DeviceChild)
  ['{EA82E40D-51DC-4F33-93D4-DB7C9125AE8C}']

  end;
  IID_ID3D11PixelShader = ID3D11PixelShader;
  {$EXTERNALSYM IID_ID3D11PixelShader}


  // interface ID3D11ComputeShader
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ComputeShader);'}
  {$EXTERNALSYM ID3D11ComputeShader}
  ID3D11ComputeShader = interface(ID3D11DeviceChild)
  ['{4F5B196E-C2BD-495E-BD01-1FDED38E4969}']

  end;
  IID_ID3D11ComputeShader = ID3D11ComputeShader;
  {$EXTERNALSYM IID_ID3D11ComputeShader}


  // Interface ID3D11InputLayout
  // ===========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11InputLayout);'}
  {$EXTERNALSYM ID3D11InputLayout}
  ID3D11InputLayout = interface(ID3D11DeviceChild)
  ['{E4819DDC-4CF0-4025-BD26-5DE82A3E07B7}']

  end;
  IID_ID3D11InputLayout = ID3D11InputLayout;
  {$EXTERNALSYM IID_ID3D11InputLayout}


  D3D11_FILTER = (
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = $1,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = $4,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = $5,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = $10,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $11,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = $14,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = $15,
    D3D11_FILTER_ANISOTROPIC = $55,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = $80,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = $81,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = $84,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = $85,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = $90,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = $91,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = $94,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = $95,
    D3D11_FILTER_COMPARISON_ANISOTROPIC = $d5);
  {$EXTERNALSYM D3D11_FILTER}
  PD3D11_FILTER = ^D3D11_FILTER;

  D3D11_FILTER_TYPE = (
    D3D11_FILTER_TYPE_POINT = 0,
    D3D11_FILTER_TYPE_LINEAR = 1);
  {$EXTERNALSYM D3D11_FILTER_TYPE}
  PD3D11_FILTER_TYPE = ^D3D11_FILTER_TYPE;

  D3D11_TEXTURE_ADDRESS_MODE = (
    D3D11_TEXTURE_ADDRESS_WRAP = 1,
    D3D11_TEXTURE_ADDRESS_MIRROR = 2,
    D3D11_TEXTURE_ADDRESS_CLAMP = 3,
    D3D11_TEXTURE_ADDRESS_BORDER = 4,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5);
  {$EXTERNALSYM D3D11_TEXTURE_ADDRESS_MODE}
  PD3D11_TEXTURE_ADDRESS_MODE = ^D3D11_TEXTURE_ADDRESS_MODE;

  D3D11_SAMPLER_DESC = record
    Filter: D3D11_FILTER;
    AddressU: D3D11_TEXTURE_ADDRESS_MODE;
    AddressV: D3D11_TEXTURE_ADDRESS_MODE;
    AddressW: D3D11_TEXTURE_ADDRESS_MODE;
    MipLODBias: FLOAT;
    MaxAnisotropy: UINT;
    ComparisonFunc: D3D11_COMPARISON_FUNC;
    BorderColor: array [0..3] of FLOAT;
    MinLOD: FLOAT;
    MaxLOD: FLOAT;

    public
      constructor Create(const o: D3D11_SAMPLER_DESC); overload;

      constructor Create(isDefault: Boolean); overload;

      constructor Create(aFilter: D3D11_FILTER;
                         aAddressU: D3D11_TEXTURE_ADDRESS_MODE;
                         aAddressV: D3D11_TEXTURE_ADDRESS_MODE;
                         aAddressW: D3D11_TEXTURE_ADDRESS_MODE;
                         aMipLODBias: FLOAT;
                         aMaxAnisotropy: UINT;
                         aComparisonFunc: D3D11_COMPARISON_FUNC;
                         const aBorderColor: array of FLOAT; // RGBA
                         aMinLOD: FLOAT;
                         aMaxLOD: FLOAT); overload;
  end;
  {$EXTERNALSYM D3D11_SAMPLER_DESC}
  PD3D11_SAMPLER_DESC = ^D3D11_SAMPLER_DESC;


  // Interface ID3D11SamplerState
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11SamplerState);'}
  {$EXTERNALSYM ID3D11SamplerState}
  PID3D11SamplerState = ^ID3D11SamplerState;
  ID3D11SamplerState = interface(ID3D11DeviceChild)
  ['{DA6FEA51-564C-4487-9810-F0D0F9B4E3A5}']
    procedure GetDesc(out pDesc: D3D11_SAMPLER_DESC); stdcall;
  end;
  IID_ID3D11SamplerState = ID3D11SamplerState;
  {$EXTERNALSYM IID_ID3D11SamplerState}


  D3D11_FORMAT_SUPPORT =(
    D3D11_FORMAT_SUPPORT_BUFFER = $1,
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = $2,
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = $4,
    D3D11_FORMAT_SUPPORT_SO_BUFFER = $8,
    D3D11_FORMAT_SUPPORT_TEXTURE1D = $10,
    D3D11_FORMAT_SUPPORT_TEXTURE2D = $20,
    D3D11_FORMAT_SUPPORT_TEXTURE3D = $40,
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = $80,
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = $100,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = $200,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = $400,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = $800,
    D3D11_FORMAT_SUPPORT_MIP = $1000,
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = $2000,
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = $4000,
    D3D11_FORMAT_SUPPORT_BLENDABLE = $8000,
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = $10000,
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = $20000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = $40000,
    D3D11_FORMAT_SUPPORT_DISPLAY = $80000,
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = $100000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = $200000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = $400000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = $800000,
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = $1000000,
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = $2000000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = $4000000);
  {$EXTERNALSYM D3D11_FORMAT_SUPPORT}
  PD3D11_FORMAT_SUPPORT = ^D3D11_FORMAT_SUPPORT;

  D3D11_FORMAT_SUPPORT2 = (
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = $1,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = $2,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = $4,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = $8,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = $10,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = $20,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = $40,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = $80);
  {$EXTERNALSYM D3D11_FORMAT_SUPPORT2}
  PD3D11_FORMAT_SUPPORT2 = ^D3D11_FORMAT_SUPPORT2;


  // Interface ID3D11Asynchronous
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Asynchronous);'}
  {$EXTERNALSYM ID3D11Asynchronous}
  ID3D11Asynchronous = interface(ID3D11DeviceChild)
  ['{4B35D0CD-1E15-4258-9C98-1B1333F6DD3B}']
    function GetDataSize(): UINT; stdcall;
  end;
  IID_ID3D11Asynchronous = ID3D11Asynchronous;
  {$EXTERNALSYM IID_ID3D11Asynchronous}


  D3D11_ASYNC_GETDATA_FLAG = (
    D3D11_ASYNC_GETDATA_DONOTFLUSH = $1);
  {$EXTERNALSYM D3D11_ASYNC_GETDATA_FLAG}

  D3D11_QUERY = (
    D3D11_QUERY_EVENT = 0,
    D3D11_QUERY_OCCLUSION = (D3D11_QUERY_EVENT + 1),
    D3D11_QUERY_TIMESTAMP = (D3D11_QUERY_OCCLUSION + 1),
    D3D11_QUERY_TIMESTAMP_DISJOINT = (D3D11_QUERY_TIMESTAMP + 1),
    D3D11_QUERY_PIPELINE_STATISTICS = (D3D11_QUERY_TIMESTAMP_DISJOINT + 1),
    D3D11_QUERY_OCCLUSION_PREDICATE = (D3D11_QUERY_PIPELINE_STATISTICS + 1),
    D3D11_QUERY_SO_STATISTICS = (D3D11_QUERY_OCCLUSION_PREDICATE + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = (D3D11_QUERY_SO_STATISTICS + 1),
    D3D11_QUERY_SO_STATISTICS_STREAM0 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = (D3D11_QUERY_SO_STATISTICS_STREAM0 + 1),
    D3D11_QUERY_SO_STATISTICS_STREAM1 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = (D3D11_QUERY_SO_STATISTICS_STREAM1 + 1),
    D3D11_QUERY_SO_STATISTICS_STREAM2 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = (D3D11_QUERY_SO_STATISTICS_STREAM2 + 1),
    D3D11_QUERY_SO_STATISTICS_STREAM3 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1),
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = (D3D11_QUERY_SO_STATISTICS_STREAM3 + 1));
  {$EXTERNALSYM D3D11_QUERY}
  PD3D11_QUERY = ^D3D11_QUERY;

  D3D11_QUERY_MISC_FLAG = (
    D3D11_QUERY_MISC_PREDICATEHINT = $1);
  {$EXTERNALSYM D3D11_QUERY_MISC_FLAG}

  D3D11_QUERY_DESC = record
    Query: D3D11_QUERY;
    MiscFlags: UINT;
    public
      constructor create(const o: D3D11_QUERY_DESC); overload;
      constructor create(aQuery: D3D11_QUERY; aMiscFlags: UINT = 0); overload;
  end;
  {$EXTERNALSYM D3D11_QUERY_DESC}
  PD3D11_QUERY_DESC = ^D3D11_QUERY_DESC;


  // Interface ID3D11Query
  // =====================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Query);'}
  {$EXTERNALSYM ID3D11Query}
  ID3D11Query = interface(ID3D11Asynchronous)
  ['{D6C00747-87B7-425E-B84D-44D108560AFD}']
     procedure GetDesc(out pDesc: D3D11_QUERY_DESC); stdcall;
  end;
  IID_ID3D11Query = ID3D11Query;
  {$EXTERNALSYM IID_ID3D11Query}


  // interface ID3D11Predicate
  // =========================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Predicate);'}
  {$EXTERNALSYM ID3D11Predicate}
  ID3D11Predicate = interface(ID3D11Query)
  ['{9EB576DD-9F77-4D86-81AA-8BAB5FE490E2}']
  end;
  IID_ID3D11Predicate = ID3D11Predicate;
  {$EXTERNALSYM IID_ID3D11Predicate}


  D3D11_QUERY_DATA_TIMESTAMP_DISJOINT = record
    Frequency: UINT64;
    Disjoint: BOOL;
  end;
  {$EXTERNALSYM D3D11_QUERY_DATA_TIMESTAMP_DISJOINT}
  PD3D11_QUERY_DATA_TIMESTAMP_DISJOINT = ^D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;

  D3D11_QUERY_DATA_PIPELINE_STATISTICS = record
    IAVertices: UINT64;
    IAPrimitives: UINT64;
    VSInvocations: UINT64;
    GSInvocations: UINT64;
    GSPrimitives: UINT64;
    CInvocations: UINT64;
    CPrimitives: UINT64;
    PSInvocations: UINT64;
    HSInvocations: UINT64;
    DSInvocations: UINT64;
    CSInvocations: UINT64;
  end;
  {$EXTERNALSYM D3D11_QUERY_DATA_PIPELINE_STATISTICS}
  PD3D11_QUERY_DATA_PIPELINE_STATISTICS = ^D3D11_QUERY_DATA_PIPELINE_STATISTICS;

  D3D11_QUERY_DATA_SO_STATISTICS = record
    NumPrimitivesWritten: UINT64;
    PrimitivesStorageNeeded: UINT64;
  end;
  {$EXTERNALSYM D3D11_QUERY_DATA_SO_STATISTICS}
  PD3D11_QUERY_DATA_SO_STATISTICS = ^D3D11_QUERY_DATA_SO_STATISTICS;

  D3D11_COUNTER = (
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = $40000000);
  {$EXTERNALSYM D3D11_COUNTER}

  D3D11_COUNTER_TYPE = (
    D3D11_COUNTER_TYPE_FLOAT32 = 0,
    D3D11_COUNTER_TYPE_UINT16 = (D3D11_COUNTER_TYPE_FLOAT32 + 1),
    D3D11_COUNTER_TYPE_UINT32 = (D3D11_COUNTER_TYPE_UINT16 + 1),
    D3D11_COUNTER_TYPE_UINT64 = (D3D11_COUNTER_TYPE_UINT32 + 1));
  {$EXTERNALSYM D3D11_COUNTER_TYPE}

  D3D11_COUNTER_DESC = record
    Counter: D3D11_COUNTER;
    MiscFlags: UINT;
    public
      constructor Create(const o: D3D11_COUNTER_DESC); overload;
      constructor Create(aCounter: D3D11_COUNTER;
                         aMiscFlags: UINT = 0); overload;
  end;
  {$EXTERNALSYM D3D11_COUNTER_DESC}
  PD3D11_COUNTER_DESC = ^D3D11_COUNTER_DESC;

  D3D11_COUNTER_INFO = record
    LastDeviceDependentCounter: D3D11_COUNTER;
    NumSimultaneousCounters: UINT;
    NumDetectableParallelUnits: UINT8;
  end;
  {$EXTERNALSYM D3D11_COUNTER_INFO}
  PD3D11_COUNTER_INFO = ^D3D11_COUNTER_INFO;


  // interface ID3D11Counter
  // =======================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Counter);'}
  {$EXTERNALSYM ID3D11Counter}
  ID3D11Counter = interface(ID3D11Asynchronous)
  ['{6E8C49FB-A371-4770-B440-29086022B741}']
    procedure GetDesc(out pDesc: D3D11_COUNTER_DESC); stdcall;
  end;
  IID_ID3D11Counter = ID3D11Counter;
  {$EXTERNALSYM IID_ID3D11Counter}


  D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = Longword;
  {$EXTERNALSYM D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS}

  D3D11_DEVICE_CONTEXT_TYPE = (
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
    D3D11_DEVICE_CONTEXT_DEFERRED = (D3D11_DEVICE_CONTEXT_IMMEDIATE + 1));
  {$EXTERNALSYM D3D11_DEVICE_CONTEXT_TYPE}

  D3D11_CLASS_INSTANCE_DESC = record
    InstanceId: UINT;
    InstanceIndex: UINT;
    TypeId: UINT;
    ConstantBuffer: UINT;
    BaseConstantBufferOffset: UINT;
    BaseTexture: UINT;
    BaseSampler: UINT;
    Created: BOOL;
  end;
  {$EXTERNALSYM D3D11_CLASS_INSTANCE_DESC}
  PD3D11_CLASS_INSTANCE_DESC = ^D3D11_CLASS_INSTANCE_DESC;


  // interface ID3D11ClassInstance
  // =============================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ClassInstance);'}
  {$EXTERNALSYM ID3D11ClassInstance}
  PID3D11ClassInstance = ^ID3D11ClassInstance;
  ID3D11ClassInstance = interface(ID3D11DeviceChild)
  ['{A6CD7FAA-B0B7-4A2F-9436-8662A65797CB}']
    procedure GetClassLinkage(out ppLinkage: ID3D11ClassLinkage); stdcall;

    procedure GetDesc(out pDesc: D3D11_CLASS_INSTANCE_DESC); stdcall;

    procedure GetInstanceName(out pInstanceName: LPSTR;
                              var pBufferLength: SIZE_T); stdcall;

    procedure GetTypeName(out pTypeName: LPSTR;
                          var pBufferLength: SIZE_T); stdcall;
  end;
  IID_ID3D11ClassInstance = ID3D11ClassInstance;
  {$EXTERNALSYM IID_ID3D11ClassInstance}


  // Interface ID3D11ClassLinkage
  // ============================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ClassLinkage);'}
  {$EXTERNALSYM ID3D11ClassLinkage}
  ID3D11ClassLinkage = interface(ID3D11DeviceChild)
  ['{DDF57CBA-9543-46E4-A12B-F207A0FE7FED}']
    function GetClassInstance(const pClassInstanceName: LPCSTR;
                              const InstanceIndex: UINT;
                              out ppInstance: ID3D11ClassInstance): HRESULT; stdcall;

    function CreateClassInstance(const pClassTypeName: LPCSTR;
                                 const ConstantBufferOffset: UINT;
                                 const ConstantVectorOffset: UINT;
                                 const TextureOffset: UINT;
                                 const SamplerOffset: UINT;
                                 out ppInstance: ID3D11ClassInstance): HRESULT; stdcall;
  end;
  IID_ID3D11ClassLinkage = ID3D11ClassLinkage;
  {$EXTERNALSYM IID_ID3D11ClassLinkage}


  // Interface ID3D11CommandList
  // ===========================
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11CommandList);'}
  {$EXTERNALSYM ID3D11CommandList}
  ID3D11CommandList = interface(ID3D11DeviceChild)
  ['{A24BC4D1-769E-43F7-8013-98FF566C18E2}']
    function GetContextFlags(): UINT; stdcall;
  end;
  IID_ID3D11CommandList = ID3D11CommandList;
  {$EXTERNALSYM IID_ID3D11CommandList}

  D3D11_FEATURE = (
    D3D11_FEATURE_THREADING = 0,
    D3D11_FEATURE_DOUBLES = (D3D11_FEATURE_THREADING + 1),
    D3D11_FEATURE_FORMAT_SUPPORT = (D3D11_FEATURE_DOUBLES + 1),
    D3D11_FEATURE_FORMAT_SUPPORT2 = (D3D11_FEATURE_FORMAT_SUPPORT + 1),
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = (D3D11_FEATURE_FORMAT_SUPPORT2 + 1));
  {$EXTERNALSYM D3D11_FEATURE}

  D3D11_FEATURE_DATA_THREADING = record
    DriverConcurrentCreates: Bool;
    DriverCommandLists: Bool;
  end;
  {$EXTERNALSYM D3D11_FEATURE_DATA_THREADING}
  PD3D11_FEATURE_DATA_THREADING = ^D3D11_FEATURE_DATA_THREADING;

  D3D11_FEATURE_DATA_DOUBLES = record
    DoublePrecisionFloatShaderOps: BOOL;
  end;
  {$EXTERNALSYM D3D11_FEATURE_DATA_DOUBLES}
  PD3D11_FEATURE_DATA_DOUBLES = ^D3D11_FEATURE_DATA_DOUBLES;

  D3D11_FEATURE_DATA_FORMAT_SUPPORT = record
    InFormat: DXGI_FORMAT;
    OutFormatSupport: UINT;
  end;
  {$EXTERNALSYM D3D11_FEATURE_DATA_FORMAT_SUPPORT}
  PD3D11_FEATURE_DATA_FORMAT_SUPPORT = ^D3D11_FEATURE_DATA_FORMAT_SUPPORT;

  D3D11_FEATURE_DATA_FORMAT_SUPPORT2 = record
    InFormat: DXGI_FORMAT;
    OutFormatSupport2: UINT;
  end;
  {$EXTERNALSYM D3D11_FEATURE_DATA_FORMAT_SUPPORT2}
  PD3D11_FEATURE_DATA_FORMAT_SUPPORT2 = ^D3D11_FEATURE_DATA_FORMAT_SUPPORT2;

  D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = record
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL;
  end;
  {$EXTERNALSYM D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS}
  PD3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = ^D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;


  // Interface ID3D11DeviceContext
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11DeviceContext);'}
  {$EXTERNALSYM ID3D11DeviceContext}
  ID3D11DeviceContext = interface(ID3D11DeviceChild)
  ['{C0BFA96C-E089-44FB-8EAF-26F8796190DA}']
    procedure VSSetConstantBuffers(const StartSlot: UINT;
                                   const NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure PSSetShaderResources(const StartSlot: UINT;
                                   const NumViews: UINT;
                                   [ref] const ppShaderResourceViews: ID3D11ShaderResourceView); stdcall;

    procedure PSSetShader(pPixelShader: ID3D11PixelShader;
                          [ref] const ppClassInstances: PID3D11ClassInstance {A pointer to an array of class-instance interfaces (see ID3D11ClassInstance).
                                                                              Each interface used by a shader must have a corresponding class instance or the
                                                                              shader will get disabled.
                                                                              Set ppClassInstances to nil if the shader does not use any interfaces.};
                          NumClassInstances: UINT); stdcall;

    procedure PSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: PID3D11SamplerState); stdcall;

    procedure VSSetShader(pVertexShader: ID3D11VertexShader;
                          [ref] const ppClassInstances: PID3D11ClassInstance;
                          NumClassInstances: UINT); stdcall;

    procedure DrawIndexed(IndexCount: UINT;
                          StartIndexLocation: UINT;
                          BaseVertexLocation: Integer); stdcall;

    procedure Draw(VertexCount: UINT;
                   StartVertexLocation: UINT); stdcall;

    function Map(pResource: ID3D11Resource;
                 Subresource: UINT;
                 MapType: D3D11_MAP;
                 MapFlags: UINT;
                 out pMappedResource: D3D11_MAPPED_SUBRESOURCE): HRESULT ; stdcall;

    procedure Unmap(pResource: ID3D11Resource;
                    Subresource: UINT); stdcall;

    procedure PSSetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer {Array of constant buffers being given to the device.}); stdcall;

    procedure IASetInputLayout(pInputLayout: ID3D11InputLayout); stdcall;

    procedure IASetVertexBuffers(StartSlot: UINT;
                                 NumBuffers: UINT;
                                 [ref] const ppVertexBuffers: PID3D11Buffer;
                                 const pStrides: PUINT;
                                 const pOffsets: PUINT); stdcall;

    procedure IASetIndexBuffer(pIndexBuffer: ID3D11Buffer;
                               Format_: DXGI_FORMAT;
                               Offset: UINT); stdcall;

    procedure DrawIndexedInstanced(IndexCountPerInstance: UINT;
                                   InstanceCount: UINT;
                                   StartIndexLocation: UINT;
                                   BaseVertexLocation: Integer;
                                   StartInstanceLocation: UINT); stdcall;

    procedure DrawInstanced(VertexCountPerInstance: UINT;
                            InstanceCount: UINT;
                            StartVertexLocation: UINT;
                            StartInstanceLocation: UINT); stdcall;

    procedure GSSetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure GSSetShader(pShader: ID3D11GeometryShader;
                          [ref] const ppClassInstances: PID3D11ClassInstance {A pointer to an array of class-instance interfaces (see ID3D11ClassInstance).
                                                                              Each interface used by a shader must have a corresponding class instance or the
                                                                              shader will get disabled.
                                                                              Set ppClassInstances to nil if the shader does not use any interfaces.};
                          NumClassInstances: UINT); stdcall;

    procedure IASetPrimitiveTopology(Topology: D3D11_PRIMITIVE_TOPOLOGY); stdcall;

    procedure VSSetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   [ref] const ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to set to the device.}); stdcall;

    procedure VSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: ID3D11SamplerState); stdcall;

    procedure  Begin_(pAsync: ID3D11Asynchronous); stdcall;

    procedure End_(pAsync: ID3D11Asynchronous); stdcall;

    function GetData(pAsync: ID3D11Asynchronous;
                     pData: Pointer;
                     DataSize: UINT;
                     GetDataFlags: UINT): HRESULT; stdcall;

    procedure SetPredication(pPredicate: ID3D11Predicate;
                             PredicateValue: BOOL); stdcall;

    procedure GSSetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   [ref] const ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to set to the device.}); stdcall;

    procedure GSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: ID3D11SamplerState); stdcall;

    procedure OMSetRenderTargets(NumViews: UINT;
                                 [ref] const ppRenderTargetViews: ID3D11RenderTargetView;
                                 pDepthStencilView: ID3D11DepthStencilView); stdcall;

    procedure OMSetRenderTargetsAndUnorderedAccessViews(NumRTVs: UINT;
                                                        [ref] const ppRenderTargetViews: ID3D11RenderTargetView {Pointer to an array of ID3D11RenderTargetViews that represent the render targets to bind to the device.
                                                                                                                 If this parameter is nil and NumRTVs is 0, no render targets are bound.};
                                                        pDepthStencilView: ID3D11DepthStencilView;
                                                        UAVStartSlot: UINT;
                                                        NumUAVs: UINT;
                                                        [ref] const ppUnorderedAccessViews: PID3D11UnorderedAccessView {Pointer to an array of ID3D11UnorderedAccessViews that represent the unordered-access views to bind to the device.
                                                                                                                        If this parameter is nil and NumUAVs is 0, no unordered-access views are bound.};
                                                        const pUAVInitialCounts: PUINT); stdcall;

    procedure OMSetBlendState(pBlendState: ID3D11BlendState;
                              const BlendFactor: Fixed3FLOATArray;
                              SampleMask: UINT); stdcall;

    procedure OMSetDepthStencilState(pDepthStencilState: ID3D11DepthStencilState;
                                     StencilRef: UINT); stdcall;

    procedure SOSetTargets(NumBuffers: UINT;
                           [ref] const ppSOTargets: PID3D11Buffer {The array of output buffers (see ID3D11Buffer) to bind to the device.};
                           const pOffsets: PUINT); stdcall;

    procedure DrawAuto; stdcall;

    procedure  DrawIndexedInstancedIndirect(pBufferForArgs: ID3D11Buffer;
                                            AlignedByteOffsetForArgs: UINT); stdcall;

    procedure DrawInstancedIndirect(pBufferForArgs: ID3D11Buffer;
                                    AlignedByteOffsetForArgs: UINT); stdcall;

    procedure Dispatch(ThreadGroupCountX: UINT;
                       ThreadGroupCountY: UINT;
                       ThreadGroupCountZ: UINT); stdcall;

    procedure DispatchIndirect(pBufferForArgs: ID3D11Buffer;
                               AlignedByteOffsetForArgs: UINT); stdcall;

    procedure RSSetState(pRasterizerState: ID3D11RasterizerState); stdcall;

    procedure RSSetViewports(NumViewports: UINT;
                             const pViewports: PD3D11_VIEWPORT); stdcall;

    procedure RSSetScissorRects(NumRects: UINT;
                                const pRects: PD3D11_RECT); stdcall;

    procedure CopySubresourceRegion(const pDstResource: ID3D11Resource;
                                    DstSubresource: UINT;
                                    DstX: UINT;
                                    DstY: UINT;
                                    DstZ: UINT;
                                    const pSrcResource: ID3D11Resource;
                                    SrcSubresource: UINT;
                                    const pSrcBox: D3D11_BOX); stdcall;

    procedure CopyResource(pDstResource: ID3D11Resource;
                           pSrcResource: ID3D11Resource); stdcall;

    procedure  UpdateSubresource(pDstResource: ID3D11Resource;
                                 DstSubresource: UINT;
                                 const pDstBox: D3D11_BOX;
                                 const pSrcData: Pointer;
                                 SrcRowPitch: UINT;
                                 SrcDepthPitch: UINT); stdcall;

    procedure CopyStructureCount(pDstBuffer: ID3D11Buffer;
                                 DstAlignedByteOffset: UINT;
                                 pSrcView: ID3D11UnorderedAccessView); stdcall;

    procedure ClearRenderTargetView(pRenderTargetView: ID3D11RenderTargetView;
                                    const ColorRGBA: Fixed3FLOATArray); stdcall;

    procedure ClearUnorderedAccessViewUint(pUnorderedAccessView: ID3D11UnorderedAccessView;
                                           const Values: Fixed3UINTArray); stdcall;

    procedure ClearUnorderedAccessViewFloat(pUnorderedAccessView: ID3D11UnorderedAccessView;
                                            const Values: Fixed3FLOATArray); stdcall;

    procedure ClearDepthStencilView(DepthStencilView: ID3D11DepthStencilView;
                                    ClearFlags: UINT;
                                    Depth: FLOAT;
                                    Stencil: UINT8); stdcall;

    procedure GenerateMips(pShaderResourceView: ID3D11ShaderResourceView); stdcall;

    procedure SetResourceMinLOD(pResource: ID3D11Resource;
                                MinLOD: FLOAT); stdcall;

    function GetResourceMinLOD(pResource: ID3D11Resource): FLOAT; stdcall;

    procedure ResolveSubresource(pDstResource: ID3D11Resource;
                                 DstSubresource: UINT;
                                 pSrcResource: ID3D11Resource;
                                 SrcSubresource: UINT;
                                 Format_: DXGI_FORMAT); stdcall;

    procedure ExecuteCommandList(pCommandList: ID3D11CommandList;
                                 RestoreContextState: Bool); stdcall;

    procedure HSSetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   [ref] const ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to set to the device.}); stdcall;

    procedure HSSetShader(pHullShader : ID3D11HullShader;
                          [ref] const ppClassInstances: ID3D11ClassInstance;
                          NumClassInstances: UINT); stdcall;

    procedure HSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: ID3D11SamplerState); stdcall;

    procedure HSSetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer {Array of constant buffers being given to the device.}); stdcall;

    procedure DSSetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   [ref] const ppShaderResourceViews: PID3D11ShaderResourceView); stdcall;

    procedure DSSetShader(pDomainShader: ID3D11DomainShader;
                          [ref] const ppClassInstances: PID3D11ClassInstance;
                          NumClassInstances: UINT); stdcall;

    procedure DSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: ID3D11SamplerState); stdcall;

    procedure DSSetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure CSSetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   [ref] const ppShaderResourceViews: PID3D11ShaderResourceView); stdcall;

    procedure CSSetUnorderedAccessViews(StartSlot: UINT;
                                        NumUAVs: UINT;
                                        [ref] const ppUnorderedAccessViews: PID3D11UnorderedAccessView;
                                        const pUAVInitialCounts: PUINT); stdcall;

    procedure CSSetShader(pComputeShader: ID3D11ComputeShader;
                          [ref] const ppClassInstances: PID3D11ClassInstance;
                          NumClassInstances: UINT); stdcall;

    procedure CSSetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            [ref] const ppSamplers: ID3D11SamplerState);

    procedure CSSetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   [ref] const ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure VSGetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   out ppConstantBuffers: ID3D11Buffer); stdcall;

    procedure PSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to be returned by the device.}); stdcall;

    procedure PSGetShader(out ppPixelShader: ID3D11PixelShader;
                          out ppClassInstances: PID3D11ClassInstance {Pointer to an array of class instance interfaces};
                          var pNumClassInstances: UINT); stdcall;

    procedure PSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            out ppSamplers: PID3D11SamplerState); stdcall;

    procedure VSGetShader(out ppVertexShader: ID3D11VertexShader;
                          out ppClassInstances: PID3D11ClassInstance;
                          var pNumClassInstances: UINT); stdcall;

    procedure PSGetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   out ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure IAGetInputLayout(out ppInputLayout: ID3D11InputLayout); stdcall;

    procedure IAGetVertexBuffers(StartSlot: UINT;
                                 NumBuffers: UINT;
                                 out ppVertexBuffers: PID3D11Buffer;
                                 out pStrides: UINT;
                                 out pOffsets: UINT); stdcall;

    procedure IAGetIndexBuffer(out pIndexBuffer: ID3D11Buffer;
                               out Format: DXGI_FORMAT;
                               out Offset: UINT); stdcall;

    procedure GSGetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   out ppConstantBuffers: PID3D11Buffer); stdcall;

    procedure GSGetShader(out ppGeometryShader: ID3D11GeometryShader;
                          out ppClassInstances: PID3D11ClassInstance {Pointer to an array of class instance interfaces};
                          var pNumClassInstances: UINT); stdcall;

    procedure IAGetPrimitiveTopology(out pTopology: D3D11_PRIMITIVE_TOPOLOGY); stdcall;

    procedure VSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: PID3D11ShaderResourceView); stdcall;

    procedure VSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            out ppSamplers: ID3D11SamplerState); stdcall;

    procedure GetPredication(out ppPredicate: ID3D11Predicate;
                             out pPredicateValue: BOOL); stdcall;

    procedure GSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: PID3D11ShaderResourceView); stdcall;

    procedure GSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            out ppSamplers: PID3D11SamplerState {Pointer to an array of sampler-state interfaces}); stdcall;

    procedure OMGetRenderTargets(NumViews: UINT;
                                 out ppRenderTargetViews: ID3D11RenderTargetView;
                                 {Pointer to an array of ID3D11RenderTargetViews, which represent render-target views.
                                  Specify nil for this parameter when retrieval of render-target views is not required.}
                                 out ppDepthStencilView: ID3D11DepthStencilView); stdcall;

    procedure OMGetRenderTargetsAndUnorderedAccessViews(NumRTVs: UINT;
                                                        out ppRenderTargetViews: PID3D11RenderTargetView;
                                                        {Pointer to an array of ID3D11RenderTargetViews, which represent render-target views.
                                                         Specify nil for this parameter when retrieval of render-target views is not required.}
                                                        out ppDepthStencilView: ID3D11DepthStencilView;
                                                        UAVStartSlot: UINT;
                                                        NumUAVs: UINT;
                                                        out ppUnorderedAccessViews: ID3D11UnorderedAccessView); stdcall;
                                                        {Pointer to an array of ID3D11UnorderedAccessViews, which represent unordered-access views that are retrieved.
                                                         Specify nil for this parameter when retrieval of unordered-access views is not required.}

    procedure OMGetBlendState(out ppBlendState: ID3D11BlendState;
                              out BlendFactor: Fixed3FLOATArray;
                              out pSampleMask: UINT); stdcall;

    procedure OMGetDepthStencilState(out ppDepthStencilState: ID3D11DepthStencilState;
                                     out pStencilRef: UINT); stdcall;

    procedure SOGetTargets(NumBuffers: UINT;
                           out ppSOTargets: PID3D11Buffer {An array of output buffers to be retrieved from the device.}); stdcall;

    procedure RSGetState(out ppRasterizerState: ID3D11RasterizerState); stdcall;

    procedure RSGetViewports(var pNumViewports: UINT;
                             pViewports: PD3D11_VIEWPORT {An array of D3D11_VIEWPORT structures for the viewports that are bound to the rasterizer stage}); stdcall;

    procedure  RSGetScissorRects(var pNumRects: UINT;
                                 out pRects: PD3D11_RECT {An array of scissor rectangles}); stdcall;

    procedure HSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to be returned by the device}); stdcall;

    procedure HSGetShader(out ppHullShader: ID3D11HullShader;
                          out ppClassInstances: ID3D11ClassInstance;
                          var pNumClassInstances: UINT); stdcall;

    procedure HSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            out ppSamplers: ID3D11SamplerState); stdcall;

    procedure HSGetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   out ppConstantBuffers: PID3D11Buffer {Array of constant buffer interface pointers}); stdcall;

    procedure DSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: ID3D11ShaderResourceView); stdcall;

    procedure DSGetShader(out ppDomainShader: ID3D11DomainShader;
                          out ppClassInstances: ID3D11ClassInstance;
                          {in, out, optional} var pNumClassInstances: UINT); stdcall;

    procedure DSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            {out, optional} out ppSamplers: PID3D11SamplerState {Pointer to an array of sampler-state interfaces}); stdcall;

    procedure  DSGetConstantBuffers(StartSlot: UINT;
                                    NumBuffers: UINT;
                                    out ppConstantBuffers: PID3D11Buffer {Array of constant buffer interface pointers}); stdcall;

    procedure CSGetShaderResources(StartSlot: UINT;
                                   NumViews: UINT;
                                   out ppShaderResourceViews: PID3D11ShaderResourceView {Array of shader resource view interfaces to set to the device.}); stdcall;

    procedure CSGetUnorderedAccessViews(StartSlot: UINT;
                                        NumUAVs: UINT;
                                        out ppUnorderedAccessViews: PID3D11UnorderedAccessView {A pointer to an array of interface pointers}); stdcall;

    procedure CSGetShader(out ppComputeShader: ID3D11ComputeShader;
                          out ppClassInstances: ID3D11ClassInstance;
                          var pNumClassInstances: UINT); stdcall;

    procedure CSGetSamplers(StartSlot: UINT;
                            NumSamplers: UINT;
                            out ppSamplers: ID3D11SamplerState); stdcall;

    procedure CSGetConstantBuffers(StartSlot: UINT;
                                   NumBuffers: UINT;
                                   out ppConstantBuffers: PID3D11Buffer {Array of constant buffer interface pointers}); stdcall;

    procedure ClearState(); stdcall;

    procedure Flush(); stdcall;

    function GetType(): D3D11_DEVICE_CONTEXT_TYPE; stdcall;

    function GetContextFlags(): UINT; stdcall;

    function FinishCommandList(RestoreDeferredContextState: Bool;
                               out ppCommandList: ID3D11CommandList): HRESULT; stdcall;
  end;
  IID_ID3D11DeviceContext = ID3D11DeviceContext;
  {$EXTERNALSYM IID_ID3D11DeviceContext}


  // Interface ID3D11Device
  // ======================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11Device);'}
  {$EXTERNALSYM ID3D11Device}
  ID3D11Device = interface(IUnknown)
  ['{DB6F6DDB-AC77-4E88-8253-819DF9BBF140}']
    function CreateBuffer([ref] const pDesc: D3D11_BUFFER_DESC;
                          const pInitialData: PD3D11_SUBRESOURCE_DATA;
                          out ppBuffer: ID3D11Buffer): HRESULT; stdcall;

    function CreateTexture1D(const pDesc: PD3D11_TEXTURE1D_DESC;
                             const pInitialData: PD3D11_SUBRESOURCE_DATA;
                             out ppTexture1D: ID3D11Texture1D): HRESULT; stdcall;

    function CreateTexture2D(const pDesc: D3D11_TEXTURE2D_DESC;
                             const pInitialData: PD3D11_SUBRESOURCE_DATA;
                             out ppTexture2D: ID3D11Texture2D): HRESULT; stdcall;

    function CreateTexture3D(const pDesc: PD3D11_TEXTURE3D_DESC;
                             const pInitialData: PD3D11_SUBRESOURCE_DATA;
                             out ppTexture3D: ID3D11Texture3D): HRESULT; stdcall;

    function CreateShaderResourceView(pResource: ID3D11Resource;
                                      const pDesc: PD3D11_SHADER_RESOURCE_VIEW_DESC;
                                      out ppSRView: ID3D11ShaderResourceView): HRESULT; stdcall;

    function CreateUnorderedAccessView(pResource: ID3D11Resource;
                                       const pDesc: PD3D11_UNORDERED_ACCESS_VIEW_DESC;
                                       out ppUAView: ID3D11UnorderedAccessView): HRESULT; stdcall;

    function CreateRenderTargetView(pResource: ID3D11Resource;
                                    const pDesc: PD3D11_RENDER_TARGET_VIEW_DESC;
                                    out ppRTView: ID3D11RenderTargetView): HRESULT; stdcall;

    function CreateDepthStencilView(pResource: ID3D11Resource;
                                    const pDesc: PD3D11_DEPTH_STENCIL_VIEW_DESC;
                                    out ppDepthStencilView: ID3D11DepthStencilView): HRESULT; stdcall;

    function CreateInputLayout(const pInputElementDescs: PD3D11_INPUT_ELEMENT_DESC;
                               NumElements: UINT;
                               const pShaderBytecodeWithInputSignature: Pointer;
                               BytecodeLength: SIZE_T;
                               out ppInputLayout: ID3D11InputLayout): HRESULT; stdcall;

    function CreateVertexShader(const pShaderBytecode: Pointer;
                                BytecodeLength: SIZE_T;
                                pClassLinkage: ID3D11ClassLinkage;
                                ppVertexShader: PID3D11VertexShader): HRESULT; stdcall;

    function CreateGeometryShader(const pShaderBytecode: Pointer;
                                  BytecodeLength: SIZE_T;
                                  pClassLinkage: ID3D11ClassLinkage;
                                  out ppGeometryShader: ID3D11GeometryShader): HRESULT; stdcall;

    function CreateGeometryShaderWithStreamOutput(const pShaderBytecode: Pointer;
                                                  BytecodeLength: SIZE_T;
                                                  const pSODeclaration: PD3D11_SO_DECLARATION_ENTRY;
                                                  NumEntries: UINT;
                                                  const pBufferStrides: PUINT;
                                                  NumStrides: UINT;
                                                  RasterizedStream: UINT;
                                                  pClassLinkage: ID3D11ClassLinkage ;
                                                  out ppGeometryShader: ID3D11GeometryShader): HRESULT; stdcall;

    function CreatePixelShader(const pShaderBytecode: Pointer;
                               BytecodeLength: SIZE_T;
                               pClassLinkage: ID3D11ClassLinkage;
                               out ppPixelShader: ID3D11PixelShader): HRESULT; stdcall;

    function CreateHullShader(const pShaderBytecode: Pointer;
                              BytecodeLength: SIZE_T;
                              pClassLinkage: ID3D11ClassLinkage;
                              out ppHullShader: ID3D11HullShader): HRESULT; stdcall;

    function CreateDomainShader(const pShaderBytecode: Pointer;
                                BytecodeLength: SIZE_T;
                                pClassLinkage: ID3D11ClassLinkage;
                                out ppDomainShader: ID3D11DomainShader): HRESULT; stdcall;

    function CreateComputeShader(const pShaderBytecode: Pointer;
                                 BytecodeLength: SIZE_T;
                                 pClassLinkage: ID3D11ClassLinkage;
                                 out ppComputeShader: ID3D11ComputeShader): HRESULT; stdcall;

    function CreateClassLinkage(out ppLinkage: ID3D11ClassLinkage): HRESULT; stdcall;

    function CreateBlendState(const pBlendStateDesc: D3D11_BLEND_DESC;
                              out ppBlendState: ID3D11BlendState): HRESULT; stdcall;

    function CreateDepthStencilState(const pDepthStencilDesc: D3D11_DEPTH_STENCIL_DESC;
                                     out ppDepthStencilState: ID3D11DepthStencilState): HRESULT; stdcall;

    function CreateRasterizerState(const pRasterizerDesc: D3D11_RASTERIZER_DESC;
                                   out ppRasterizerState: ID3D11RasterizerState): HRESULT; stdcall;

    function CreateSamplerState(const pSamplerDesc: D3D11_SAMPLER_DESC;
                                out ppSamplerState: ID3D11SamplerState): HRESULT; stdcall;

    function CreateQuery(const pQueryDesc: PD3D11_QUERY_DESC;
                         out ppQuery: ID3D11Query): HRESULT; stdcall;

    function CreatePredicate(const pPredicateDesc: PD3D11_QUERY_DESC;
                             out ppPredicate: ID3D11Predicate): HRESULT; stdcall;

    function CreateCounter(const pCounterDesc: PD3D11_COUNTER_DESC;
                           out ppCounter: ID3D11Counter): HRESULT; stdcall;

    function CreateDeferredContext(ContextFlags: UINT;
                                   out ppDeferredContext: ID3D11DeviceContext): HRESULT; stdcall;

    function OpenSharedResource(hResource: THandle;
                                ReturnedInterface: TGUID;
                                ppResource: PPointer): HRESULT; stdcall;

    function CheckFormatSupport(Format: DXGI_FORMAT;
                                out pFormatSupport: UINT): HRESULT; stdcall;

    function CheckMultisampleQualityLevels(Format: DXGI_FORMAT;
                                           SampleCount: UINT;
                                           out pNumQualityLevels: UINT): HRESULT; stdcall;

    procedure CheckCounterInfo(out pCounterInfo: D3D11_COUNTER_INFO); stdcall;

    function CheckCounter(const pDesc: PD3D11_COUNTER_DESC;
                          out pType: D3D11_COUNTER_TYPE;
                          out pActiveCounters: UINT;
                          szName: LPSTR;
                          var pNameLength: UINT;
                          szUnits: LPSTR;
                          var pUnitsLength: UINT;
                          szDescription: LPSTR;
                          var pDescriptionLength: UINT): HRESULT; stdcall;

    function CheckFeatureSupport(Feature: D3D11_FEATURE;
                                 pFeatureSupportData: Pointer;
                                 FeatureSupportDataSize: UINT): HRESULT; stdcall;

    function GetPrivateData(const guid: TGUID;
                            var pDataSize: UINT;
                            pData: Pointer): HRESULT; stdcall;

    function SetPrivateData(const guid: TGUID;
                            DataSize: UINT;
                            const pData: Pointer): HRESULT; stdcall;

    function SetPrivateDataInterface(const guid: TGUID;
                                     const pData: IUnknown): HRESULT; stdcall;

    function GetFeatureLevel(): D3D_FEATURE_LEVEL; stdcall;

    function GetCreationFlags(): UINT; stdcall;

    function GetDeviceRemovedReason(): HRESULT; stdcall;

    procedure GetImmediateContext(out ppImmediateContext: ID3D11DeviceContext); stdcall;

    function SetExceptionMode(RaiseFlags: UINT): HRESULT; stdcall;

    function GetExceptionMode(): UINT; stdcall;

  end;
  IID_ID3D11Device = ID3D11Device;
  {$EXTERNALSYM IID_ID3D11Device}




  //////////////////////////////////////////////////////////////////////////////
  //
  // VideoDecoder
  //
  //////////////////////////////////////////////////////////////////////////////

  PD3D11_VIDEO_DECODER_DESC = ^D3D11_VIDEO_DECODER_DESC;
  D3D11_VIDEO_DECODER_DESC = record
    Guid: TGUID;
    SampleWidth: UINT;
    SampleHeight: UINT;
    OutputFormat: DXGI_FORMAT;
  end;
  {$EXTERNALSYM D3D11_VIDEO_DECODER_DESC}


  PD3D11_VIDEO_DECODER_CONFIG = ^D3D11_VIDEO_DECODER_CONFIG;
  D3D11_VIDEO_DECODER_CONFIG = record
    guidConfigBitstreamEncryption: TGUID;
    guidConfigMBcontrolEncryption: TGUID;
    guidConfigResidDiffEncryption: TGUID;
    ConfigBitstreamRaw: UINT;
    ConfigMBcontrolRasterOrder: UINT;
    ConfigResidDiffHost: UINT;
    ConfigSpatialResid8: UINT;
    ConfigResid8Subtraction: UINT;
    ConfigSpatialHost8or9Clipping: UINT;
    ConfigSpatialResidInterleaved: UINT;
    ConfigIntraResidUnsigned: UINT;
    ConfigResidDiffAccelerator: UINT;
    ConfigHostInverseScan: UINT;
    ConfigSpecificIDCT: UINT;
    Config4GroupedCoefs: UINT;
    ConfigMinRenderTargetBuffCount: USHORT;
    ConfigDecoderSpecific: USHORT;
  end;
  {$EXTERNALSYM D3D11_VIDEO_DECODER_CONFIG}


  PD3D11_VIDEO_DECODER_BUFFER_TYPE = ^D3D11_VIDEO_DECODER_BUFFER_TYPE;
  D3D11_VIDEO_DECODER_BUFFER_TYPE                          = (
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS          = 0,
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL          = 1,
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE         = 2,
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL          = 3,
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL               = 5,
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM                   = 6,
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR               = 7,
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN                  = 8
  );
  {$EXTERNALSYM D3D11_VIDEO_DECODER_BUFFER_TYPE}


  PD3D11_AES_CTR_IV = ^D3D11_AES_CTR_IV;
  {$EXTERNALSYM _D3D11_AES_CTR_IV}
  _D3D11_AES_CTR_IV = record
    IV: UINT64;
    Count: UINT64;
  end;
  D3D11_AES_CTR_IV = _D3D11_AES_CTR_IV;
  {$EXTERNALSYM D3D11_AES_CTR_IV}


  PD3D11_ENCRYPTED_BLOCK_INFO = ^D3D11_ENCRYPTED_BLOCK_INFO;
  D3D11_ENCRYPTED_BLOCK_INFO = record
    NumEncryptedBytesAtBeginning: UINT;
    NumBytesInSkipPattern: UINT;
    NumBytesInEncryptPattern: UINT;
  end;
  {$EXTERNALSYM D3D11_ENCRYPTED_BLOCK_INFO}


  PD3D11_VIDEO_DECODER_BUFFER_DESC = ^D3D11_VIDEO_DECODER_BUFFER_DESC;
  D3D11_VIDEO_DECODER_BUFFER_DESC = record
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE;
    BufferIndex: UINT;
    DataOffset: UINT;
    DataSize: UINT;
    FirstMBaddress: UINT;
    NumMBsInBuffer: UINT;
    Width: UINT;
    Height: UINT;
    Stride: UINT;
    ReservedBits: UINT;
    pIV: Pointer;
    IVSize: UINT;
    PartialEncryption: BOOL;
    EncryptedBlockInfo: D3D11_ENCRYPTED_BLOCK_INFO;
  end;
  {$EXTERNALSYM D3D11_VIDEO_DECODER_BUFFER_DESC}
  TD3d11VideoDecoderBufferDesc = D3D11_VIDEO_DECODER_BUFFER_DESC;


  PD3D11_VIDEO_DECODER_EXTENSION = ^D3D11_VIDEO_DECODER_EXTENSION;
  {$EXTERNALSYM D3D11_VIDEO_DECODER_EXTENSION}
  D3D11_VIDEO_DECODER_EXTENSION = record
    Function_: UINT;
    pPrivateInputData: Pointer;
    PrivateInputDataSize: UINT;
    pPrivateOutputData: Pointer;
    PrivateOutputDataSize: UINT;
    ResourceCount: UINT;
    ppResourceList: PID3D11Resource {Pointer to array of ID3D11Resource};
  end;
  TD3d11VideoDecoderExtension = D3D11_VIDEO_DECODER_EXTENSION;


  // interface ID3D11VideoDecoder
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoDecoder);'}
  {$EXTERNALSYM ID3D11VideoDecoder}
  ID3D11VideoDecoder = interface(ID3D11DeviceChild)
    ['{3C9C5B51-995D-48d1-9B8D-FA5CAEDED65C}']

    function GetCreationParameters(out pVideoDesc: D3D11_VIDEO_DECODER_DESC;
                                   out pConfig: D3D11_VIDEO_DECODER_CONFIG): HRESULT; stdcall;

    function GetDriverHandle(out pDriverHandle: THandle): HRESULT; stdcall;

  end;
  IID_ID3D11VideoDecoder = ID3D11VideoDecoder;
  {$EXTERNALSYM IID_ID3D11VideoDecoder}



  //////////////////////////////////////////////////////////////////////////////
  //
  // VideoProcessorEnum
  //
  //////////////////////////////////////////////////////////////////////////////

  PD3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = ^D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT;
  D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT          = (
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT  = $00000001,
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = $00000002
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT}


  PD3D11_VIDEO_PROCESSOR_DEVICE_CAPS = ^D3D11_VIDEO_PROCESSOR_DEVICE_CAPS;
  D3D11_VIDEO_PROCESSOR_DEVICE_CAPS                           = (
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE            = $1,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC                   = $2,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION    = $4,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = $8,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE           = $10
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_DEVICE_CAPS}


  PD3D11_VIDEO_PROCESSOR_FEATURE_CAPS = ^D3D11_VIDEO_PROCESSOR_FEATURE_CAPS;
  D3D11_VIDEO_PROCESSOR_FEATURE_CAPS                      = (
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL         = $1,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION       = $2,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY           = $4,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE      = $8,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY             = $10,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO             = $20,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION           = $40,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM       = $80,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = $100,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR             = $200,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE       = $400,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10     = $800
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FEATURE_CAPS}


  PD3D11_VIDEO_PROCESSOR_FILTER_CAPS = ^D3D11_VIDEO_PROCESSOR_FILTER_CAPS;
  D3D11_VIDEO_PROCESSOR_FILTER_CAPS                      = (
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS         = $1,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST           = $2,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE                = $4,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION         = $8,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION    = $10,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT   = $20,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = $40,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT  = $80
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FILTER_CAPS}


  PD3D11_VIDEO_PROCESSOR_FORMAT_CAPS = ^D3D11_VIDEO_PROCESSOR_FORMAT_CAPS;
  D3D11_VIDEO_PROCESSOR_FORMAT_CAPS                      = (
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED     = $1,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP        = $2,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY       = $4,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = $8
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FORMAT_CAPS}


  PD3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = ^D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS;
  D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS                       = (
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE             = $01,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING           = $02,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT    = $04,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION    = $08,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING  = $10,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = $20,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION    = $40,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING  = $80
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS}


  PD3D11_VIDEO_PROCESSOR_STEREO_CAPS = ^D3D11_VIDEO_PROCESSOR_STEREO_CAPS;
  D3D11_VIDEO_PROCESSOR_STEREO_CAPS                      = (
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET        = $01,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED    = $02,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = $04,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD       = $08,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE          = $10
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_STEREO_CAPS}


  PD3D11_VIDEO_PROCESSOR_CAPS = ^D3D11_VIDEO_PROCESSOR_CAPS;
  D3D11_VIDEO_PROCESSOR_CAPS = record
    DeviceCaps: UINT;
    FeatureCaps: UINT;
    FilterCaps: UINT;
    InputFormatCaps: UINT;
    AutoStreamCaps: UINT;
    StereoCaps: UINT;
    RateConversionCapsCount: UINT;
    MaxInputStreams: UINT;
    MaxStreamStates: UINT;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_CAPS}
  TD3d11VideoProcessorCaps = D3D11_VIDEO_PROCESSOR_CAPS;


  PD3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = ^D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS;
  D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS                                   = (
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND               = $1,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB                 = $2,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE            = $4,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = $8,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE                = $10,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION           = $20
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS}


  // enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS moved up


  PD3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = ^D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS;
  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = record
    PastFrames: UINT;
    FutureFrames: UINT;
    ProcessorCaps: UINT;
    ITelecineCaps: UINT;
    CustomRateCount: UINT;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS}


  PD3D11_CONTENT_PROTECTION_CAPS = ^D3D11_CONTENT_PROTECTION_CAPS;
  D3D11_CONTENT_PROTECTION_CAPS                                             = (
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE                                  = $00000001,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE                                  = $00000002,
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON                      = $00000004,
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION                        = $00000008,
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY                               = $00000010,
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY                       = $00000020,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK                       = $00000040,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY                   = $00000080,
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV                         = $00000100,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY                    = $00000200,
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT                            = $00000400,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED             = $00000800,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE        = $00001000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN                         = $00002000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION                = $00004000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = $00008000
  );
  {$EXTERNALSYM D3D11_CONTENT_PROTECTION_CAPS}

  PD3D11_VIDEO_CONTENT_PROTECTION_CAPS = ^D3D11_VIDEO_CONTENT_PROTECTION_CAPS;
  D3D11_VIDEO_CONTENT_PROTECTION_CAPS = record
    Caps: UINT;
    KeyExchangeTypeCount: UINT;
    BlockAlignmentSize: UINT;
    ProtectedMemorySize: ULONGLONG;
  end;
  {$EXTERNALSYM D3D11_VIDEO_CONTENT_PROTECTION_CAPS}

  PD3D11_VIDEO_PROCESSOR_CUSTOM_RATE = ^D3D11_VIDEO_PROCESSOR_CUSTOM_RATE;
  D3D11_VIDEO_PROCESSOR_CUSTOM_RATE = record
    CustomRate: DXGI_RATIONAL;
    OutputFrames: UINT;
    InputInterlaced: BOOL;
    InputFramesOrFields: UINT;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_CUSTOM_RATE}

  PD3D11_VIDEO_PROCESSOR_FILTER = ^D3D11_VIDEO_PROCESSOR_FILTER;
  D3D11_VIDEO_PROCESSOR_FILTER                      = (
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS         = 0,
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST           = 1,
    D3D11_VIDEO_PROCESSOR_FILTER_HUE                = 2,
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION         = 3,
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION    = 4,
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT   = 5,
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT  = 7
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FILTER}


  PD3D11_VIDEO_PROCESSOR_FILTER_RANGE = ^D3D11_VIDEO_PROCESSOR_FILTER_RANGE;
  D3D11_VIDEO_PROCESSOR_FILTER_RANGE = record
    Minimum: Integer;
    Maximum: Integer;
    Default: Integer;
    Multiplier: Single;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_FILTER_RANGE}


  PD3D11_VIDEO_FRAME_FORMAT = ^D3D11_VIDEO_FRAME_FORMAT;
  D3D11_VIDEO_FRAME_FORMAT                                 = (
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE                   = 0,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST    = 1,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2
  );
  {$EXTERNALSYM D3D11_VIDEO_FRAME_FORMAT}


  PD3D11_VIDEO_USAGE = ^D3D11_VIDEO_USAGE;
  D3D11_VIDEO_USAGE                   = (
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0,
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED   = 1,
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2
  );
  {$EXTERNALSYM D3D11_VIDEO_USAGE}


  PD3D11_VIDEO_PROCESSOR_CONTENT_DESC = ^D3D11_VIDEO_PROCESSOR_CONTENT_DESC;
  D3D11_VIDEO_PROCESSOR_CONTENT_DESC = record
    InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT;
    InputFrameRate: DXGI_RATIONAL;
    InputWidth: UINT;
    InputHeight: UINT;
    OutputFrameRate: DXGI_RATIONAL;
    OutputWidth: UINT;
    OutputHeight: UINT;
    Usage: D3D11_VIDEO_USAGE;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_CONTENT_DESC}


  // Interface ID3D11VideoProcessorEnumerator
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoProcessorEnumerator);'}
  {$EXTERNALSYM ID3D11VideoProcessorEnumerator}
  ID3D11VideoProcessorEnumerator = interface(ID3D11DeviceChild)
  ['{31627037-53AB-4200-9061-05FAA9AB45F9}']
    function GetVideoProcessorContentDesc(out pContentDesc: D3D11_VIDEO_PROCESSOR_CONTENT_DESC): HRESULT; stdcall;

    function CheckVideoProcessorFormat(Format: DXGI_FORMAT;
                                       out pFlags: UINT): HRESULT; stdcall;

    function GetVideoProcessorCaps(out pCaps: D3D11_VIDEO_PROCESSOR_CAPS): HRESULT; stdcall;

    function GetVideoProcessorRateConversionCaps(TypeIndex: UINT;
                                                 out pCaps: D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS): HRESULT; stdcall;

    function GetVideoProcessorCustomRate(TypeIndex: UINT;
                                         CustomRateIndex: UINT;
                                         out pRate: D3D11_VIDEO_PROCESSOR_CUSTOM_RATE): HRESULT; stdcall;

    function GetVideoProcessorFilterRange(Filter: D3D11_VIDEO_PROCESSOR_FILTER;
                                          out pRange: D3D11_VIDEO_PROCESSOR_FILTER_RANGE): HRESULT; stdcall;

  end;
  IID_ID3D11VideoProcessorEnumerator = ID3D11VideoProcessorEnumerator;
  {$EXTERNALSYM IID_ID3D11VideoProcessorEnumerator}


  //////////////////////////////////////////////////////////////////////////////
  //
  // VideoProcessor
  //
  //////////////////////////////////////////////////////////////////////////////

  PD3D11_VIDEO_COLOR_RGBA = ^D3D11_VIDEO_COLOR_RGBA;
  D3D11_VIDEO_COLOR_RGBA = record
    R: Single;
    G: Single;
    B: Single;
    A: Single;
  end;
  {$EXTERNALSYM D3D11_VIDEO_COLOR_RGBA}

  PD3D11_VIDEO_COLOR_YCbCrA = ^D3D11_VIDEO_COLOR_YCbCrA;
  D3D11_VIDEO_COLOR_YCbCrA = record
    Y: Single;
    Cb: Single;
    Cr: Single;
    A: Single;
  end;
  {$EXTERNALSYM D3D11_VIDEO_COLOR_YCbCrA}

  PD3D11_VIDEO_COLOR = ^D3D11_VIDEO_COLOR;
  D3D11_VIDEO_COLOR = record
    case Index: DWORD of
      0: (YCbCr: D3D11_VIDEO_COLOR_YCbCrA);
      1: (RGBA: D3D11_VIDEO_COLOR_RGBA);
  end;
  {$EXTERNALSYM D3D11_VIDEO_COLOR}

  PD3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = ^D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE;
  D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE             = (
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235    = 1,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255     = 2
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE}

  PD3D11_VIDEO_PROCESSOR_COLOR_SPACE = ^D3D11_VIDEO_PROCESSOR_COLOR_SPACE;
  D3D11_VIDEO_PROCESSOR_COLOR_SPACE = record
  private
    Flags: DWord;
    function GetBits(const aIndex: Integer): Integer;
    procedure SetBits(const aIndex: Integer;
                      const aValue: Integer);
  public
    property Usage: Integer index $0001 read GetBits write SetBits;         //  1 bit at offset 0
    property RGB_Range: Integer index $0101 read GetBits write SetBits;     //  1 bit at offset 1
    property YCbCr_Matrix: Integer index $0201 read GetBits write SetBits;  //  1 bit at offset 2
    property YCbCr_xvYCC: Integer index $0301 read GetBits write SetBits;   //  1 bit at offset 3
    property Nominal_Range: Integer index $0402 read GetBits write SetBits; //  2 bits at offset 4   // D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    property Reserved: Integer index $061A read GetBits write SetBits;      //  26 bits at offset 6
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_COLOR_SPACE}


  PD3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = ^D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE;
  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE                 = (
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE        = 0,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND    = 1,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION   = 2,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE}


  PD3D11_VIDEO_PROCESSOR_OUTPUT_RATE = ^D3D11_VIDEO_PROCESSOR_OUTPUT_RATE;
  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE          = (
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF   = 1,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_OUTPUT_RATE}


  PD3D11_VIDEO_PROCESSOR_STEREO_FORMAT = ^D3D11_VIDEO_PROCESSOR_STEREO_FORMAT;
  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT                      = (
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO               = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL         = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL           = 2,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE           = 3,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET        = 4,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED    = 5,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD       = 7
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_STEREO_FORMAT}


  PD3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = ^D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE;
  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE     = (
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE   = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE}


  PD3D11_VIDEO_PROCESSOR_ROTATION = ^D3D11_VIDEO_PROCESSOR_ROTATION;
  D3D11_VIDEO_PROCESSOR_ROTATION            = (
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
    D3D11_VIDEO_PROCESSOR_ROTATION_90       = 1,
    D3D11_VIDEO_PROCESSOR_ROTATION_180      = 2,
    D3D11_VIDEO_PROCESSOR_ROTATION_270      = 3
  );
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_ROTATION}


  PD3D11_VIDEO_PROCESSOR_STREAM = ^D3D11_VIDEO_PROCESSOR_STREAM;
  D3D11_VIDEO_PROCESSOR_STREAM = record
    Enable: BOOL;
    OutputIndex: UINT;
    InputFrameOrField: UINT;
    PastFrames: UINT;
    FutureFrames: UINT;
    ppPastSurfaces: PID3D11VideoProcessorInputView;
    pInputSurface: PID3D11VideoProcessorInputView;
    ppFutureSurfaces: PID3D11VideoProcessorInputView;
    ppPastSurfacesRight: PID3D11VideoProcessorInputView;
    pInputSurfaceRight: PID3D11VideoProcessorInputView;
    ppFutureSurfacesRight: PID3D11VideoProcessorInputView;
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_STREAM}



  // Interface ID3D11VideoProcessor
  // ==============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoProcessor);'}
  {$EXTERNALSYM ID3D11VideoProcessor}
  ID3D11VideoProcessor = interface(ID3D11DeviceChild)
  ['{1D7B0652-185F-41c6-85CE-0C5BE3D4AE6C}']
    procedure GetContentDesc(out pDesc: D3D11_VIDEO_PROCESSOR_CONTENT_DESC); stdcall;

    procedure GetRateConversionCaps(out pCaps: D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS); stdcall;

  end;
  IID_ID3D11VideoProcessor = ID3D11VideoProcessor;
  {$EXTERNALSYM IID_ID3D11VideoProcessor}



  //////////////////////////////////////////////////////////////////////////////
  //
  // AuthenticatedChannel
  //
  //////////////////////////////////////////////////////////////////////////////


  PD3D11_OMAC = ^D3D11_OMAC;
  D3D11_OMAC = record
    Omac: array[0..D3D11_OMAC_SIZE - 1] of Byte;
  end;
  {$EXTERNALSYM D3D11_OMAC}


  PD3D11_AUTHENTICATED_CHANNEL_TYPE = ^D3D11_AUTHENTICATED_CHANNEL_TYPE;
  D3D11_AUTHENTICATED_CHANNEL_TYPE              = (
    D3D11_AUTHENTICATED_CHANNEL_D3D11           = 1,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3
  );
  {$EXTERNALSYM D3D11_AUTHENTICATED_CHANNEL_TYPE}


  // Interface ID3D11AuthenticatedChannel
  // ====================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11AuthenticatedChannel);'}
  {$EXTERNALSYM ID3D11AuthenticatedChannel}
  ID3D11AuthenticatedChannel = interface(ID3D11DeviceChild)
  ['{3015A308-DCBD-47aa-A747-192486D14D4A}']

    function GetCertificateSize(out pCertificateSize: UINT): HRESULT; stdcall;

    function GetCertificate(CertificateSize: UINT;
                            out pCertificate: Byte): HRESULT; stdcall;

    procedure GetChannelHandle(out pChannelHandle: THandle); stdcall;

  end;
  IID_ID3D11AuthenticatedChannel = ID3D11AuthenticatedChannel;
  {$EXTERNALSYM IID_ID3D11AuthenticatedChannel}


  PD3D11_AUTHENTICATED_QUERY_INPUT = ^D3D11_AUTHENTICATED_QUERY_INPUT;
  D3D11_AUTHENTICATED_QUERY_INPUT = record
    QueryType: TGUID;
    hChannel: THandle;
    SequenceNumber: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_INPUT}

  PD3D11_AUTHENTICATED_QUERY_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_OUTPUT = record
    omac: D3D11_OMAC;
    QueryType: TGUID;
    hChannel: THandle;
    SequenceNumber: UINT;
    ReturnCode: HResult;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_OUTPUT}


  STRUCT_D3D11_AUTHENTICATED_PROTECTION_FLAGS = record
    private
      Flags: UINT;
      function GetBits(const aIndex: Integer): Integer;
      procedure SetBits(const aIndex: Integer; const aValue: Integer);
    public
      property ProtectionEnabled: Integer index $0001 read GetBits write SetBits;     // 1 bit at offset 0
      property OverlayOrFullscreenRequired: Integer index $0102 read GetBits write SetBits;     // 1 bit at offset 1
      property Reserved: Integer index $0230 read GetBits write SetBits;     // 30 bits at offset 2
  end;


  D3D11_AUTHENTICATED_PROTECTION_FLAGS = record
    case Flags: UINT of
      0: (struct: STRUCT_D3D11_AUTHENTICATED_PROTECTION_FLAGS);
      1: (Value: UINT);  // Use this member to access all of the bits in the union.
  end;

  PD3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProtectionFlags: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = ^D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT;
  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = record
    Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    DecoderHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT}

  PD3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DecoderHandle: THandle;
    CryptoSessionHandle: THandle;
    DeviceHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    RestrictedSharedResourceProcessCount: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = ^D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT;
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = record
    Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    ProcessIndex: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT}

  PD3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = ^D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = (
    D3D11_PROCESSIDTYPE_UNKNOWN = 0,
    D3D11_PROCESSIDTYPE_DWM     = 1,
    D3D11_PROCESSIDTYPE_HANDLE  = 2
  );
  {$EXTERNALSYM D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE}

  PD3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    ProcessIndex: UINT;
    ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    UnrestrictedProtectedSharedResourceCount: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = ^D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT;
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = record
    Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle: THandle;
    CryptoSessionHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT}

  PD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle: THandle;
    CryptoSessionHandle: THandle;
    OutputIDCount: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = ^D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT;
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = record
    Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    DeviceHandle: THandle;
    CryptoSessionHandle: THandle;
    OutputIDIndex: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT}

  PD3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    DeviceHandle: THandle;
    CryptoSessionHandle: THandle;
    OutputIDIndex: UINT;
    OutputID: UINT64;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT}


  // enum D3D11_BUS_TYPE moved up.


  PD3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    BusType: D3D11_BUS_TYPE;
    AccessibleInContiguousBlocks: BOOL;
    AccessibleInNonContiguousBlocks: BOOL;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidCount: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = ^D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT;
  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = record
    Input: D3D11_AUTHENTICATED_QUERY_INPUT;
    EncryptionGuidIndex: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT}

  PD3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuidIndex: UINT;
    EncryptionGuid: TGUID;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT}

  PD3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = ^D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT;
  D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = record
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT;
    EncryptionGuid: TGUID;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_INPUT = record
    omac: D3D11_OMAC;
    ConfigureType: TGUID;
    hChannel: THandle;
    SequenceNumber: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_INPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_OUTPUT = ^D3D11_AUTHENTICATED_CONFIGURE_OUTPUT;
  D3D11_AUTHENTICATED_CONFIGURE_OUTPUT = record
    omac: D3D11_OMAC;
    ConfigureType: TGUID;
    hChannel: THandle;
    SequenceNumber: UINT;
    ReturnCode: HResult;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_OUTPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = record
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    StartSequenceQuery: UINT;
    StartSequenceConfigure: UINT;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = record
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    Protections: D3D11_AUTHENTICATED_PROTECTION_FLAGS;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = record
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    DecoderHandle: THandle;
    CryptoSessionHandle: THandle;
    DeviceHandle: THandle;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = record
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    ProcessType: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE;
    ProcessHandle: THandle;
    AllowAccess: BOOL;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT}

  PD3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = ^D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT;
  D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = record
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT;
    EncryptionGuid: TGUID;
  end;
  {$EXTERNALSYM D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT}



  //////////////////////////////////////////////////////////////////////////////
  //
  // CryptoSession
  //
  //////////////////////////////////////////////////////////////////////////////

 // moved up.
 //  D3D11_KEY_EXCHANGE_RSAES_OAEP  : TGUID = '{c1949895-d72a-4a1d-8e5d-ed857d171520}';


  // Interface ID3D11CryptoSession
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11CryptoSession);'}
  {$EXTERNALSYM ID3D11CryptoSession}
  ID3D11CryptoSession = interface(ID3D11DeviceChild)
  ['{9B32F9AD-BDCC-40a6-A39D-D5C865845720}']

    procedure GetCryptoType(out pCryptoType: TGUID); stdcall;

    procedure GetDecoderProfile(out pDecoderProfile: TGUID); stdcall;

    function GetCertificateSize(out pCertificateSize: UINT): HRESULT; stdcall;

    function GetCertificate(CertificateSize: UINT;
                            pCertificate: PByte): HRESULT; stdcall;

    procedure GetCryptoSessionHandle(out pCryptoSessionHandle: THandle); stdcall;

  end;
  IID_ID3D11CryptoSession = ID3D11CryptoSession;
  {$EXTERNALSYM IID_ID3D11CryptoSession}



  PD3d11VdovDimension = ^TD3d11VdovDimension;
  {$EXTERNALSYM D3D11_VDOV_DIMENSION}
  D3D11_VDOV_DIMENSION             = (
    D3D11_VDOV_DIMENSION_UNKNOWN   = 0,
    D3D11_VDOV_DIMENSION_TEXTURE2D = 1
  );
  TD3d11VdovDimension = D3D11_VDOV_DIMENSION;

  PD3d11Tex2dVdov = ^TD3d11Tex2dVdov;
  {$EXTERNALSYM D3D11_TEX2D_VDOV}
  D3D11_TEX2D_VDOV = record
    ArraySlice: UINT;
  end;
  TD3d11Tex2dVdov = D3D11_TEX2D_VDOV;


  PD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = ^D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC;
  D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = record
    DecodeProfile: TGUID;
    ViewDimension: D3D11_VDOV_DIMENSION;
    case integer of
      0: (Texture2D: D3D11_TEX2D_VDOV);
  end;
  {$EXTERNALSYM D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC}


  // Interface ID3D11VideoDecoderOutputView
  // ======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoDecoderOutputView);'}
  {$EXTERNALSYM ID3D11VideoDecoderOutputView}
  ID3D11VideoDecoderOutputView = interface(ID3D11View)
  ['{C2931AEA-2A85-4f20-860F-FBA1FD256E18}']

    procedure GetDesc(out pDesc: D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC);

  end;
  IID_ID3D11VideoDecoderOutputView = ID3D11VideoDecoderOutputView;
  {$EXTERNALSYM IID_ID3D11VideoDecoderOutputView}

  PD3D11_VPIV_DIMENSION = ^D3D11_VPIV_DIMENSION;
  D3D11_VPIV_DIMENSION             = (
    D3D11_VPIV_DIMENSION_UNKNOWN   = 0,
    D3D11_VPIV_DIMENSION_TEXTURE2D = 1
  );
  {$EXTERNALSYM D3D11_VPIV_DIMENSION}

  PD3D11_TEX2D_VPIV = ^D3D11_TEX2D_VPIV;
  D3D11_TEX2D_VPIV = record
    MipSlice: UINT;
    ArraySlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_VPIV}

  D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = record
    case FourCC: UINT of
      0: (ViewDimension: D3D11_VPIV_DIMENSION);
      1: (Texture2D: D3D11_TEX2D_VPIV);
  end;
  {$EXTERNALSYM D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC}

  // Interface ID3D11VideoProcessorInputView
  // =======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoProcessorInputView);'}
  {$EXTERNALSYM ID3D11VideoProcessorInputView}
  ID3D11VideoProcessorInputView = interface(ID3D11View)
  ['{11EC5A5F-51DC-4945-AB34-6E8C21300EA5}']

    procedure GetDesc(out pDesc: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC);

  end;
  IID_ID3D11VideoProcessorInputView = ID3D11VideoProcessorInputView;
  {$EXTERNALSYM IID_ID3D11VideoProcessorInputView}


  PD3D11_VPOV_DIMENSION = ^D3D11_VPOV_DIMENSION;
  D3D11_VPOV_DIMENSION                  = (
    D3D11_VPOV_DIMENSION_UNKNOWN        = 0,
    D3D11_VPOV_DIMENSION_TEXTURE2D      = 1,
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2
  );
  {$EXTERNALSYM D3D11_VPOV_DIMENSION}

  PD3D11_TEX2D_VPOV = ^D3D11_TEX2D_VPOV;
  D3D11_TEX2D_VPOV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_VPOV}

  PD3D11_TEX2D_ARRAY_VPOV = ^D3D11_TEX2D_ARRAY_VPOV;
  D3D11_TEX2D_ARRAY_VPOV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D11_TEX2D_ARRAY_VPOV}

  PD3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = ^D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC;
  D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = record
    ViewDimension: D3D11_VPOV_DIMENSION;
    case integer of
      0: (Texture2D: D3D11_TEX2D_VPOV);
      1: (Texture2DArray: D3D11_TEX2D_ARRAY_VPOV);
  end;

  // Interface ID3D11VideoProcessorOutputView
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoProcessorOutputView);'}
  {$EXTERNALSYM ID3D11VideoProcessorOutputView}
  ID3D11VideoProcessorOutputView = interface(ID3D11View)
  ['{A048285E-25A9-4527-BD93-D68B68C44254}']

    procedure GetDesc(out pDesc: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC); stdcall;

  end;
  IID_ID3D11VideoProcessorOutputView = ID3D11VideoProcessorOutputView;
  {$EXTERNALSYM IID_ID3D11VideoProcessorOutputView}



  //////////////////////////////////////////////////////////////////////////////
  //
  // VideoContext
  //
  //////////////////////////////////////////////////////////////////////////////

  // Interface ID3D11VideoContext
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoContext);'}
  {$EXTERNALSYM ID3D11VideoContext}
  ID3D11VideoContext = interface(ID3D11DeviceChild)
  ['{61F21C45-3C0E-4a74-9CEA-67100D9AD5E4}']

    // Decode
    function GetDecoderBuffer(const pDecoder: ID3D11VideoDecoder;
                              Type_: D3D11_VIDEO_DECODER_BUFFER_TYPE;
                              out pBufferSize: PUINT;
                              [ref] const ppBuffer: Pointer): HRESULT; stdcall;

    function ReleaseDecoderBuffer(pDecoder: ID3D11VideoDecoder;
                                  Type_: D3D11_VIDEO_DECODER_BUFFER_TYPE): HRESULT; stdcall;

    function DecoderBeginFrame(const pDecoder: ID3D11VideoDecoder;
                               const pView: ID3D11VideoDecoderOutputView;
                               ContentKeySize: UINT;
                               pContentKey: Pointer): HRESULT; stdcall;

    function DecoderEndFrame(pDecoder: ID3D11VideoDecoder): HRESULT; stdcall;

    function SubmitDecoderBuffers(const pDecoder: ID3D11VideoDecoder;
                                  NumBuffers: UINT;
                                  pBufferDesc: D3D11_VIDEO_DECODER_BUFFER_DESC): HRESULT; stdcall;

    function DecoderExtension(const pDecoder: ID3D11VideoDecoder;
                              pExtensionData: D3D11_VIDEO_DECODER_EXTENSION): HRESULT; stdcall;

    procedure VideoProcessorSetOutputTargetRect(const pVideoProcessor: ID3D11VideoProcessor;
                                                Enable_: BOOL;
                                                pRect: PRECT = nil); stdcall;

    procedure VideoProcessorSetOutputBackgroundColor(const pVideoProcessor: ID3D11VideoProcessor;
                                                     YCbCr: BOOL;  {If TRUE, the color is specified as a YCbCr value. Otherwise, the color is specified as an RGB value.}
                                                     pColor: D3D11_VIDEO_COLOR); stdcall;

    procedure VideoProcessorSetOutputColorSpace(const pVideoProcessor: ID3D11VideoProcessor;
                                                pColorSpace: D3D11_VIDEO_PROCESSOR_COLOR_SPACE); stdcall;

    procedure VideoProcessorSetOutputAlphaFillMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                   AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE;
                                                   StreamIndex: UINT); stdcall;

    procedure VideoProcessorSetOutputConstriction(const pVideoProcessor: ID3D11VideoProcessor;
                                                  Enable: BOOL;
                                                  Size_: SIZE); stdcall;

    procedure VideoProcessorSetOutputStereoMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                Enable: BOOL); stdcall;

    function VideoProcessorSetOutputExtension(const pVideoProcessor: ID3D11VideoProcessor;
                                              const pExtensionGuid: TGUID;
                                              DataSize: UINT;
                                              pData: Pointer): HRESULT; stdcall;

    procedure VideoProcessorGetOutputTargetRect(const pVideoProcessor: ID3D11VideoProcessor;
                                                out Enabled: BOOL;
                                                out pRect: TRECT); stdcall;

    procedure VideoProcessorGetOutputBackgroundColor(const pVideoProcessor: ID3D11VideoProcessor;
                                                     out pYCbCr: BOOL;
                                                     out pColor: D3D11_VIDEO_COLOR); stdcall;

    procedure VideoProcessorGetOutputColorSpace(const pVideoProcessor: ID3D11VideoProcessor;
                                                out pColorSpace: D3D11_VIDEO_PROCESSOR_COLOR_SPACE); stdcall;

    procedure VideoProcessorGetOutputAlphaFillMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                   out pAlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE;
                                                   out pStreamIndex: UINT); stdcall;

    procedure VideoProcessorGetOutputConstriction(pVideoProcessor: ID3D11VideoProcessor;
                                                  out pEnabled: BOOL;
                                                  out pSize: SIZE); stdcall;

    procedure VideoProcessorGetOutputStereoMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                out pEnabled: BOOL); stdcall;

    function VideoProcessorGetOutputExtension(const pVideoProcessor: ID3D11VideoProcessor;
                                              const pExtensionGuid: TGUID;
                                              DataSize: UINT;
                                              out pData: Pointer): HRESULT; stdcall;

    procedure VideoProcessorSetStreamFrameFormat(const pVideoProcessor: ID3D11VideoProcessor;
                                                 const StreamIndex: UINT;
                                                 FrameFormat: D3D11_VIDEO_FRAME_FORMAT); stdcall;

    procedure VideoProcessorSetStreamColorSpace(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                pColorSpace: D3D11_VIDEO_PROCESSOR_COLOR_SPACE); stdcall;

    procedure VideoProcessorSetStreamOutputRate(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE;
                                                RepeatFrame: BOOL;
                                                pCustomRate: PDXGI_RATIONAL = nil); stdcall;

    procedure VideoProcessorSetStreamSourceRect(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                Enable: BOOL;
                                                pRect: PRECT = nil); stdcall;

    procedure VideoProcessorSetStreamDestRect(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              Enable: BOOL;
                                              pRect: PRECT = nil); stdcall;

    procedure VideoProcessorSetStreamAlpha(const pVideoProcessor: ID3D11VideoProcessor;
                                           const StreamIndex: UINT;
                                           Enable: BOOL;
                                           Alpha: FLOAT); stdcall;

    procedure VideoProcessorSetStreamPalette(const pVideoProcessor: ID3D11VideoProcessor;
                                             StreamIndex: UINT;
                                             Count: UINT;
                                             pEntries: UINT); stdcall;

    procedure VideoProcessorSetStreamPixelAspectRatio(const pVideoProcessor: ID3D11VideoProcessor;
                                                      const StreamIndex: UINT;
                                                      Enable: BOOL;
                                                      pSourceAspectRatio: PDXGI_RATIONAL;
                                                      pDestinationAspectRatio: PDXGI_RATIONAL); stdcall;

    procedure VideoProcessorSetStreamLumaKey(const pVideoProcessor: ID3D11VideoProcessor;
                                             const StreamIndex: UINT;
                                             Enable: BOOL;
                                             Lower: FLOAT;
                                             Upper: FLOAT); stdcall;

    procedure VideoProcessorSetStreamStereoFormat(const pVideoProcessor: ID3D11VideoProcessor;
                                                  const StreamIndex: UINT;
                                                  Enable: BOOL;
                                                  Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT;
                                                  LeftViewFrame0: BOOL;
                                                  BaseViewFrame0: BOOL;
                                                  FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE;
                                                  MonoOffset: Integer); stdcall;

    procedure VideoProcessorSetStreamAutoProcessingMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                        const StreamIndex: UINT;
                                                        Enable: BOOL); stdcall;

    procedure VideoProcessorSetStreamFilter(const pVideoProcessor: ID3D11VideoProcessor;
                                            const StreamIndex: UINT;
                                            Filter: D3D11_VIDEO_PROCESSOR_FILTER;
                                            Enable: BOOL;
                                            Level: Integer); stdcall;

    function VideoProcessorSetStreamExtension(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              const pExtensionGuid: TGUID;
                                              DataSize: UINT;
                                              pData: Pointer): HRESULT; stdcall;

    procedure VideoProcessorGetStreamFrameFormat(const pVideoProcessor: ID3D11VideoProcessor;
                                                 const StreamIndex: UINT;
                                                 out pFrameFormat: D3D11_VIDEO_FRAME_FORMAT); stdcall;

    procedure VideoProcessorGetStreamColorSpace(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                out pColorSpace: D3D11_VIDEO_PROCESSOR_COLOR_SPACE); stdcall;

    procedure VideoProcessorGetStreamOutputRate(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                out pOutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE;
                                                out pRepeatFrame: BOOL;
                                                out pCustomRate: DXGI_RATIONAL); stdcall;

    procedure VideoProcessorGetStreamSourceRect(const pVideoProcessor: ID3D11VideoProcessor;
                                                const StreamIndex: UINT;
                                                out pEnabled: BOOL;
                                                out pRect: TRECT); stdcall;

    procedure VideoProcessorGetStreamDestRect(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              out pEnabled: BOOL;
                                              out pRect: TRECT); stdcall;

    procedure VideoProcessorGetStreamAlpha(const pVideoProcessor: ID3D11VideoProcessor;
                                           const StreamIndex: UINT;
                                           out pEnabled: BOOL;
                                           out pAlpha: FLOAT); stdcall;

    procedure VideoProcessorGetStreamPalette(const pVideoProcessor: ID3D11VideoProcessor;
                                             const StreamIndex: UINT;
                                             Count: UINT;
                                             out pEntries: UINT); stdcall;

    procedure VideoProcessorGetStreamPixelAspectRatio(const pVideoProcessor: ID3D11VideoProcessor;
                                                      const StreamIndex: UINT;
                                                      out pEnabled: BOOL;
                                                      out pSourceAspectRatio: DXGI_RATIONAL;
                                                      out pDestinationAspectRatio: DXGI_RATIONAL); stdcall;

    procedure VideoProcessorGetStreamLumaKey(const pVideoProcessor: ID3D11VideoProcessor;
                                             const StreamIndex: UINT;
                                             out pEnabled: BOOL;
                                             out pLower: FLOAT;
                                             out pUpper: FLOAT); stdcall;

    procedure VideoProcessorGetStreamStereoFormat(const pVideoProcessor: ID3D11VideoProcessor;
                                                  const StreamIndex: UINT;
                                                  out pEnable: BOOL;
                                                  out pFormat: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT;
                                                  out pLeftViewFrame0: BOOL;
                                                  out pBaseViewFrame0: BOOL;
                                                  out pFlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE;
                                                  out MonoOffset: Integer); stdcall;

    procedure VideoProcessorGetStreamAutoProcessingMode(const pVideoProcessor: ID3D11VideoProcessor;
                                                        const StreamIndex: UINT;
                                                        out pEnabled: BOOL); stdcall;

    procedure VideoProcessorGetStreamFilter(const pVideoProcessor: ID3D11VideoProcessor;
                                            const StreamIndex: UINT;
                                            Filter: D3D11_VIDEO_PROCESSOR_FILTER;
                                            out pEnabled: BOOL;
                                            out pLevel: Integer); stdcall;

    function VideoProcessorGetStreamExtension(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              const pExtensionGuid: TGUID;
                                              DataSize: UINT;
                                              out pData: Pointer): HRESULT; stdcall;

    function VideoProcessorBlt(const pVideoProcessor: ID3D11VideoProcessor;
                               pView: ID3D11VideoProcessorOutputView;
                               OutputFrame: UINT;
                               StreamCount: UINT;
                               pStreams: D3D11_VIDEO_PROCESSOR_STREAM): HRESULT; stdcall;

    function NegotiateCryptoSessionKeyExchange(const pCryptoSession: ID3D11CryptoSession;
                                               DataSize: UINT;
                                               [ref] const pData: Pointer): HRESULT; stdcall;

    procedure EncryptionBlt(const pCryptoSession: ID3D11CryptoSession;
                            pSrcSurface: ID3D11Texture2D;
                            pDstSurface: ID3D11Texture2D;
                            IVSize: UINT;
                            [ref] const pIV: Pointer); stdcall;

    procedure DecryptionBlt(const pCryptoSession: ID3D11CryptoSession;
                            const pSrcSurface: ID3D11Texture2D;
                            const pDstSurface: ID3D11Texture2D;
                            pEncryptedBlockInfo: PD3D11_ENCRYPTED_BLOCK_INFO;
                            ContentKeySize: UINT;
                            pContentKey: Pointer;
                            IVSize: UINT;
                            [ref] const pIV: Pointer); stdcall;

    procedure StartSessionKeyRefresh(const pCryptoSession: ID3D11CryptoSession;
                                     RandomNumberSize: UINT;
                                     out pRandomNumber: Pointer); stdcall;

    procedure FinishSessionKeyRefresh(pCryptoSession: ID3D11CryptoSession); stdcall;

    function GetEncryptionBltKey(const pCryptoSession: ID3D11CryptoSession;
                                 KeySize: UINT;
                                 const pReadbackKey: Pointer): HRESULT ; stdcall;

    function NegotiateAuthenticatedChannelKeyExchange(const pChannel: ID3D11AuthenticatedChannel;
                                                      DataSize: UINT;
                                                      [ref] const pData: Pointer): HRESULT; stdcall;

    function QueryAuthenticatedChannel(const pChannel: ID3D11AuthenticatedChannel;
                                       InputSize: UINT;
                                       pInput: Pointer;
                                       OutputSize: UINT;
                                       out pOutput: Pointer): HRESULT; stdcall;

    function ConfigureAuthenticatedChannel(const pChannel: ID3D11AuthenticatedChannel;
                                           InputSize: UINT;
                                           pInput: Pointer;
                                           out pOutput: D3D11_AUTHENTICATED_CONFIGURE_OUTPUT): HRESULT; stdcall;

    procedure VideoProcessorSetStreamRotation(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              Enable: BOOL;
                                              Rotation: D3D11_VIDEO_PROCESSOR_ROTATION); stdcall;

    procedure VideoProcessorGetStreamRotation(const pVideoProcessor: ID3D11VideoProcessor;
                                              const StreamIndex: UINT;
                                              out pEnable: BOOL;
                                              out pRotation: D3D11_VIDEO_PROCESSOR_ROTATION); stdcall;
  end;
  IID_ID3D11VideoContext = ID3D11VideoContext;
  {$EXTERNALSYM IID_ID3D11VideoContext}


  //////////////////////////////////////////////////////////////////////////////
  //
  // Device
  //
  //////////////////////////////////////////////////////////////////////////////


  // Interface ID3D11VideoDevice
  // ===========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11VideoDevice);'}
  {$EXTERNALSYM ID3D11VideoDevice}
  ID3D11VideoDevice = interface(IUnknown)
  ['{10EC4D5B-975A-4689-B9E4-D0AAC30FE333}']

    // Create
    function CreateVideoDecoder(pVideoDesc: D3D11_VIDEO_DECODER_DESC;
                                pConfig: D3D11_VIDEO_DECODER_CONFIG;
                                [ref] const ppDecoder: ID3D11VideoDecoder): HRESULT; stdcall;

    function CreateVideoProcessor(const pEnum: ID3D11VideoProcessorEnumerator;
                                  RateConversionIndex: UINT;
                                  [ref] const ppVideoProcessor: ID3D11VideoProcessor): HRESULT; stdcall;

    function CreateAuthenticatedChannel(ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE;
                                        [ref] const ppAuthenticatedChannel: ID3D11AuthenticatedChannel): HRESULT; stdcall;

    function CreateCryptoSession(const pCryptoType: TGUID;
                                 const pDecoderProfile: TGUID;
                                 const pKeyExchangeType: TGUID;
                                 [ref] const ppCryptoSession: ID3D11CryptoSession): HRESULT; stdcall;

    function CreateVideoDecoderOutputView(const pResource: ID3D11Resource;
                                          pDesc: PD3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC;
                                          [ref] const ppVDOVView: ID3D11VideoDecoderOutputView): HRESULT; stdcall;

    function CreateVideoProcessorInputView(const pResource: ID3D11Resource;
                                           const pEnum: ID3D11VideoProcessorEnumerator;
                                           pDesc: D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC;
                                           [ref] const ppVPIView: ID3D11VideoProcessorInputView): HRESULT; stdcall;

    function CreateVideoProcessorOutputView(const pResource: ID3D11Resource;
                                            const pEnum: ID3D11VideoProcessorEnumerator;
                                            pDesc: D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC;
                                            [ref] const ppVPOView: ID3D11VideoProcessorOutputView): HRESULT; stdcall;

    function CreateVideoProcessorEnumerator(pDesc: D3D11_VIDEO_PROCESSOR_CONTENT_DESC;
                                            [ref] const ppEnum: ID3D11VideoProcessorEnumerator): HRESULT; stdcall;

    function GetVideoDecoderProfileCount(): UINT; stdcall;

    function GetVideoDecoderProfile(Index: UINT;
                                    out pDecoderProfile: TGUID): HRESULT; stdcall;

    function CheckVideoDecoderFormat(const pDecoderProfile: TGUID;
                                     Format: DXGI_FORMAT;
                                     out pSupported: BOOL): HRESULT; stdcall;

    function GetVideoDecoderConfigCount(pDesc: D3D11_VIDEO_DECODER_DESC;
                                        out pCount: UINT): HRESULT; stdcall;

    function GetVideoDecoderConfig(pDesc: D3D11_VIDEO_DECODER_DESC;
                                   Index: UINT;
                                   out pConfig: D3D11_VIDEO_DECODER_CONFIG): HRESULT; stdcall;

    function GetContentProtectionCaps(const pCryptoType: TGUID;
                                      const pDecoderProfile: TGUID;
                                      out pCaps: PD3D11_VIDEO_CONTENT_PROTECTION_CAPS): HRESULT; stdcall;

    function CheckCryptoKeyExchange(const pCryptoType: TGUID;
                                    const pDecoderProfile: TGUID;
                                    Index: UINT;
                                    out pKeyExchangeType: TGUID): HRESULT; stdcall;

    function SetPrivateData(const guid: REFGUID;
                            DataSize: UINT;
                            pData: Pointer): HRESULT; stdcall;

    function SetPrivateDataInterface(const guid: REFGUID;
                                     const pData: IUnknown): HRESULT; stdcall;

  end;
  IID_ID3D11VideoDevice = ID3D11VideoDevice;
  {$EXTERNALSYM IID_ID3D11VideoDevice}


  // NOTE: ID3D11Device moved up.


////////////////////////////////////////////////////////////////////////////////
// D3D11CreateDevice
// ------------------
//
// pAdapter
//      If nil, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-nil, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter.RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      nil.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be nil for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// pFeatureLevels
//      Any of those documented for D3D11CreateDeviceAndSwapChain.
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// ppDevice
//      Pointer to returned interface. May be nil.
// pFeatureLevel
//      Pointer to returned feature level. May be nil.
// ppImmediateContext
//      Pointer to returned interface. May be nil.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory.EnumAdapters
//          IDXGIAdapter.RegisterDriver
//          D3D11CreateDevice
//
////////////////////////////////////////////////////////////////////////////////


  {$EXTERNALSYM PFN_D3D11_CREATE_DEVICE}
  PFN_D3D11_CREATE_DEVICE = function(pAdapter: IDXGIAdapter;
                                     DriverType: D3D_DRIVER_TYPE;
                                     Software: HMODULE;
                                     Flags: UINT;
                                     const pFeatureLevels: PD3D_FEATURE_LEVEL;
                                     FeatureLevels: UINT;
                                     SDKVersion: UINT;
                                     out ppDevice: ID3D11Device;
                                     out pFeatureLevel: D3D_FEATURE_LEVEL;
                                     out ppImmediateContext: ID3D11DeviceContext): HRESULT; stdcall;


////////////////////////////////////////////////////////////////////////////////
// D3D11CreateDeviceAndSwapChain
// ------------------------------
//
// ppAdapter
//      If nil, D3D11CreateDevice will choose the primary adapter and
//      create a new instance from a temporarily created IDXGIFactory.
//      If non-nil, D3D11CreateDevice will register the appropriate
//      device, if necessary (via IDXGIAdapter.RegisterDrver), before
//      creating the device.
// DriverType
//      Specifies the driver type to be created: hardware, reference or
//      null.
// Software
//      HMODULE of a DLL implementing a software rasterizer. Must be nil for
//      non-Software driver types.
// Flags
//      Any of those documented for D3D11CreateDevice.
// pFeatureLevels
//      Array of any of the following:
//          D3D_FEATURE_LEVEL_11_0
//          D3D_FEATURE_LEVEL_10_1
//          D3D_FEATURE_LEVEL_10_0
//          D3D_FEATURE_LEVEL_9_3
//          D3D_FEATURE_LEVEL_9_2
//          D3D_FEATURE_LEVEL_9_1
//      Order indicates sequence in which instantiation will be attempted. If
//      nil, then the implied order is the same as previously listed (i.e.
//      prefer most features available).
// FeatureLevels
//      Size of feature levels array.
// SDKVersion
//      SDK version. Use the D3D11_SDK_VERSION macro.
// pSwapChainDesc
//      Swap chain description, may be nil.
// ppSwapChain
//      Pointer to returned interface. May be nil.
// ppDevice
//      Pointer to returned interface. May be nil.
// pFeatureLevel
//      Pointer to returned feature level. May be nil.
// ppImmediateContext
//      Pointer to returned interface. May be nil.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory.EnumAdapters
//          IDXGIAdapter.RegisterDriver
//          D3D11CreateDevice
//          IDXGIFactory.CreateSwapChain
//
////////////////////////////////////////////////////////////////////////////////


  {$EXTERNALSYM PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN}
  PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = function(pAdapter: IDXGIAdapter;
                                                    DriverType: D3D_DRIVER_TYPE;
                                                    Software: HMODULE;
                                                    Flags: UINT;
                                                    const pFeatureLevels: PD3D_FEATURE_LEVEL;
                                                    FeatureLevels: UINT;
                                                    SDKVersion: UINT;
                                                    const pSwapChainDesc: PDXGISwapChainDesc;
                                                    out ppSwapChain: IDXGISwapChain;
                                                    out ppDevice: ID3D11Device;
                                                    out pFeatureLevel: D3D_FEATURE_LEVEL;
                                                    out ppImmediateContext: ID3D11DeviceContext): HRESULT; stdcall;



  // helper methods.
  // ===============

  // Helper functionality has been added to the records, since we cannot add
  // operator overload to a record helper.
  CD3D11_BOX = D3D11_BOX;
  {$EXTERNALSYM CD3D11_BOX}
  CD3D11_DEPTH_STENCIL_DESC = D3D11_DEPTH_STENCIL_DESC;
  {$EXTERNALSYM CD3D11_DEPTH_STENCIL_DESC}
  CD3D11_BLEND_DESC = D3D11_BLEND_DESC;
  {$EXTERNALSYM CD3D11_BLEND_DESC}
  CD3D11_RASTERIZER_DESC = D3D11_RASTERIZER_DESC;
  {$EXTERNALSYM CD3D11_RASTERIZER_DESC}
  CD3D11_BUFFER_DESC = D3D11_BUFFER_DESC;
  {$EXTERNALSYM CD3D11_BUFFER_DESC}
  CD3D11_TEXTURE1D_DESC = D3D11_TEXTURE1D_DESC;
  {$EXTERNALSYM CD3D11_TEXTURE1D_DESC}
  CD3D11_TEXTURE2D_DESC = D3D11_TEXTURE2D_DESC;
  {$EXTERNALSYM CD3D11_TEXTURE2D_DESC}
  CD3D11_TEXTURE3D_DESC = D3D11_TEXTURE3D_DESC;
  {$EXTERNALSYM CD3D11_TEXTURE3D_DESC}
  CD3D11_SHADER_RESOURCE_VIEW_DESC = D3D11_SHADER_RESOURCE_VIEW_DESC;
  {$EXTERNALSYM CD3D11_SHADER_RESOURCE_VIEW_DESC}
  CD3D11_RENDER_TARGET_VIEW_DESC = D3D11_RENDER_TARGET_VIEW_DESC;
  {$EXTERNALSYM CD3D11_RENDER_TARGET_VIEW_DESC}
  CD3D11_VIEWPORT = D3D11_VIEWPORT;
  {$EXTERNALSYM CD3D11_VIEWPORT}
  CD3D11_DEPTH_STENCIL_VIEW_DESC = D3D11_DEPTH_STENCIL_VIEW_DESC;
  {$EXTERNALSYM CD3D11_DEPTH_STENCIL_VIEW_DESC}
  CD3D11_UNORDERED_ACCESS_VIEW_DESC = D3D11_UNORDERED_ACCESS_VIEW_DESC;
  {$EXTERNALSYM CD3D11_UNORDERED_ACCESS_VIEW_DESC}
  CD3D11_SAMPLER_DESC = D3D11_SAMPLER_DESC;
  {$EXTERNALSYM CD3D11_SAMPLER_DESC}
  CD3D11_QUERY_DESC = D3D11_QUERY_DESC;
  {$EXTERNALSYM CD3D11_QUERY_DESC}
  CD3D11_COUNTER_DESC = D3D11_COUNTER_DESC;
  {$EXTERNALSYM CD3D11_COUNTER_DESC}


  function D3D11CreateDevice(pAdapter: IDXGIAdapter;
                             DriverType: D3D_DRIVER_TYPE;
                             Software: HMODULE;
                             Flags: UINT;
                             const pFeatureLevels: PD3D_FEATURE_LEVEL;
                             FeatureLevels: UINT;
                             SDKVersion: UINT;
                             out ppDevice: ID3D11Device;
                             out pFeatureLevel: D3D_FEATURE_LEVEL;
                             out ppImmediateContext: ID3D11DeviceContext): HRESULT; stdcall;

  function D3D11CreateDeviceAndSwapChain(pAdapter: IDXGIAdapter;
                                         DriverType: D3D_DRIVER_TYPE;
                                         Software: HMODULE;
                                         Flags: UINT;
                                         const pFeatureLevels: PD3D_FEATURE_LEVEL;
                                         FeatureLevels: UINT;
                                         SDKVersion: UINT;
                                         const pSwapChainDesc: PDXGISwapChainDesc;
                                         out ppSwapChain: IDXGISwapChain;
                                         out ppDevice: ID3D11Device;
                                         out pFeatureLevel: D3D_FEATURE_LEVEL;
                                         out ppImmediateContext: ID3D11DeviceContext): HRESULT; stdcall;



  // Those macro's are defined in D3DCommon.h
  // Since D3D9 is using those macro's too, we defined them here.
  procedure D3D_SET_OBJECT_NAME_N_A(pObject: ID3D11Device;
                                    Chars: UINT;
                                    pName: Pointer); overload; inline;

  procedure D3D_SET_OBJECT_NAME_N_A(pObject: ID3D11DeviceChild;
                                    Chars: UINT;
                                    pName: Pointer); overload; inline;


  procedure D3D_SET_OBJECT_NAME_A(pObject: ID3D11Device;
                                  pName: Pointer); overload; inline;

  procedure D3D_SET_OBJECT_NAME_A(pObject: ID3D11DeviceChild;
                                  pName: Pointer); overload; inline;


  procedure D3D_SET_OBJECT_NAME_N_W(pObject: ID3D11Device;
                                  Chars: UINT;
                                  pName: Pointer); inline;

  procedure D3D_SET_OBJECT_NAME_W(pObject: ID3D11Device;
                                pName: Pointer); inline;

  // ===========================================================================

  function MAKE_D3D11_HRESULT(code: Word): HRESULT; inline;

  function MAKE_D3D11_STATUS(code: Word): HRESULT; inline;

  function D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS: HRESULT; inline;

  function D3D11_ERROR_FILE_NOT_FOUND: HRESULT; inline;

  function D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS: HRESULT; inline;

  function D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD: HRESULT; inline;



  function operator_equal(const l: D3D11_VIEWPORT;
                          const r: D3D11_VIEWPORT): Bool; inline;

  function operator_notEqual(const l: D3D11_VIEWPORT;
                             const r: D3D11_VIEWPORT): Bool; inline;

  function D3D11CalcSubresource(MipSlice: UINT;
                                ArraySlice: UINT;
                                MipLevels: UINT): UINT; inline;

  function D3D11_ENCODE_BASIC_FILTER(min: UINT;
                                     mag: UINT;
                                     mip: UINT;
                                     bComparison: UINT): D3D11_FILTER; inline;


  function D3D11_ENCODE_ANISOTROPIC_FILTER(bComparison: UINT): D3D11_FILTER; inline;

  function D3D11_DECODE_MIN_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE; inline;

  function D3D11_DECODE_MAG_FILTER(d3d11Filter: UINT):D3D11_FILTER_TYPE; inline;

  function D3D11_DECODE_MIP_FILTER(d3d11Filter: UINT):D3D11_FILTER_TYPE; inline;

  function D3D11_DECODE_IS_COMPARISON_FILTER(d3d11Filter: UINT): Boolean; inline;

  function D3D11_DECODE_IS_ANISOTROPIC_FILTER(d3d11Filter: UINT): Boolean; inline;


  // Additional Prototypes for ALL interfaces

  // End of Additional Prototypes

implementation

const
  D3D11Lib = 'd3d11.dll';


function MAKE_D3D11_HRESULT(code: Word): HRESULT;
begin
  Result := MAKE_HRESULT(1,
                         _FACD3D11,
                         code);
end;


function MAKE_D3D11_STATUS(code: Word): HRESULT;
begin
  Result := MAKE_HRESULT(0,
                         _FACD3D11,
                         code);
end;


function D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS(): HRESULT;
begin
  Result := MAKE_D3D11_HRESULT(1);
end;


function D3D11_ERROR_FILE_NOT_FOUND(): HRESULT;
begin
  Result := MAKE_D3D11_HRESULT(2);
end;


function D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS(): HRESULT;
begin
  Result := MAKE_D3D11_HRESULT(3);
end;


function D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD(): HRESULT;
begin
  Result := MAKE_D3D11_HRESULT(4);
end;



function operator_equal(const l: D3D11_VIEWPORT;
                        const r: D3D11_VIEWPORT): Bool; inline;
begin
  Result := (l.TopLeftX = r.TopLeftX) and (l.TopLeftY = r.TopLeftY) and (l.Width = r.Width) and
      (l.Height = r.Height) and (l.MinDepth = r.MinDepth) and (l.MaxDepth = r.MaxDepth);
end;


function operator_notEqual(const l: D3D11_VIEWPORT;
                           const r: D3D11_VIEWPORT): Bool; inline;
begin
  Result := not operator_equal(l, r);
end;


function D3D11CalcSubresource(MipSlice: UINT;
                              ArraySlice: UINT;
                              MipLevels: UINT):UINT; inline;
begin
  Result := MipSlice + ArraySlice * MipLevels;
end;


function D3D11_ENCODE_BASIC_FILTER(min: UINT;
                                   mag: UINT;
                                   mip: UINT;
                                   bComparison: UINT): D3D11_FILTER;
var
  LFiltering: UINT;
begin
  if bComparison = 0 then
    LFiltering := D3D11_COMPARISON_FILTERING_BIT
  else
    LFiltering := 0;
  Result := D3D11_FILTER(
    LFiltering or
    (((min) and D3D11_FILTER_TYPE_MASK) shl D3D11_MIN_FILTER_SHIFT) or
    (((mag) and D3D11_FILTER_TYPE_MASK) shl D3D11_MAG_FILTER_SHIFT) or
    (((mip) and D3D11_FILTER_TYPE_MASK) shl D3D11_MIP_FILTER_SHIFT));
end;


function D3D11_ENCODE_ANISOTROPIC_FILTER(bComparison: UINT): D3D11_FILTER;
begin
  Result := D3D11_FILTER(D3D11_ANISOTROPIC_FILTERING_BIT or
            UINT(D3D11_ENCODE_BASIC_FILTER(UINT(D3D11_FILTER_TYPE_LINEAR),
            UINT(D3D11_FILTER_TYPE_LINEAR),
            UINT(D3D11_FILTER_TYPE_LINEAR),
            bComparison)));
end;


function D3D11_DECODE_MIN_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;
begin
  Result := D3D11_FILTER_TYPE((d3d11Filter shr D3D11_MIN_FILTER_SHIFT) and D3D11_FILTER_TYPE_MASK);
end;


function D3D11_DECODE_MAG_FILTER(d3d11Filter: UINT): D3D11_FILTER_TYPE;
begin
  Result := D3D11_FILTER_TYPE((d3d11Filter shr D3D11_MAG_FILTER_SHIFT) and D3D11_FILTER_TYPE_MASK);
end;


function D3D11_DECODE_MIP_FILTER(d3d11Filter: UINT):D3D11_FILTER_TYPE;
begin
  Result := D3D11_FILTER_TYPE((d3d11Filter shr D3D11_MIP_FILTER_SHIFT) and D3D11_FILTER_TYPE_MASK);
end;


function D3D11_DECODE_IS_COMPARISON_FILTER(d3d11Filter: UINT): Boolean;
begin
  Result := (d3d11Filter and D3D11_COMPARISON_FILTERING_BIT) <> 0;
end;


function D3D11_DECODE_IS_ANISOTROPIC_FILTER(d3d11Filter: UINT): Boolean;
begin
  Result := (Boolean(d3d11Filter and D3D11_ANISOTROPIC_FILTERING_BIT) and
            (D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MIN_FILTER(d3d11Filter)) and
            (D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MAG_FILTER(d3d11Filter)) and
            (D3D11_FILTER_TYPE_LINEAR = D3D11_DECODE_MIP_FILTER(d3d11Filter)));
end;


// Overloaded macro D3D_SET_OBJECT_NAME_N_A ====================================
procedure D3D_SET_OBJECT_NAME_N_A(pObject: ID3D11Device;
                                  Chars: UINT;
                                  pName: Pointer); inline;
begin
 pObject.SetPrivateData(WKPDID_D3DDebugObjectName,
                        Chars,
                        pName);
end;

procedure D3D_SET_OBJECT_NAME_N_A(pObject: ID3D11DeviceChild;
                                  Chars: UINT;
                                  pName: Pointer); inline;
begin
 pObject.SetPrivateData(WKPDID_D3DDebugObjectName,
                        Chars,
                        pName);
end;
// =============================================================================

// Overloaded macro D3D_SET_OBJECT_NAME_A ====================================
procedure D3D_SET_OBJECT_NAME_A(pObject: ID3D11Device;
                                pName: Pointer); inline;
begin
 D3D_SET_OBJECT_NAME_N_A(pObject,
                         length(string(pName)),
                         pName);
end;

procedure D3D_SET_OBJECT_NAME_A(pObject: ID3D11DeviceChild;
                                pName: Pointer); inline;
begin
 D3D_SET_OBJECT_NAME_N_A(pObject,
                         length(string(pName)),
                         pName);
end;


//

procedure D3D_SET_OBJECT_NAME_N_W(pObject: ID3D11Device;
                                  Chars: UINT;
                                  pName: Pointer); inline;
begin
 pObject.SetPrivateData(WKPDID_D3DDebugObjectName,
                        Chars * 2,
                        pName);
end;


procedure D3D_SET_OBJECT_NAME_W(pObject: ID3D11Device;
                                pName: Pointer); inline;
begin
 D3D_SET_OBJECT_NAME_N_A(pObject,
                         length(string(pName)),
                         pName);
end;

// =============================================================================


{D3D11_BOX}
constructor D3D11_BOX.Create(const o: D3D11_BOX);
begin
  Self := o;
end;


constructor D3D11_BOX.Create(aLeft: LONG;
                             aTop: LONG;
                             aFront: LONG;
                             aRight: LONG;
                             aBottom: LONG;
                             aBack: LONG);
begin
  left := aLeft;
  top := aTop;
  front := aFront;
  right := aRight;
  bottom := aBottom;
  back := aBack;
end;


class operator D3D11_BOX.Equal(const l: D3D11_BOX;
                               const r: D3D11_BOX): Boolean;
begin
  Result := (l.left = r.left) and (l.top = r.top) and (l.front = r.front) and
            (l.right = r.right) and (l.bottom = r.bottom) and (l.back = r.back);
end;


class operator D3D11_BOX.NotEqual(const l: D3D11_BOX;
                                  const r: D3D11_BOX): Boolean;
begin
  Result := Not (l = r);
end;


{D3D11_DEPTH_STENCIL_DESC}
constructor D3D11_DEPTH_STENCIL_DESC.Create(const o: D3D11_DEPTH_STENCIL_DESC);
begin
  Self := o;
end;


constructor D3D11_DEPTH_STENCIL_DESC.Create(default: boolean);
const
  defaultStencilOp: D3D11_DEPTH_STENCILOP_DESC = (StencilFailOp: D3D11_STENCIL_OP_KEEP;
  StencilDepthFailOp: D3D11_STENCIL_OP_KEEP;
  StencilPassOp: D3D11_STENCIL_OP_KEEP;
  StencilFunc: D3D11_COMPARISON_ALWAYS);

begin
  if default then
    begin
      DepthEnable := True;
      DepthWriteMask := D3D11_DEPTH_WRITE_MASK_ALL;
      DepthFunc := D3D11_COMPARISON_LESS;
      StencilEnable := False;
      StencilReadMask := D3D11_DEFAULT_STENCIL_READ_MASK;
      StencilWriteMask := D3D11_DEFAULT_STENCIL_WRITE_MASK;
      FrontFace := defaultStencilOp;
      BackFace := defaultStencilOp;
    end;
end;


constructor D3D11_DEPTH_STENCIL_DESC.Create(aDepthEnable: BOOL;
                                            aDepthWriteMask: D3D11_DEPTH_WRITE_MASK;
                                            aDepthFunc: D3D11_COMPARISON_FUNC;
                                            aStencilEnable: BOOL;
                                            aStencilReadMask: UINT8;
                                            aStencilWriteMask: UINT8;
                                            aFrontStencilFailOp: D3D11_STENCIL_OP;
                                            aFrontStencilDepthFailOp: D3D11_STENCIL_OP;
                                            aFrontStencilPassOp: D3D11_STENCIL_OP;
                                            aFrontStencilFunc: D3D11_COMPARISON_FUNC;
                                            aBackStencilFailOp: D3D11_STENCIL_OP;
                                            aBackStencilDepthFailOp: D3D11_STENCIL_OP;
                                            aBackStencilPassOp: D3D11_STENCIL_OP;
                                            aBackStencilFunc: D3D11_COMPARISON_FUNC);
begin
  DepthEnable := aDepthEnable;
  DepthWriteMask := aDepthWriteMask;
  DepthFunc := aDepthFunc;
  StencilEnable := aStencilEnable;
  StencilReadMask := aStencilReadMask;
  StencilWriteMask := aStencilWriteMask;
  FrontFace.StencilFailOp := aFrontStencilFailOp;
  FrontFace.StencilDepthFailOp := aFrontStencilDepthFailOp;
  FrontFace.StencilPassOp := aFrontStencilPassOp;
  FrontFace.StencilFunc := aFrontStencilFunc;
  BackFace.StencilFailOp := aBackStencilFailOp;
  BackFace.StencilDepthFailOp := aBackStencilDepthFailOp;
  BackFace.StencilPassOp := aBackStencilPassOp;
  BackFace.StencilFunc := aBackStencilFunc;
end;


{D3D11_BLEND_DESC}
constructor D3D11_BLEND_DESC.Create(Default: Boolean);
const
  defaultRenderTargetBlendDesc: D3D11_RENDER_TARGET_BLEND_DESC = (BlendEnable: False;
  SrcBlend: D3D11_BLEND_ONE;
  DestBlend: D3D11_BLEND_ZERO;
  BlendOp: D3D11_BLEND_OP_ADD;
  SrcBlendAlpha: D3D11_BLEND_ONE;
  DestBlendAlpha: D3D11_BLEND_ZERO;
  BlendOpAlpha: D3D11_BLEND_OP_ADD;
  RenderTargetWriteMask: UInt8(D3D11_COLOR_WRITE_ENABLE_ALL));

var
  i: Integer;

begin
  if Default then
    begin
      AlphaToCoverageEnable := False;
      IndependentBlendEnable := False;
    for i := 0 to D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT - 1 do
      RenderTarget[i] := defaultRenderTargetBlendDesc;
  end;
end;


constructor D3D11_BLEND_DESC.Create(const o: D3D11_BLEND_DESC);
begin
  Self := o;
end;


{D3D11_RASTERIZER_DESC}
constructor D3D11_RASTERIZER_DESC.Create(const o: D3D11_RASTERIZER_DESC);
begin
  Self := o;
end;


constructor D3D11_RASTERIZER_DESC.Create(Default: Boolean);
begin
  FillMode := D3D11_FILL_SOLID;
  CullMode := D3D11_CULL_BACK;
  FrontCounterClockwise := False;
  DepthBias := D3D11_DEFAULT_DEPTH_BIAS;
  DepthBiasClamp := D3D11_DEFAULT_DEPTH_BIAS_CLAMP;
  SlopeScaledDepthBias := D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS;
  DepthClipEnable := True;
  ScissorEnable := False;
  MultisampleEnable := False;
  AntialiasedLineEnable := False;
end;


constructor D3D11_RASTERIZER_DESC.Create(aFillMode: D3D11_FILL_MODE;
                                         aCullMode: D3D11_CULL_MODE;
                                         aFrontCounterClockwise: BOOL;
                                         aDepthBias: UINT32;
                                         aDepthBiasClamp: FLOAT;
                                         aSlopeScaledDepthBias: FLOAT;
                                         aDepthClipEnable: Bool;
                                         aScissorEnable: Bool;
                                         aMultisampleEnable: Bool;
                                         aAntialiasedLineEnable: Bool);
begin
  FillMode := aFillMode;
  CullMode := aCullMode;
  FrontCounterClockwise := aFrontCounterClockwise;
  DepthBias := aDepthBias;
  DepthBiasClamp := aDepthBiasClamp;
  SlopeScaledDepthBias := aSlopeScaledDepthBias;
  DepthClipEnable := aDepthClipEnable;
  ScissorEnable := aScissorEnable;
  MultisampleEnable := aMultisampleEnable;
  AntialiasedLineEnable := aAntialiasedLineEnable;
end;


{D3D11_BUFFER_DESC}
constructor D3D11_BUFFER_DESC.Create(const o: D3D11_BUFFER_DESC);
begin
  Self := o;
end;


constructor D3D11_BUFFER_DESC.Create(aByteWidth: UINT;
                                     aBindFlags: UINT;
                                     aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                                     aCpuaccessFlags: UINT = 0;
                                     aMiscFlags: UINT = 0;
                                     aStructureByteStride: UINT = 0);
begin
  ByteWidth := aByteWidth;
  Usage := aUsage;
  BindFlags := aBindFlags;
  CPUAccessFlags := aCpuaccessFlags;
  MiscFlags := aMiscFlags;
  StructureByteStride := aStructureByteStride;
end;


{D3D11_TEXTURE1D_DESC}
constructor D3D11_TEXTURE1D_DESC.Create(const o: D3D11_TEXTURE1D_DESC);
begin
  Self := o;
end;


constructor D3D11_TEXTURE1D_DESC.Create(aFormat: DXGI_FORMAT;
                                        aWidth: UINT;
                                        aArraySize: UINT = 1;
                                        aMipLevels: UINT = 0;
                                        aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                                        aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                                        aCpuaccessFlags: UINT = 0;
                                        aMiscFlags: UINT = 0);
begin
  Width := aWidth;
  MipLevels := aMipLevels;
  ArraySize := aArraySize;
  Format := aFormat;
  Usage := aUsage;
  BindFlags := aBindFlags;
  CPUAccessFlags := aCpuaccessFlags;
  MiscFlags := aMiscFlags;
end;


{D3D11_TEXTURE2D_DESC}
constructor D3D11_TEXTURE2D_DESC.Create(const o: D3D11_TEXTURE2D_DESC);
begin
  Self := o;
end;


constructor D3D11_TEXTURE2D_DESC.Create(aFormat: DXGI_FORMAT;
                                        aWidth: UINT;
                                        aHeight: UINT;
                                        aArraySize: UINT = 1;
                                        aMipLevels: UINT = 0;
                                        aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                                        aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                                        aCpuaccessFlags: UINT = 0;
                                        aSampleCount: UINT = 1;
                                        aSampleQuality: UINT = 0;
                                        aMiscFlags: UINT = 0);
begin
  Width := aWidth;
  Height := aHeight;
  MipLevels := aMipLevels;
  ArraySize := aArraySize;
  Format := aFormat;
  SampleDesc.Count := aSampleCount;
  SampleDesc.Quality := aSampleQuality;
  Usage := aUsage;
  BindFlags := aBindFlags;
  CPUAccessFlags := aCpuaccessFlags;
  MiscFlags := aMiscFlags;
end;


{D3D11_TEXTURE3D_DESC}
constructor D3D11_TEXTURE3D_DESC.Create(const o: D3D11_TEXTURE3D_DESC);
begin
  Self := o;
end;


constructor D3D11_TEXTURE3D_DESC.Create(aFormat: DXGI_FORMAT;
                                        aWidth: UINT;
                                        aHeight: UINT;
                                        aDepth: UINT;
                                        aMipLevels: UINT = 0;
                                        aBindFlags: UINT = UINT(D3D11_BIND_SHADER_RESOURCE);
                                        aUsage: D3D11_USAGE = D3D11_USAGE_DEFAULT;
                                        aCpuaccessFlags: UINT = 0;
                                        aMiscFlags: UINT = 0);
begin
  Width := aWidth;
  Height := aHeight;
  Depth := aDepth;
  MipLevels := aMipLevels;
  Format := aFormat;
  Usage := aUsage;
  BindFlags := aBindFlags;
  CPUAccessFlags := aCpuaccessFlags;
  MiscFlags := aMiscFlags;
end;


{D3D11_SHADER_RESOURCE_VIEW_DESC}
constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(const o: D3D11_SHADER_RESOURCE_VIEW_DESC);
begin
  Self := o;
end;


constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(aViewDimension: D3D11_SRV_DIMENSION;
                                                   aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                   aMostDetailedMip: UINT = 0;
                                                   aMipLevels : UINT = UINT(-1);
                                                   aFirstArraySlice: UINT = 0;
                                                   aArraySize : UINT = UINT(-1);
                                                   aFlags: UINT = 0);
begin
  Format := aFormat;
  ViewDimension := aViewDimension;

  case aViewDimension of
    D3D11_SRV_DIMENSION_BUFFER: begin
                                  Buffer.FirstElement := aMostDetailedMip;
                                  Buffer.NumElements := aMipLevels;
                                end;
    
    D3D11_SRV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MostDetailedMip := aMostDetailedMip;
                                     Texture1D.MipLevels := aMipLevels;
                                   end;
    
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MostDetailedMip := aMostDetailedMip;
                                          Texture1DArray.MipLevels := aMipLevels;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
    
    D3D11_SRV_DIMENSION_TEXTURE2D: begin
                                     Texture2D.MostDetailedMip := aMostDetailedMip;
                                     Texture2D.MipLevels := aMipLevels;
                                   end;

    D3D11_SRV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MostDetailedMip := aMostDetailedMip;
                                          Texture2DArray.MipLevels := aMipLevels;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                        end;
    
    D3D11_SRV_DIMENSION_TEXTURE2DMS: begin
                                       // Do nothing;
                                     end;
    
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;
    
    D3D11_SRV_DIMENSION_TEXTURE3D: begin
                                     Texture3D.MostDetailedMip := aMostDetailedMip;
                                     Texture3D.MipLevels := aMipLevels;
                                   end;
    
    D3D11_SRV_DIMENSION_TEXTURECUBE: begin
                                       TextureCube.MostDetailedMip := aMostDetailedMip;
                                       TextureCube.MipLevels := aMipLevels;
                                     end;
    
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY: begin
                                            TextureCubeArray.MostDetailedMip := aMostDetailedMip;
                                            TextureCubeArray.MipLevels := aMipLevels;
                                            TextureCubeArray.First2DArrayFace := aFirstArraySlice;
                                            TextureCubeArray.NumCubes := aArraySize;
                                          end;
    
    D3D11_SRV_DIMENSION_BUFFEREX: begin
                                    BufferEx.FirstElement := aMostDetailedMip;
                                    BufferEx.NumElements := aMipLevels;
                                    BufferEx.Flags := aFlags;
                                  end;
  end;
end;


constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(const aBuffer: ID3D11Buffer;
                                                   aFormat: DXGI_FORMAT;
                                                   aFirstElement: UINT;
                                                   aNumElements: UINT;
                                                   aFlags: UINT = 0);
begin
  Format := aFormat;
  ViewDimension := D3D11_SRV_DIMENSION_BUFFEREX;
  BufferEx.FirstElement := aFirstElement;
  BufferEx.NumElements := aNumElements;
  BufferEx.Flags := aFlags;
end;


constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(const pTex1D: ID3D11Texture1D;
                                                   aViewDimension: D3D11_SRV_DIMENSION;
                                                   aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                   aMostDetailedMip: UINT = 0;
                                                   aMipLevels: UINT = UINT(-1);
                                                   aFirstArraySlice: UINT = 0;
                                                   aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE1D_DESC;

begin
  ViewDimension := aViewDimension;
  if ((DXGI_FORMAT_UNKNOWN = aFormat) or (UINT(-1) = aMipLevels) or
      ((UINT(-1) = aArraySize) and (D3D11_SRV_DIMENSION_TEXTURE1DARRAY = aViewDimension))) then
  begin
      pTex1D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat)then
        format := TexDesc.Format;
      if (UINT(-1) = aMipLevels) then
        aMipLevels := TexDesc.MipLevels - aMostDetailedMip;
      if (UINT(-1) = aArraySize) then
         aArraySize := TexDesc.ArraySize - aFirstArraySlice;
  end;

  Format := aFormat;

  case aViewDimension of
    D3D11_SRV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MostDetailedMip := aMostDetailedMip;
                                     Texture1D.MipLevels := aMipLevels;
                                   end;
    
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MostDetailedMip := aMostDetailedMip;
                                          Texture1DArray.MipLevels := aMipLevels;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
  end;
end;


constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(const pTex2D: ID3D11Texture2D;
                                                   aViewDimension: D3D11_SRV_DIMENSION;
                                                   aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                   aMostDetailedMip: UINT = 0;
                                                   aMipLevels: UINT = UINT(-1);
                                                   aFirstArraySlice: UINT = 0;
                                                   aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE2D_DESC;

begin
  ViewDimension := aViewDimension;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      ((UINT(-1) = aMipLevels) and
          (D3D11_SRV_DIMENSION_TEXTURE2DMS <> aViewDimension) and
          (D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY <> aViewDimension)) or
      ((UINT(-1) = aArraySize) and
          ((D3D11_SRV_DIMENSION_TEXTURE2DARRAY = aViewDimension) or
          (D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = aViewDimension) or
          (D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = aViewDimension)))) then
  begin
    pTex2D.GetDesc(TexDesc);
    if (DXGI_FORMAT_UNKNOWN = aFormat) then
      aFormat := TexDesc.Format;
    if (UINT(-1) = aMipLevels) then
      aMipLevels := TexDesc.MipLevels - aMostDetailedMip;
    if (UINT(-1) = aArraySize) then
      begin
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
        if (D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = aViewDimension) then
          aArraySize := aArraySize div 6;
      end;
  end;

  Format := aFormat;

  case viewDimension of
    D3D11_SRV_DIMENSION_TEXTURE2D: begin
                                     Texture2D.MostDetailedMip := aMostDetailedMip;
                                     Texture2D.MipLevels := aMipLevels;
                                   end;
    
    D3D11_SRV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MostDetailedMip := aMostDetailedMip;
                                          Texture2DArray.MipLevels := aMipLevels;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                        end;
    
    D3D11_SRV_DIMENSION_TEXTURE2DMS: begin
                                       // Nothing todo
                                     end;
    
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;

    D3D11_SRV_DIMENSION_TEXTURECUBE: begin
                                       TextureCube.MostDetailedMip := aMostDetailedMip;
                                       TextureCube.MipLevels := aMipLevels;
                                     end;
    
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY: begin
                                            TextureCubeArray.MostDetailedMip := aMostDetailedMip;
                                            TextureCubeArray.MipLevels := aMipLevels;
                                            TextureCubeArray.First2DArrayFace := aFirstArraySlice;
                                            TextureCubeArray.NumCubes := aArraySize;
                                          end;
  end;
end;


constructor D3D11_SHADER_RESOURCE_VIEW_DESC.Create(const pTex3D: ID3D11Texture3D;
                                                   aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                   aMostDetailedMip: UINT = 0;
                                                   aMipLevels: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE3D_DESC;

begin
  ViewDimension := D3D11_SRV_DIMENSION_TEXTURE3D;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or (UINT(-1) = aMipLevels)) then
    begin
      pTex3D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aMipLevels) then
        aMipLevels := TexDesc.MipLevels - aMostDetailedMip;
    end;

  Format := aFormat;
  Texture3D.MostDetailedMip := aMostDetailedMip;
  Texture3D.MipLevels := aMipLevels;
end;


{D3D11_RENDER_TARGET_VIEW_DESC}
constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(
  const o: D3D11_RENDER_TARGET_VIEW_DESC);
begin
  Self := o;
end;

constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(aViewDimension: D3D11_RTV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1));
begin
  Format := aFormat;
  ViewDimension := aViewDimension;

  case aViewDimension of
  D3D11_RTV_DIMENSION_BUFFER: begin
                                Buffer.FirstElement := aMipSlice;
                                Buffer.NumElements := aFirstArraySlice;
                               end;

    D3D11_RTV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MipSlice := aMipSlice;
                                   end;

    D3D11_RTV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
    D3D11_RTV_DIMENSION_TEXTURE2D: begin
                                     Texture2D.MipSlice := aMipSlice;
                                   end;

    D3D11_RTV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                        end;

    D3D11_RTV_DIMENSION_TEXTURE2DMS: begin
                                       // Nothing todo.
                                     end;

    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;

    D3D11_RTV_DIMENSION_TEXTURE3D: begin
                                     Texture3D.MipSlice := aMipSlice;
                                     Texture3D.FirstWSlice := aFirstArraySlice;
                                     Texture3D.WSize := aArraySize;
                                   end;
  end;
end;


constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(const aBuffer: ID3D11Buffer;
                                                 aFormat: DXGI_FORMAT;
                                                 aFirstElement: UINT;
                                                 aNumElements: UINT);
begin
  Format := aFormat;
  ViewDimension := D3D11_RTV_DIMENSION_BUFFER;
  Buffer.FirstElement := aFirstElement;
  Buffer.NumElements := aNumElements;
end;

constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(const pTex1D: ID3D11Texture1D;
                                                 aViewDimension: D3D11_RTV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE1D_DESC;

begin
  ViewDimension := aViewDimension;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      ((UINT(-1) = aArraySize) and
      (D3D11_RTV_DIMENSION_TEXTURE1DARRAY = aViewDimension))) then
    begin
      pTex1D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case viewDimension of
    D3D11_RTV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MipSlice := aMipSlice;
                                   end;

    D3D11_RTV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
  end; // case
end;


constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(const pTex2D: ID3D11Texture2D;
                                                 aViewDimension: D3D11_RTV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE2D_DESC;

begin
  ViewDimension := aViewDimension;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
     ((UINT(-1) = aArraySize) and
     ((D3D11_RTV_DIMENSION_TEXTURE2DARRAY = aViewDimension) or
     (D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = aViewDimension)))) then
    begin
      pTex2D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case aViewDimension of
    D3D11_RTV_DIMENSION_TEXTURE2D: begin
                                     Texture2D.MipSlice := aMipSlice;
                                   end;

    D3D11_RTV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                         end;

    D3D11_RTV_DIMENSION_TEXTURE2DMS: begin
                                       // Nothing  todo.
                                     end;

    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;
  end;
end;


constructor D3D11_RENDER_TARGET_VIEW_DESC.Create(const pTex3D: ID3D11Texture3D;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstWSlice: UINT = 0;
                                                 awSize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE3D_DESC;

begin
  ViewDimension := D3D11_RTV_DIMENSION_TEXTURE3D;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
     (UINT(-1) = awSize)) then
    begin
      pTex3D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = awSize) then
        awSize := TexDesc.Depth - aFirstWSlice;
    end;

  Format := aFormat;

  Texture3D.MipSlice := aMipSlice;
  Texture3D.FirstWSlice := aFirstWSlice;
  Texture3D.WSize := awSize;
end;


{ D3D11_VIEWPORT}
constructor D3D11_VIEWPORT.Create(const o: D3D11_VIEWPORT);
begin
  Self := o;
end;


constructor D3D11_VIEWPORT.Create(aTopLeftX: FLOAT;
                                  aTopLeftY: FLOAT;
                                  aWidth: FLOAT;
                                  aHeight: FLOAT;
                                  aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                                  aMaxDepth: FLOAT = D3D11_MAX_DEPTH);
begin
  TopLeftX := aTopLeftX;
  TopLeftY := aTopLeftY;
  Width := aWidth;
  Height := aHeight;
  MinDepth := aMinDepth;
  MaxDepth := aMaxDepth;
end;


constructor D3D11_VIEWPORT.Create(const buff: ID3D11Buffer;
                                  pRTView: ID3D11RenderTargetView;
                                  aTopLeftX: FLOAT = 0.0;
                                  aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                                  aMaxDepth: FLOAT = D3D11_MAX_DEPTH);
var
  RTVDesc: D3D11_RENDER_TARGET_VIEW_DESC;
  NumElements: UINT;
begin

  pRTView.GetDesc(RTVDesc);
  NumElements := 0;
  case RTVDesc.ViewDimension of
    D3D11_RTV_DIMENSION_BUFFER:
      NumElements := RTVDesc.Buffer.NumElements;
  end;
  TopLeftX := aTopLeftX;
  TopLeftY := 0.0;
  Width := NumElements - aTopLeftX;
  Height := 1.0;
  MinDepth := aMinDepth;
  MaxDepth := aMaxDepth;
end;


constructor D3D11_VIEWPORT.Create(const pTex1D: ID3D11Texture1D;
                                  pRTView: ID3D11RenderTargetView;
                                  aTopLeftX: FLOAT;
                                  aTinDepth: FLOAT;
                                  aTaxDepth: FLOAT);
var
  TexDesc: D3D11_TEXTURE1D_DESC;
  RTVDesc: D3D11_RENDER_TARGET_VIEW_DESC;
  MipSlice: UINT;
  SubResourceWidth: UINT;

begin
  pTex1D.GetDesc(TexDesc);
  pRTView.GetDesc(RTVDesc);
  MipSlice := 0;

  case RTVDesc.ViewDimension of
    D3D11_RTV_DIMENSION_TEXTURE1D: MipSlice := RTVDesc.Texture1D.MipSlice;
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY: MipSlice := RTVDesc.Texture1DArray.MipSlice;
  end;

  SubResourceWidth := TexDesc.Width div (UINT(1) shl MipSlice);
  TopLeftX := aTopLeftX;
  TopLeftY := 0.0;

  if SubResourceWidth > 0 then //Width := (SubResourceWidth ? SubResourceWidth : 1) - topLeftX
    Width := SubResourceWidth - topLeftX
  else
    Width := 1 - topLeftX;

  Height := 1.0;
  MinDepth := MinDepth;
  MaxDepth := MaxDepth;

end;


constructor D3D11_VIEWPORT.Create(const pTex2D: ID3D11Texture2D;
                                  pRTView: ID3D11RenderTargetView;
                                  aTopLeftX: FLOAT = 0.0;
                                  aTopLeftY: FLOAT = 0.0;
                                  aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                                  aMaxDepth: FLOAT = D3D11_MAX_DEPTH);
var
  TexDesc: D3D11_TEXTURE2D_DESC;
  RTVDesc: D3D11_RENDER_TARGET_VIEW_DESC;
  MipSlice: UINT;
  SubResourceWidth,
  SubResourceHeight: UINT;

begin
  pTex2D.GetDesc(TexDesc);
  pRTView.GetDesc(RTVDesc);
  MipSlice := 0;

  case RTVDesc.ViewDimension of
    D3D11_RTV_DIMENSION_TEXTURE2D: begin
                                     MipSlice := RTVDesc.Texture2D.MipSlice;
                                   end;

    D3D11_RTV_DIMENSION_TEXTURE2DARRAY: begin
                                          MipSlice := RTVDesc.Texture2DArray.MipSlice;
                                        end;

    D3D11_RTV_DIMENSION_TEXTURE2DMS: begin
                                       // Nothing todo.
                                     end;

    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            // Nothing todo.
                                          end;
  end;

  SubResourceWidth := TexDesc.Width div (UINT(1) shl MipSlice);
  SubResourceHeight := TexDesc.Height div (UINT(1) shl MipSlice);
  TopLeftX := aTopLeftX;
  TopLeftY := aTopLeftY;

  if SubResourceWidth = 0 then // Width := (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
    Width := 1 - topLeftX
  else
    Width := SubResourceWidth - topLeftX;

  if SubResourceHeight = 0 then // Height := (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
    Height := 1 - topLeftY
  else
    Height := SubResourceHeight - topLeftY;

  MinDepth := aMinDepth;
  MaxDepth := aMaxDepth;

end;


constructor D3D11_VIEWPORT.Create(const pTex3D: ID3D11Texture3D;
                                  pRTView: ID3D11RenderTargetView;
                                  aTopLeftX: FLOAT = 0.0;
                                  aTopLeftY: FLOAT = 0.0;
                                  aMinDepth: FLOAT = D3D11_MIN_DEPTH;
                                  aMaxDepth: FLOAT = D3D11_MAX_DEPTH);
var
  TexDesc: D3D11_TEXTURE3D_DESC;
  RTVDesc: D3D11_RENDER_TARGET_VIEW_DESC;
  MipSlice: UINT;
  SubResourceWidth,
  SubResourceHeight: UINT;

begin
  pTex3D.GetDesc(TexDesc);
  pRTView.GetDesc(RTVDesc);
  MipSlice := 0;

  case RTVDesc.ViewDimension of
    D3D11_RTV_DIMENSION_TEXTURE3D: begin
                                     MipSlice := RTVDesc.Texture3D.MipSlice;
                                   end;
  end;

  SubResourceWidth := TexDesc.Width div (UINT(1) shl MipSlice);
  SubResourceHeight := TexDesc.Height div (UINT(1) shl MipSlice);
  TopLeftX := aTopLeftX;
  TopLeftY := aTopLeftY;

  if SubResourceWidth = 0 then //Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
    Width := 1 - topLeftX
  else
    Width := SubResourceWidth - topLeftX;

  if SubResourceHeight = 0 then //Height = (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
    Height := 1 - topLeftY
  else
    Height := SubResourceHeight - topLeftY;

  MinDepth := aMinDepth;
  MaxDepth := aMaxDepth;
end;

{ D3D11_DEPTH_STENCIL_VIEW_DESC}

constructor D3D11_DEPTH_STENCIL_VIEW_DESC.Create(const o: D3D11_DEPTH_STENCIL_VIEW_DESC);
begin
  Self := o;
end;


constructor D3D11_DEPTH_STENCIL_VIEW_DESC.Create(aViewDimension: D3D11_DSV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1);
                                                 aFlags: UINT = 0);
begin
  Format := aFormat;
  ViewDimension := aViewDimension;
  Flags := aFlags;

  case aViewDimension of
    D3D11_DSV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MipSlice := aMipSlice;
                                   end;

    D3D11_DSV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;

    D3D11_DSV_DIMENSION_TEXTURE2D: begin
                                     Texture2D.MipSlice := aMipSlice;
                                   end;

    D3D11_DSV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                         end;

    D3D11_DSV_DIMENSION_TEXTURE2DMS: begin
                                       // Nothing todo.
                                     end;

    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;
  end;
end;


constructor D3D11_DEPTH_STENCIL_VIEW_DESC.Create(const pTex1D: ID3D11Texture1D;
                                                 aViewDimension: D3D11_DSV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1);
                                                 aFlags: UINT = 0);
var
  TexDesc: D3D11_TEXTURE1D_DESC;

begin
  ViewDimension := aViewDimension;
  Flags := aFlags;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
     ((UINT(-1) = aArraySize) and (D3D11_DSV_DIMENSION_TEXTURE1DARRAY = aViewDimension))) then
    begin
      pTex1D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case aViewDimension of
    D3D11_DSV_DIMENSION_TEXTURE1D: begin
                                     Texture1D.MipSlice := aMipSlice;
                                   end;

    D3D11_DSV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
  end;
end;


constructor D3D11_DEPTH_STENCIL_VIEW_DESC.Create(const pTex2D: ID3D11Texture2D;
                                                 aViewDimension: D3D11_DSV_DIMENSION;
                                                 aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                 aMipSlice: UINT = 0;
                                                 aFirstArraySlice: UINT = 0;
                                                 aArraySize: UINT = UINT(-1);
                                                 aFlags: UINT = 0);
var
  TexDesc: D3D11_TEXTURE2D_DESC;

begin
  ViewDimension := aViewDimension;
  Flags := aFlags;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      ((UINT(-1) = aArraySize) and
          ((D3D11_DSV_DIMENSION_TEXTURE2DARRAY = aViewDimension) or
          (D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = aViewDimension)))) then
    begin
      pTex2D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case aViewDimension of
    D3D11_DSV_DIMENSION_TEXTURE2D: Texture2D.MipSlice := aMipSlice;
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                         end;

    D3D11_DSV_DIMENSION_TEXTURE2DMS:; // Skip

    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY: begin
                                            Texture2DMSArray.FirstArraySlice := aFirstArraySlice;
                                            Texture2DMSArray.ArraySize := aArraySize;
                                          end;
  end; //case
end;

{ D3D11_UNORDERED_ACCESS_VIEW_DESC}

constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(const o: D3D11_UNORDERED_ACCESS_VIEW_DESC);
begin
  Self := o;
end;


constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(aViewDimension: D3D11_UAV_DIMENSION;
                                                    aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                    aMipSlice: UINT = 0;
                                                    aFirstArraySlice: UINT = 0;
                                                    aArraySize: UINT = UINT(-1);
                                                    aFlags: UINT = 0);
begin
  Format := aFormat;
  ViewDimension := aViewDimension;

  case viewDimension of
    D3D11_UAV_DIMENSION_BUFFER: begin
                                  Buffer.FirstElement := aMipSlice;
                                  Buffer.NumElements := aFirstArraySlice;
                                  Buffer.Flags := aFlags;
                                end;

    D3D11_UAV_DIMENSION_TEXTURE1D: Texture1D.MipSlice := aMipSlice;

    D3D11_UAV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end
                                                       ;
    D3D11_UAV_DIMENSION_TEXTURE2D: Texture2D.MipSlice := aMipSlice;

    D3D11_UAV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                        end;

    D3D11_UAV_DIMENSION_TEXTURE3D: begin
                                     Texture3D.MipSlice := aMipSlice;
                                     Texture3D.FirstWSlice := aFirstArraySlice;
                                     Texture3D.WSize := aArraySize;
                                   end;
  end;
end;


constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(const aBuffer: ID3D11Buffer;
                                                    aFormat: DXGI_FORMAT;
                                                    aFirstElement: UINT;
                                                    aNumElements: UINT;
                                                    aFlags: UINT = 0);
begin
  Format := aFormat;
  ViewDimension := D3D11_UAV_DIMENSION_BUFFER;
  Buffer.FirstElement := aFirstElement;
  Buffer.NumElements := aNumElements;
  Buffer.Flags := aFlags;
end;


constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(const pTex1D: ID3D11Texture1D;
                                                    aViewDimension: D3D11_UAV_DIMENSION;
                                                    aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                    aMipSlice: UINT = 0;
                                                    aFirstArraySlice: UINT = 0;
                                                    aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE1D_DESC;

begin
  ViewDimension := aViewDimension;
  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      ((UINT(-1) = aArraySize) and
      (D3D11_UAV_DIMENSION_TEXTURE1DARRAY = aViewDimension))) then
    begin
      pTex1D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = format) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case aViewDimension of
    D3D11_UAV_DIMENSION_TEXTURE1D: Texture1D.MipSlice := aMipSlice;

    D3D11_UAV_DIMENSION_TEXTURE1DARRAY: begin
                                          Texture1DArray.MipSlice := aMipSlice;
                                          Texture1DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture1DArray.ArraySize := aArraySize;
                                        end;
  end; // case
end;


constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(const pTex2D: ID3D11Texture2D;
                                                    aViewDimension: D3D11_UAV_DIMENSION;
                                                    aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                    aMipSlice : UINT = 0;
                                                    aFirstArraySlice: UINT = 0;
                                                    aArraySize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE2D_DESC;

begin
  ViewDimension := aViewDimension;
  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      ((UINT(-1) = aArraySize) and
      (D3D11_UAV_DIMENSION_TEXTURE2DARRAY = aViewDimension))) then
    begin
      pTex2D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = aArraySize) then
        aArraySize := TexDesc.ArraySize - aFirstArraySlice;
    end;

  Format := aFormat;

  case aViewDimension of
    D3D11_UAV_DIMENSION_TEXTURE2D: Texture2D.MipSlice := aMipSlice;

    D3D11_UAV_DIMENSION_TEXTURE2DARRAY: begin
                                          Texture2DArray.MipSlice := aMipSlice;
                                          Texture2DArray.FirstArraySlice := aFirstArraySlice;
                                          Texture2DArray.ArraySize := aArraySize;
                                        end;
  end;
end;


constructor D3D11_UNORDERED_ACCESS_VIEW_DESC.Create(const pTex3D: ID3D11Texture3D;
                                                    aFormat: DXGI_FORMAT = DXGI_FORMAT_UNKNOWN;
                                                    aMipSlice : UINT = 0;
                                                    aFirstWSlice: UINT = 0;
                                                    awSize: UINT = UINT(-1));
var
  TexDesc: D3D11_TEXTURE3D_DESC;

begin
  ViewDimension := D3D11_UAV_DIMENSION_TEXTURE3D;

  if ((DXGI_FORMAT_UNKNOWN = aFormat) or
      (UINT(-1) = awSize)) then
    begin
      pTex3D.GetDesc(TexDesc);
      if (DXGI_FORMAT_UNKNOWN = aFormat) then
        aFormat := TexDesc.Format;
      if (UINT(-1) = awSize) then
        awSize := TexDesc.Depth - aFirstWSlice;
    end;

  Format := aFormat;
  Texture3D.MipSlice := aMipSlice;
  Texture3D.FirstWSlice := aFirstWSlice;
  Texture3D.WSize := awSize;
end;


{ D3D11_SAMPLER_DESC}

constructor D3D11_SAMPLER_DESC.Create(const o: D3D11_SAMPLER_DESC);
begin
  Self := o;
end;


constructor D3D11_SAMPLER_DESC.Create(isDefault: Boolean);
begin
  Filter := D3D11_FILTER_MIN_MAG_MIP_LINEAR;
  AddressU := D3D11_TEXTURE_ADDRESS_CLAMP;
  AddressV := D3D11_TEXTURE_ADDRESS_CLAMP;
  AddressW := D3D11_TEXTURE_ADDRESS_CLAMP;
  MipLODBias := 0;
  MaxAnisotropy := 1;
  ComparisonFunc := D3D11_COMPARISON_NEVER;
  BorderColor[0] := 1.0;
  BorderColor[1] := 1.0;
  BorderColor[2] := 1.0;
  BorderColor[3] := 1.0;
  MinLOD := -3.402823466e+38; // negative FLT_MAX
  MaxLOD := 3.402823466e+38;  // positive FLT_MAX
end;


constructor D3D11_SAMPLER_DESC.Create(aFilter: D3D11_FILTER;
                                      aAddressU,
                                      aAddressV,
                                      aAddressW: D3D11_TEXTURE_ADDRESS_MODE;
                                      aMipLODBias: FLOAT;
                                      aMaxAnisotropy: UINT;
                                      aComparisonFunc: D3D11_COMPARISON_FUNC;
                                      const aBorderColor: array of FLOAT;
                                      aMinLOD: FLOAT;
                                      aMaxLOD: FLOAT);
type
  TcolorArray = array [0..3] of FLOAT;

const
  defaultColor: TColorArray = (1.0,
                               1.0,
                               1.0,
                               1.0);

begin
  Filter := aFilter;
  AddressU := aAddressU;
  AddressV := aAddressV;
  AddressW := aAddressW;
  MipLODBias := aMipLODBias;
  MaxAnisotropy := aMaxAnisotropy;
  ComparisonFunc := aComparisonFunc;

  if (@aBorderColor = nil) then
    begin
      BorderColor[0] := aBorderColor[0];
      BorderColor[1] := aBorderColor[1];
      BorderColor[2] := aBorderColor[2];
      BorderColor[3] := aBorderColor[3];
    end
  else
    begin
      BorderColor[0] := defaultColor[0];
      BorderColor[1] := defaultColor[1];
      BorderColor[2] := defaultColor[2];
      BorderColor[3] := defaultColor[3];
    end;

  MinLOD := aMinLOD;
  MaxLOD := aMaxLOD;
end;


{ D3D11_QUERY_DESC}

constructor D3D11_QUERY_DESC.create(const o: D3D11_QUERY_DESC);
begin
  Self := o;
end;


constructor D3D11_QUERY_DESC.create(aQuery: D3D11_QUERY;
                                    aMiscFlags: UINT);
begin
  Query := aQuery;
  MiscFlags := aMiscFlags;
end;


{ D3D11_COUNTER_DESC}

constructor D3D11_COUNTER_DESC.Create(const o: D3D11_COUNTER_DESC);
begin
  Self := o;
end;

constructor D3D11_COUNTER_DESC.Create(aCounter: D3D11_COUNTER;
                                      aMiscFlags: UINT);
begin
  Counter := aCounter;
  MiscFlags := aMiscFlags;
end;


// D3D11_VIDEO_PROCESSOR_COLOR_SPACE
function D3D11_VIDEO_PROCESSOR_COLOR_SPACE.GetBits(const aIndex: Integer): Integer;
begin
  Result := GetDWordBits(Flags,
                         aIndex);
end;


procedure D3D11_VIDEO_PROCESSOR_COLOR_SPACE.SetBits(const aIndex: Integer;
                                                    const aValue: Integer);
begin
  SetDWordBits(Flags,
               aIndex,
               aValue);
end;
// -----------------------------------------------------------------------------

// D3D11_AUTHENTICATED_PROTECTION_FLAGS
function STRUCT_D3D11_AUTHENTICATED_PROTECTION_FLAGS.GetBits(const aIndex: Integer): Integer;
begin
  Result := GetDWordBits(Flags,
                         aIndex);
end;


procedure STRUCT_D3D11_AUTHENTICATED_PROTECTION_FLAGS.SetBits(const aIndex: Integer;
                                                              const aValue: Integer);
begin
  SetDWordBits(Flags,
               aIndex,
               aValue);
end;
// -----------------------------------------------------------------------------



{$WARN SYMBOL_PLATFORM OFF}

function D3D11CreateDevice; external D3D11Lib name 'D3D11CreateDevice' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function D3D11CreateDeviceAndSwapChain; external D3D11Lib name 'D3D11CreateDeviceAndSwapChain' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};

{$WARN SYMBOL_PLATFORM ON}

  // Implement Additional Prototypes here.

end.
