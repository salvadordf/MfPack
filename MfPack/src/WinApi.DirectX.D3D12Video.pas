// FactoryX
//
// Copyright: © FactoryX. All rights reserved.
//
// Project: MfPack - Media Foundation
// Project location: https://sourceforge.net/projects/MfPack
//                   https://github.com/FactoryXCode/MfPack
// Module: WinApi.DirectX.D3D12Video.pas
// Kind: Pascal / Delphi unit
// Release date: 13-08-2022
// Language: ENU
//
// Revision Version: 3.1.6
// Description: -
//
// Organisation: FactoryX
// Initiator(s): Tony (maXcomX), Peter (OzShips)
// Contributor(s): Tony (maXcomX).
//
//------------------------------------------------------------------------------
// CHANGE LOG
// Date       Person              Reason
// ---------- ------------------- ----------------------------------------------
// 30/01/2024 All                 Morrissey release  SDK 10.0.22621.0 (Windows 11)
//------------------------------------------------------------------------------
//
// Remarks: Embarcadero's <= Delphi 10.4 D3D12 is outdated!
//
// Related objects: -
// Related projects: MfPackX316
// Known Issues: -
//
// Compiler version: 23 up to 35
// SDK version: 10.0.22621.0
//
// Todo: -
//
//==============================================================================
// Source: D3D12Video.h
//
// Copyright (c) Microsoft Corporation. Licensed under the MIT license.
//==============================================================================
//
// LICENSE
//
// The contents of this file are subject to the Mozilla Public License
// Version 2.0 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// https://www.mozilla.org/en-US/MPL/2.0/
//
// Software distributed under the License is distributed on an "AS IS"
// basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
// License for the specific language governing rights and limitations
// under the License.
//
// Non commercial users may distribute this sourcecode provided that this
// header is included in full at the top of the file.
// Commercial users are not allowed to distribute this sourcecode as part of
// their product.
//
//==============================================================================
unit WinApi.DirectX.D3D12Video;

interface

  {$HPPEMIT '#include "D3D12Video.h"'}
  {$HPPEMIT '#include "DXGIFormat.h"'}
  {$HPPEMIT '#include "DXGICommon.h"'}
  {$HPPEMIT '#include "D3D12.h"'}
  {$HPPEMIT '#include "D3DCommon.h"'}

uses

  {WinApi}
  WinApi.Windows,
  WinApi.WinApiTypes,
  {System}
  System.SysUtils,
  {DirectX}
  WinApi.DirectX.DXGIFormat,
  WinApi.DirectX.DXGICommon,
  WinApi.DirectX.D3D12,
  WinApi.DirectX.D3DCommon;


type

  PD3D12_VIDEO_FIELD_TYPE = ^D3D12_VIDEO_FIELD_TYPE;
  D3D12_VIDEO_FIELD_TYPE = (
    D3D12_VIDEO_FIELD_TYPE_NONE                          = 0,
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST    = 1,
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2
  );
  {$EXTERNALSYM D3D12_VIDEO_FIELD_TYPE}

  PD3D12_VIDEO_FRAME_STEREO_FORMAT = ^D3D12_VIDEO_FRAME_STEREO_FORMAT;
  D3D12_VIDEO_FRAME_STEREO_FORMAT = (
    D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE       = 0,
    D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO       = 1,
    D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2,
    D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL   = 3,
    D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE   = 4
  );
  {$EXTERNALSYM D3D12_VIDEO_FRAME_STEREO_FORMAT}


  PDD3D12_VIDEO_FORMAT = ^D3D12_VIDEO_FORMAT;
  D3D12_VIDEO_FORMAT = record
    Format: DXGI_FORMAT;
    ColorSpace: DXGI_COLOR_SPACE_TYPE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_FORMAT}


  PD3D12_VIDEO_SAMPLE = ^D3D12_VIDEO_SAMPLE;
  D3D12_VIDEO_SAMPLE = record
    Width: UINT;
    Height: UINT;
    Format: D3D12_VIDEO_FORMAT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_SAMPLE}


  PD3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = ^D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
  D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE = (
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE        = 0,
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE}


  PD3D12_FEATURE_VIDEO = ^D3D12_FEATURE_VIDEO;
  D3D12_FEATURE_VIDEO = (
    D3D12_FEATURE_VIDEO_DECODE_SUPPORT                         = 0,
    D3D12_FEATURE_VIDEO_DECODE_PROFILES                        = 1,
    D3D12_FEATURE_VIDEO_DECODE_FORMATS                         = 2,
    D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT              = 3,
    D3D12_FEATURE_VIDEO_PROCESS_SUPPORT                        = 5,
    D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS              = 6,
    D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO                 = 7,
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE                      = 8,
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE                         = 9,
    D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT                   = 10,
    D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT                    = 11,
    D3D12_FEATURE_VIDEO_ARCHITECTURE                           = 17,
    D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM                       = 18,
    D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT                   = 19,
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR                       = 20,
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE                  = 21,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT                = 22,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS                     = 23,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT      = 24,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS           = 25,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT              = 26,
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE                 = 27,
    D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES             = 28,
    D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES            = 29,
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES   = 30,
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1                     = 31,
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1                        = 32,
    D3D12_FEATURE_VIDEO_ENCODER_CODEC                          = 33,
    D3D12_FEATURE_VIDEO_ENCODER_PROFILE_LEVEL                  = 34,
    D3D12_FEATURE_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = 35,
    D3D12_FEATURE_VIDEO_ENCODER_OUTPUT_RESOLUTION              = 36,
    D3D12_FEATURE_VIDEO_ENCODER_INPUT_FORMAT                   = 37,
    D3D12_FEATURE_VIDEO_ENCODER_RATE_CONTROL_MODE              = 38,
    D3D12_FEATURE_VIDEO_ENCODER_INTRA_REFRESH_MODE             = 39,
    D3D12_FEATURE_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE    = 40,
    D3D12_FEATURE_VIDEO_ENCODER_HEAP_SIZE                      = 41,
    D3D12_FEATURE_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT    = 42,
    D3D12_FEATURE_VIDEO_ENCODER_SUPPORT                        = 43,
    D3D12_FEATURE_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT  = 44,
    D3D12_FEATURE_VIDEO_ENCODER_RESOURCE_REQUIREMENTS          = 45
  );
  {$EXTERNALSYM D3D12_FEATURE_VIDEO}


  PD3D12_BITSTREAM_ENCRYPTION_TYPE = ^D3D12_BITSTREAM_ENCRYPTION_TYPE;
  D3D12_BITSTREAM_ENCRYPTION_TYPE = (
    D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0
  );
  {$EXTERNALSYM D3D12_BITSTREAM_ENCRYPTION_TYPE}

  PD3D12_VIDEO_DECODE_CONFIGURATION = ^D3D12_VIDEO_DECODE_CONFIGURATION;
  D3D12_VIDEO_DECODE_CONFIGURATION = record
    DecodeProfile: TGUID;
    BitstreamEncryption: D3D12_BITSTREAM_ENCRYPTION_TYPE;
    InterlaceType: D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION}


  PD3D12_VIDEO_DECODER_DESC = ^D3D12_VIDEO_DECODER_DESC;
  D3D12_VIDEO_DECODER_DESC = record
    NodeMask: UINT;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODER_DESC}


  PD3D12_VIDEO_DECODER_HEAP_DESC = ^D3D12_VIDEO_DECODER_HEAP_DESC;
  D3D12_VIDEO_DECODER_HEAP_DESC = record
    NodeMask: UINT;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
    DecodeWidth: UINT;
    DecodeHeight: UINT;
    Format: DXGI_FORMAT;
    FrameRate: DXGI_RATIONAL;
    BitRate: UINT;
    MaxDecodePictureBufferCount: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODER_HEAP_DESC}


  PD3D12_VIDEO_SIZE_RANGE = ^D3D12_VIDEO_SIZE_RANGE;
  D3D12_VIDEO_SIZE_RANGE = record
    MaxWidth: UINT;
    MaxHeight: UINT;
    MinWidth: UINT;
    MinHeight: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_SIZE_RANGE}


  PD3D12_VIDEO_PROCESS_FILTER = ^D3D12_VIDEO_PROCESS_FILTER;
  D3D12_VIDEO_PROCESS_FILTER = (
    D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS         = 0,
    D3D12_VIDEO_PROCESS_FILTER_CONTRAST           = 1,
    D3D12_VIDEO_PROCESS_FILTER_HUE                = 2,
    D3D12_VIDEO_PROCESS_FILTER_SATURATION         = 3,
    D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION    = 4,
    D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT   = 5,
    D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6,
    D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT  = 7
  );
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER}


type
  PD3D12_VIDEO_PROCESS_FILTER_FLAGS = ^D3D12_VIDEO_PROCESS_FILTER_FLAGS;
  D3D12_VIDEO_PROCESS_FILTER_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAGS}
const
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE               = D3D12_VIDEO_PROCESS_FILTER_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS         = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 0 {D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST           = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 1 {D3D12_VIDEO_PROCESS_FILTER_CONTRAST});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE                = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 2 {D3D12_VIDEO_PROCESS_FILTER_HUE});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION         = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 3 {D3D12_VIDEO_PROCESS_FILTER_SATURATION});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION    = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 4 {D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT   = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 5 {D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 6 {D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING}
    D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT  = D3D12_VIDEO_PROCESS_FILTER_FLAGS(1 shl 7 {D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT});
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT}

  // MACRO to do bitwise operations defined in winnt.h
  // DEFINE_ENUM_FLAG_OPERATORS(D3D12_VIDEO_PROCESS_FILTER_FLAGS);

type
  PD3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = ^D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
  D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS}
const
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE   = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE}
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB    = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB}
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS($80000000);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM}


type

  PD3D12_VIDEO_PROCESS_ALPHA_BLENDING = ^D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
  D3D12_VIDEO_PROCESS_ALPHA_BLENDING = record
    Enable: BOOL;
    Alpha: FLOAT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_ALPHA_BLENDING}


  PD3D12_VIDEO_PROCESS_LUMA_KEY = ^D3D12_VIDEO_PROCESS_LUMA_KEY;
  D3D12_VIDEO_PROCESS_LUMA_KEY = record
    Enable: BOOL;
    Lower: FLOAT;
    Upper: FLOAT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_LUMA_KEY}


  PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = ^D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
  D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC = record
    Format: DXGI_FORMAT;
    ColorSpace: DXGI_COLOR_SPACE_TYPE;
    SourceAspectRatio: DXGI_RATIONAL;
    DestinationAspectRatio: DXGI_RATIONAL;
    FrameRate: DXGI_RATIONAL;
    SourceSizeRange: D3D12_VIDEO_SIZE_RANGE;
    DestinationSizeRange: D3D12_VIDEO_SIZE_RANGE;
    EnableOrientation: BOOL;
    FilterFlags: D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    StereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;
    FieldType: D3D12_VIDEO_FIELD_TYPE;
    DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    EnableAlphaBlending: BOOL;
    LumaKey: D3D12_VIDEO_PROCESS_LUMA_KEY;
    NumPastFrames: UINT;
    NumFutureFrames: UINT;
    EnableAutoProcessing: BOOL;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC}


  PD3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = ^D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
  D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE = (
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE        = 0,
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND    = 1,
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION   = 2,
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE}


  PD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = ^D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
  D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC = record
    Format: DXGI_FORMAT;
    ColorSpace: DXGI_COLOR_SPACE_TYPE;
    AlphaFillMode: D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
    AlphaFillModeSourceStreamIndex: UINT;
    BackgroundColor: Fixed3FLOATArray;
    FrameRate: DXGI_RATIONAL;
    EnableStereo: BOOL;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC}


  // Interface ID3D12VideoDecoderHeap
  // ================================
  // Represents a Direct3D 12 video decoder heap that contains resolution-dependent
  // resources and state for performing the decode operation.
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecoderHeap);'}
  {$EXTERNALSYM ID3D12VideoDecoderHeap}
  PID3D12VideoDecoderHeap = ^ID3D12VideoDecoderHeap;
  ID3D12VideoDecoderHeap = interface(ID3D12Pageable)
    ['{0946B7C9-EBF6-4047-BB73-8683E27DBB1F}']

    function GetDesc(): D3D12_VIDEO_DECODER_HEAP_DESC; stdcall;

  end;
  IID_ID3D12VideoDecoderHeap = ID3D12VideoDecoderHeap;
  {$EXTERNALSYM IID_ID3D12VideoDecoderHeap}


  // Interface ID3D12VideoDevice
  // ===========================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDevice);'}
  {$EXTERNALSYM ID3D12VideoDevice}
  ID3D12VideoDevice = interface(IUnknown)
    ['{1F052807-0B46-4ACC-8A89-364F793718A4}']

    function CheckFeatureSupport(FeatureVideo: D3D12_FEATURE_VIDEO;
                                 pFeatureSupportData: Pointer;
                                 FeatureSupportDataSize: UINT): HRESULT; stdcall;

    function CreateVideoDecoder(pDesc: PD3D12_VIDEO_DECODER_DESC;
                                const riid: REFIID;  // Expected: IID_ID3D12VideoDecoder,
                                {out} ppVideoDecoder: PPointer): HRESULT; stdcall;

    function CreateVideoDecoderHeap(pVideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC;
                                    const riid: REFIID;  // Expected: IID_ID3D12VideoDecoderHeap,
                                    {out} ppVideoDecoderHeap: PPointer): HRESULT; stdcall;

    function CreateVideoProcessor(NodeMask: UINT;
                                  pOutputStreamDesc: PD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
                                  NumInputStreamDescs: UINT;
                                  [ref] const pInputStreamDescs: PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
                                  const riid: REFIID;  // Expected: IID_ID3D12VideoProcessor,
                                  {out} ppVideoProcessor: PPointer): HRESULT; stdcall;


  end;
  IID_ID3D12VideoDevice = ID3D12VideoDevice;
  {$EXTERNALSYM IID_ID3D12VideoDevice}


  // Interface ID3D12VideoDecoder
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecoder);'}
  {$EXTERNALSYM ID3D12VideoDecoder}
  ID3D12VideoDecoder = interface(ID3D12Pageable)
    ['{C59B6BDC-7720-4074-A136-17A156037470}']

    function GetDesc(): D3D12_VIDEO_DECODER_DESC; stdcall;

  end;
  IID_ID3D12VideoDecoder = ID3D12VideoDecoder;
  {$EXTERNALSYM IID_ID3D12VideoDecoder}



  PD3D12_VIDEO_DECODE_TIER = ^D3D12_VIDEO_DECODE_TIER;
  D3D12_VIDEO_DECODE_TIER = (
    D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0,
    D3D12_VIDEO_DECODE_TIER_1             = 1,
    D3D12_VIDEO_DECODE_TIER_2             = 2,
    D3D12_VIDEO_DECODE_TIER_3             = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_DECODE_TIER}


type
  PD3D12_VIDEO_DECODE_SUPPORT_FLAGS = ^D3D12_VIDEO_DECODE_SUPPORT_FLAGS;
  D3D12_VIDEO_DECODE_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_SUPPORT_FLAGS}
const
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE      = D3D12_VIDEO_DECODE_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = D3D12_VIDEO_DECODE_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED}


type
  PD3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = ^D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;
  D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS}
const
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE                                     = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE}
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED    = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED}
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED                = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED}
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED      = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED}
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME}

type

  PD3D12_VIDEO_DECODE_STATUS = ^D3D12_VIDEO_DECODE_STATUS;
  D3D12_VIDEO_DECODE_STATUS = (
    D3D12_VIDEO_DECODE_STATUS_OK                    = 0,
    D3D12_VIDEO_DECODE_STATUS_CONTINUE              = 1,
    D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2,
    D3D12_VIDEO_DECODE_STATUS_RESTART               = 3,
    D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED         = 4
  );
  {$EXTERNALSYM D3D12_VIDEO_DECODE_STATUS}


  PD3D12_VIDEO_DECODE_ARGUMENT_TYPE = ^D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
  D3D12_VIDEO_DECODE_ARGUMENT_TYPE = (
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS          = 0,
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1,
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL               = 2,
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID                   = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_DECODE_ARGUMENT_TYPE}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT = record
    NodeIndex: UINT;                                              // input
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;              // input
    Width: UINT;                                                  // input
    Height: UINT;                                                 // input
    DecodeFormat: DXGI_FORMAT;                                    // input
    FrameRate: DXGI_RATIONAL;                                     // input
    BitRate: UINT;                                                // input
    SupportFlags: D3D12_VIDEO_DECODE_SUPPORT_FLAGS;               // output
    ConfigurationFlags: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;   // output
    DecodeTier: D3D12_VIDEO_DECODE_TIER;                          // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = ^D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT;
  D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT = record
    NodeIndex: UINT;                 // input
    ProfileCount: UINT;              // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = ^D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES;
  D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES = record
    NodeIndex: UINT;               // input
    ProfileCount: UINT;            // input
    pProfiles: PGUID;              // output. The list of supported profiles. The caller allocates storage for the profile list before calling CheckFeatureSupport.
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = ^D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT;
  D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT = record
    NodeIndex: UINT;                                   // input
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;   // input
    FormatCount: UINT;                                 // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = ^D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS;
  D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS = record
    NodeIndex: UINT;                                   // input
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;   // input
    FormatCount: UINT;                                 // input
    pOutputFormats: PDXGI_FORMAT;                      // output. The list of supported video formats.
                                                       // The caller allocates storage for the format list before calling CheckFeatureSupport.
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS}


  PD3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = ^D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE;
  D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE = record
    IOCoherent: BOOL;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE}


  PD3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = ^D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT;
  D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT = (
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0,
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1,
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2,

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0,
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1,
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2,

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT}


type
  PD3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = ^D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;
  D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS}
const
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE}

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 0 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y}
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 1 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U}
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 2 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V}

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 0 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R}
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 1 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G}
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B    = D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS(1 shl 2 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B}

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A    = (1 shl 3 {D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A});
    {$EXTERNALSYM D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A}


type

  PD3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = ^D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM;
  D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM = record
    NodeIndex: UINT;                                            // in
    DecodeProfile: TGUID;                                       // in
    Width: UINT;                                                // in
    Height: UINT;                                               // in
    DecodeFormat: DXGI_FORMAT;                                  // in
    Components: D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;   // out
    BinCount: UINT;                                             // out
    CounterBitDepth: UINT;                                      // out
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM}


type
  PD3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = ^D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;
  D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS}
const
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE      = D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED}


type
  {https://learn.microsoft.com/en-us/windows/win32/api/d3d12video/ne-d3d12video-d3d12_video_scale_support_flags}
  PD3D12_VIDEO_SCALE_SUPPORT_FLAGS = ^D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
  D3D12_VIDEO_SCALE_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_SCALE_SUPPORT_FLAGS}
const
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE                 = D3D12_VIDEO_SCALE_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY            = D3D12_VIDEO_SCALE_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY}
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = D3D12_VIDEO_SCALE_SUPPORT_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY}


type

  PD3D12_VIDEO_SCALE_SUPPORT = ^D3D12_VIDEO_SCALE_SUPPORT;
  D3D12_VIDEO_SCALE_SUPPORT = record
    OutputSizeRange: D3D12_VIDEO_SIZE_RANGE;
    Flags: D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
  end;
  {$EXTERNALSYM D3D12_VIDEO_SCALE_SUPPORT}


  PD3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT = record
    NodeIndex: UINT;                                             // input
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;             // input
    DecodeSample: D3D12_VIDEO_SAMPLE;                            // input
    OutputFormat: D3D12_VIDEO_FORMAT;                            // input
    FrameRate: DXGI_RATIONAL;                                    // input
    BitRate: UINT;                                               // input
    SupportFlags: D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;   // output
    ScaleSupport: D3D12_VIDEO_SCALE_SUPPORT;                     // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT}

  PD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = ^D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE;
  D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE = record
    VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC;  // input
    MemoryPoolL0Size: UINT64;                             // output
    MemoryPoolL1Size: UINT64;                             // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE}


  PD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = ^D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE;
  D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE = record
    NodeMask: UINT;
    pOutputStreamDesc: PD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;  // input
    NumInputStreamDescs: UINT;                                   // input
    pInputStreamDescs: PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;   // input
    MemoryPoolL0Size: UINT64;                                    // output
    MemoryPoolL1Size: UINT64;                                    // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE}


  PD3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = ^D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS;
  D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS = record
    Status: UINT64;                 // see D3D12_VIDEO_DECODE_STATUS
    NumMacroblocksAffected: UINT64;
    FrameRate: DXGI_RATIONAL;
    BitRate: UINT;
  end;
  {$EXTERNALSYM D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS}


  PD3D12_VIDEO_DECODE_FRAME_ARGUMENT = ^D3D12_VIDEO_DECODE_FRAME_ARGUMENT;
  D3D12_VIDEO_DECODE_FRAME_ARGUMENT = record
    Type_: D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
    Size: UINT;
    {[annotation("_Field_size_bytes_full_(Size)")]}
    pData: Pointer;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_FRAME_ARGUMENT}


  PD3D12_VIDEO_DECODE_REFERENCE_FRAMES = ^D3D12_VIDEO_DECODE_REFERENCE_FRAMES;
  D3D12_VIDEO_DECODE_REFERENCE_FRAMES = record
    NumTexture2Ds: UINT;
    //[annotation("_Field_size_full_(NumTexture2Ds)")]
    ppTexture2Ds: PID3D12Resource;
    //[annotation("_Field_size_full_(NumTexture2Ds)")]
    pSubresources: PUINT;
    //[annotation("_Field_size_full_opt_(NumTexture2Ds)")]
    ppHeaps: PID3D12VideoDecoderHeap;  // If null, assume single decoder heap from input args.
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_REFERENCE_FRAMES}


  PD3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = ^D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM;
  D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM = record
    pBuffer: ID3D12Resource;
    Offset: UINT64;
    Size: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM}


  PD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = ^D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS;
  D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS = record
    Enable: BOOL;
    pReferenceTexture2D: ID3D12Resource;
    ReferenceSubresource: UINT;
    OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS}


  PD3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = ^D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS;
  D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS = record
    NumFrameArguments: UINT;
    FrameArguments: array[0..D3D12_VIDEO_DECODE_MAX_ARGUMENTS - 1] of D3D12_VIDEO_DECODE_FRAME_ARGUMENT;
    ReferenceFrames: D3D12_VIDEO_DECODE_REFERENCE_FRAMES;
    CompressedBitstream: D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM;
    pHeap: PID3D12VideoDecoderHeap;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS}


  PD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = ^D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS;
  D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS = record
    pOutputTexture2D: PID3D12Resource;
    OutputSubresource: UINT;
    ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS}



  // Interface ID3D12VideoProcessor
  // ==============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessor);'}
  {$EXTERNALSYM ID3D12VideoProcessor}
  ID3D12VideoProcessor = interface(ID3D12Pageable)
    ['{304FDB32-BEDE-410A-8545-943AC6A46138}']

    function GetNodeMask(): UINT; stdcall;

    function GetNumInputStreamDescs(): UINT; stdcall;

    function GetInputStreamDescs(NumInputStreamDescs: UINT;
                                 pInputStreamDescs: PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC): HRESULT; stdcall;

    function GetOutputStreamDesc(): D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC; stdcall;

  end;
  IID_ID3D12VideoProcessor = ID3D12VideoProcessor;
  {$EXTERNALSYM IID_ID3D12VideoProcessor}


type
  PD3D12_VIDEO_PROCESS_FEATURE_FLAGS = ^D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
  D3D12_VIDEO_PROCESS_FEATURE_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAGS}
const
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE               = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL         = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY           = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO             = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION           = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP               = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING     = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING}
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = D3D12_VIDEO_PROCESS_FEATURE_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO}


type
  PD3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = ^D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;
  D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS}
const
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE                = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE             = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($01);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING           = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($02);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT    = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($04);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION    = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($08);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING  = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION    = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING  = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($80);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING}
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM              = D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS($80000000);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM}


type

  PD3D12_VIDEO_PROCESS_ORIENTATION = ^D3D12_VIDEO_PROCESS_ORIENTATION;
  D3D12_VIDEO_PROCESS_ORIENTATION = (
    D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT                       = 0,
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL               = 1,
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90                  = 2,
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL  = 3,
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180                 = 4,
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL                 = 5,
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270                 = 6,
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7
  );
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_ORIENTATION}


type
  PD3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = ^D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
  D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS}
const
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE                = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE}
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY}
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT        = D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT}


type

  PD3D12_VIDEO_PROCESS_FILTER_RANGE = ^D3D12_VIDEO_PROCESS_FILTER_RANGE;
  D3D12_VIDEO_PROCESS_FILTER_RANGE = record
    Minimum: INT;
    Maximum: INT;
    Default: INT;
    Multiplier: FLOAT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_FILTER_RANGE}
  end;

type
  PD3D12_VIDEO_PROCESS_SUPPORT_FLAGS = ^D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;
  D3D12_VIDEO_PROCESS_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_SUPPORT_FLAGS}
const
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE      = D3D12_VIDEO_PROCESS_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = D3D12_VIDEO_PROCESS_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED}

type

  PD3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT = record
    NodeIndex: UINT;                                                                                         // input
    InputSample: D3D12_VIDEO_SAMPLE;                                                                         // input
    InputFieldType: D3D12_VIDEO_FIELD_TYPE;                                                                  // input
    InputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;                                                      // input
    InputFrameRate: DXGI_RATIONAL;                                                                           // input
    OutputFormat: D3D12_VIDEO_FORMAT;                                                                        // input
    OutputStereoFormat: D3D12_VIDEO_FRAME_STEREO_FORMAT;                                                     // input
    OutputFrameRate: DXGI_RATIONAL;                                                                          // input
    SupportFlags: D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;                                                         // output
    ScaleSupport: D3D12_VIDEO_SCALE_SUPPORT;                                                                 // output
    FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;                                                       // output
    DeinterlaceSupport: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;                                               // output
    AutoProcessingSupport: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;                                        // output
    FilterSupport: D3D12_VIDEO_PROCESS_FILTER_FLAGS;                                                         // output
    FilterRangeSupport: array[0..D3D12_VIDEO_PROCESS_MAX_FILTERS - 1] of D3D12_VIDEO_PROCESS_FILTER_RANGE;   // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT}


  PD3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = ^D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS;
  D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS = record
    NodeIndex: UINT;                 // input
    MaxInputStreams: UINT;           // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS}


  PD3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = ^D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO;
  D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO = record
    NodeIndex: UINT;                                          // input
    DeinterlaceMode: D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;   // input
    Filters: D3D12_VIDEO_PROCESS_FILTER_FLAGS;                // input
    FeatureSupport: D3D12_VIDEO_PROCESS_FEATURE_FLAGS;        // input
    InputFrameRate: DXGI_RATIONAL;                            // input
    OutputFrameRate: DXGI_RATIONAL;                           // input
    EnableAutoProcessing: BOOL;                               // input
    PastFrames: UINT;                                         // output
    FutureFrames: UINT;                                       // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO}


  PD3D12_VIDEO_PROCESS_REFERENCE_SET = ^D3D12_VIDEO_PROCESS_REFERENCE_SET;
  D3D12_VIDEO_PROCESS_REFERENCE_SET = record
    NumPastFrames: UINT;
    ppPastFrames: PID3D12Resource;
    pPastSubresources: PUINT;
    NumFutureFrames: UINT;
    ppFutureFrames: PID3D12Resource;
    pFutureSubresources: PUINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_REFERENCE_SET}


  PD3D12_VIDEO_PROCESS_TRANSFORM = ^D3D12_VIDEO_PROCESS_TRANSFORM;
  D3D12_VIDEO_PROCESS_TRANSFORM = record
    SourceRectangle: D3D12_RECT;
    DestinationRectangle: D3D12_RECT;
    Orientation: D3D12_VIDEO_PROCESS_ORIENTATION;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_TRANSFORM}


  PD3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = ^D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
  D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE = record
    OutputIndex: UINT;
    InputFrameOrField: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE}


  PD3D12_VIDEO_PROCESS_INPUT_STREAM = ^D3D12_VIDEO_PROCESS_INPUT_STREAM;
  D3D12_VIDEO_PROCESS_INPUT_STREAM = record
    pTexture2D: ID3D12Resource;
    Subresource: UINT;
    ReferenceSet: D3D12_VIDEO_PROCESS_REFERENCE_SET;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM}


  PD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = ^D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS;
  D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS = record
    InputStream: array[0..D3D12_VIDEO_PROCESS_STEREO_VIEWS - 1] of D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform: D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo: D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels: array[0..D3D12_VIDEO_PROCESS_MAX_FILTERS - 1] of INT;
    AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS}


  PD3D12_VIDEO_PROCESS_OUTPUT_STREAM = ^D3D12_VIDEO_PROCESS_OUTPUT_STREAM;
  D3D12_VIDEO_PROCESS_OUTPUT_STREAM = record
    pTexture2D: ID3D12Resource;
    Subresource: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_OUTPUT_STREAM}


  PD3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = ^D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS;
  D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS = record
    OutputStream: array[0..D3D12_VIDEO_PROCESS_STEREO_VIEWS - 1] of D3D12_VIDEO_PROCESS_OUTPUT_STREAM;
    TargetRectangle: D3D12_RECT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS}


  // Interface ID3D12VideoDecodeCommandList
  // ======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecodeCommandList);'}
  {$EXTERNALSYM ID3D12VideoDecodeCommandList}
  ID3D12VideoDecodeCommandList = interface(ID3D12CommandList)
    ['{3B60536E-AD29-4E64-A269-F853837E5E53}']

    function Close(): HRESULT; stdcall;

    function Reset(pAllocator: ID3D12CommandAllocator): HRESULT; stdcall;

    procedure ClearState(); stdcall;

    procedure ResourceBarrier(NumBarriers: UINT;
                              const pBarriers: PD3D12_RESOURCE_BARRIER); stdcall;

    procedure DiscardResource(pResource: PID3D12Resource;
                              pRegion: PD3D12_DISCARD_REGION); stdcall;

    procedure BeginQuery(pQueryHeap: ID3D12QueryHeap;
                         Type_: D3D12_QUERY_TYPE;
                         Index: UINT); stdcall;

    procedure EndQuery(pQueryHeap: ID3D12QueryHeap;
                       Type_: D3D12_QUERY_TYPE;
                       Index: UINT); stdcall;

    procedure ResolveQueryData(pQueryHeap: ID3D12QueryHeap;
                               Type_: D3D12_QUERY_TYPE;
                               StartIndex: UINT;
                               NumQueries: UINT;
                               pDestinationBuffer: ID3D12Resource;
                               AlignedDestinationBufferOffset: UINT64); stdcall;

    procedure SetPredication(pBuffer: PID3D12Resource;
                             AlignedBufferOffset: UINT64;
                             Operation: D3D12_PREDICATION_OP); stdcall;

    procedure SetMarker(Metadata: UINT;
                       const pData: Pointer;
                       Size: UINT); stdcall;

    procedure BeginEvent(Metadata: UINT;
                         const pData: Pointer;
                         Size: UINT); stdcall;

    procedure EndEvent(); stdcall;

    procedure DecodeFrame(pDecoder: ID3D12VideoDecoder;
                          pOutputArguments: D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS;
                          pInputArguments: D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS);

    procedure WriteBufferImmediate(Count: UINT;
                                   [ref] const pParams: D3D12_WRITEBUFFERIMMEDIATE_PARAMETER;
                                   [ref] const pModes: PD3D12_WRITEBUFFERIMMEDIATE_MODE);

  end;
  IID_ID3D12VideoDecodeCommandList = ID3D12VideoDecodeCommandList;
  {$EXTERNALSYM IID_ID3D12VideoDecodeCommandList}


  // Interface ID3D12VideoProcessCommandList
  // =======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessCommandList);'}
  {$EXTERNALSYM ID3D12VideoProcessCommandList}
  ID3D12VideoProcessCommandList = interface(ID3D12CommandList)
    ['{AEB2543A-167F-4682-ACC8-D159ED4A6209}']

    function Close(): HRESULT; stdcall;

    function Reset(pAllocator: ID3D12CommandAllocator): HRESULT; stdcall;

    procedure ClearState(); stdcall;

    procedure ResourceBarrier(NumBarriers: UINT;
                              pBarriers: PD3D12_RESOURCE_BARRIER); stdcall;

    procedure DiscardResource(pResource: ID3D12Resource;
                              pRegion: PD3D12_DISCARD_REGION); stdcall;

    procedure BeginQuery(pQueryHeap: ID3D12QueryHeap;
                         Type_: D3D12_QUERY_TYPE;
                         Index: UINT); stdcall;

    procedure EndQuery(pQueryHeap: ID3D12QueryHeap;
                       Type_: D3D12_QUERY_TYPE;
                       Index: UINT); stdcall;

    procedure ResolveQueryData(pQueryHeap: ID3D12QueryHeap;
                               Type_: D3D12_QUERY_TYPE;
                               StartIndex: UINT;
                               NumQueries: UINT;
                               pDestinationBuffer: ID3D12Resource;
                               AlignedDestinationBufferOffset: UINT64); stdcall;

    procedure SetPredication(pBuffer: ID3D12Resource;
                             AlignedBufferOffset: UINT64;
                             Operation: D3D12_PREDICATION_OP); stdcall;

    procedure SetMarker(Metadata: UINT;
                        pData: Pointer;
                        Size: UINT); stdcall;

    procedure BeginEvent(Metadata: UINT;
                         pData: Pointer;
                         Size: UINT); stdcall;

    procedure EndEvent(); stdcall;

    procedure ProcessFrames(pVideoProcessor: ID3D12VideoProcessor;
                            pOutputArguments: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS;
                            NumInputStreams: UINT;
                            [ref] const pInputArguments: D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS); stdcall;

    procedure WriteBufferImmediate(Count: UINT;
                                   [ref] const pParams: PD3D12_WRITEBUFFERIMMEDIATE_PARAMETER;
                                   [ref] const pModes: PD3D12_WRITEBUFFERIMMEDIATE_MODE); stdcall;

  end;
  IID_ID3D12VideoProcessCommandList = ID3D12VideoProcessCommandList;
  {$EXTERNALSYM IID_ID3D12VideoProcessCommandList}


  PD3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = ^D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM;
  D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM = record
    Offset: UINT64;
    pBuffer: PID3D12Resource;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM}


  PD3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = ^D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1;
  D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 = record
    Enable: BOOL;
    pReferenceTexture2D: PID3D12Resource;
    ReferenceSubresource: UINT;
    OutputColorSpace: DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace: DXGI_COLOR_SPACE_TYPE;
    OutputWidth: UINT;
    OutputHeight: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1}


  PD3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = ^D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1;
  D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 = record
    pOutputTexture2D: PID3D12Resource;
    OutputSubresource: UINT;
    ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1;
    Histograms: array[0..D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS - 1] of D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM;
  end;
  {$EXTERNALSYM D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1}



  // Interface ID3D12VideoDecodeCommandList1
  // =======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecodeCommandList1);'}
  {$EXTERNALSYM ID3D12VideoDecodeCommandList1}
  ID3D12VideoDecodeCommandList1 = interface(ID3D12VideoDecodeCommandList)
    ['{D52F011B-B56E-453C-A05A-A7F311C8F472}']

    procedure DecodeFrame1(pDecoder: ID3D12VideoDecoder;
                           pOutputArguments: D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1;
                           pInputArguments: D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS); stdcall;

  end;
  IID_ID3D12VideoDecodeCommandList1 = ID3D12VideoDecodeCommandList1;
  {$EXTERNALSYM IID_ID3D12VideoDecodeCommandList1}


  PD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = ^D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1;
  D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 = record
    InputStream: array[0..D3D12_VIDEO_PROCESS_STEREO_VIEWS - 1] of D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform: D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags: D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo: D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels: array[0..D3D12_VIDEO_PROCESS_MAX_FILTERS - 1] of INT;
    AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
    FieldType: D3D12_VIDEO_FIELD_TYPE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1}


  // Interface ID3D12VideoProcessCommandList1
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessCommandList1);'}
  {$EXTERNALSYM ID3D12VideoProcessCommandList1}
  ID3D12VideoProcessCommandList1 = interface(ID3D12VideoProcessCommandList)
    ['{542C5C4D-7596-434F-8C93-4EFA6766F267}']

    procedure ProcessFrames1(pVideoProcessor: ID3D12VideoProcessor;
                             pOutputArguments: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS;
                             NumInputStreams: UINT;
                             [ref] const pInputArguments: PD3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1); stdcall;

  end;
  IID_ID3D12VideoProcessCommandList1 = ID3D12VideoProcessCommandList1;
  {$EXTERNALSYM IID_ID3D12VideoProcessCommandList1}


  PD3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = ^D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
  D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE = (
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8   = 0,
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE}


type
  PD3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = ^D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;
  D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS}
const
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE  = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(0);
    {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE}
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8   = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(1 shl 0 {D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8});
    {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8}
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS(1 shl 1 {D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16});
    {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16}

type

  PD3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = ^D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
  D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION = (
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0
  );
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION}


type
  PD3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = ^D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;
  D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS}
const
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE        = D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS(0);
    {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE}
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS(1 shl 0 {D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL});
    {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL}


type

  // D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT
  PD3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT = record
    NodeIndex: UINT;                 // input
    VideoDecodeSupport: BOOL;        // output
    VideoProcessSupport: BOOL;       // output
    VideoEncodeSupport: BOOL;        // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT}


  // D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR
  PD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = ^D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR;
  D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR = record
    NodeIndex: UINT;                                                        // input
    InputFormat: DXGI_FORMAT;                                               // input
    BlockSizeFlags: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;   // output
    PrecisionFlags: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;    // output
    SizeRange: D3D12_VIDEO_SIZE_RANGE;                                      // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR}


  // D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE
  PD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = ^D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE;
  D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE = record
    NodeIndex: UINT;                                             // input
    InputFormat: DXGI_FORMAT;                                    // input
    BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;   // input
    Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;    // input
    SizeRange: D3D12_VIDEO_SIZE_RANGE;                           // input
    Protected_: BOOL;                                            // input
    MotionVectorHeapMemoryPoolL0Size: UINT64;                    // output
    MotionVectorHeapMemoryPoolL1Size: UINT64;                    // output
    MotionEstimatorMemoryPoolL0Size: UINT64;                     // output
    MotionEstimatorMemoryPoolL1Size: UINT64;                     // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE}


  PD3D12_VIDEO_MOTION_ESTIMATOR_DESC = ^D3D12_VIDEO_MOTION_ESTIMATOR_DESC;
  D3D12_VIDEO_MOTION_ESTIMATOR_DESC = record
    NodeMask: UINT;
    InputFormat: DXGI_FORMAT;
    BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange: D3D12_VIDEO_SIZE_RANGE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_DESC}


  // Interface ID3D12VideoMotionEstimator
  // ====================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoMotionEstimator);'}
  {$EXTERNALSYM ID3D12VideoMotionEstimator}
  ID3D12VideoMotionEstimator = interface(ID3D12Pageable)
    ['{33FDAE0E-098B-428F-87BB-34B695DE08F8}']

    function GetDesc(): D3D12_VIDEO_MOTION_ESTIMATOR_DESC; stdcall;

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;

  end;
  IID_ID3D12VideoMotionEstimator = ID3D12VideoMotionEstimator;
  {$EXTERNALSYM IID_ID3D12VideoMotionEstimator}



  PD3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = ^D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC;
  D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC = record
    NodeMask: UINT;
    InputFormat: DXGI_FORMAT;
    BlockSize: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange: D3D12_VIDEO_SIZE_RANGE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC}


  // Interface ID3D12VideoMotionVectorHeap
  // =====================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoMotionVectorHeap);'}
  {$EXTERNALSYM ID3D12VideoMotionVectorHeap}
  ID3D12VideoMotionVectorHeap = interface(ID3D12Pageable)
    ['{5BE17987-743A-4061-834B-23D22DAEA505}']

    function GetDesc(): D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC;

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;


  end;
  IID_ID3D12VideoMotionVectorHeap = ID3D12VideoMotionVectorHeap;
  {$EXTERNALSYM IID_ID3D12VideoMotionVectorHeap}


  // Interface ID3D12VideoDevice1
  // ============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDevice1);'}
  {$EXTERNALSYM ID3D12VideoDevice1}
  ID3D12VideoDevice1 = interface(ID3D12VideoDevice)
    ['{981611AD-A144-4C83-9890-F30E26D658AB}']

    function CreateVideoMotionEstimator(pDesc: D3D12_VIDEO_MOTION_ESTIMATOR_DESC;
                                        pProtectedResourceSession: ID3D12ProtectedResourceSession;
                                        const riid: REFIID;  // Expected: IID_ID3D12VideoMotionEstimator,
                                        out ppVideoMotionEstimator): HRESULT; stdcall;

    function CreateVideoMotionVectorHeap(pDesc: D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC;
                                         pProtectedResourceSession: ID3D12ProtectedResourceSession {can be nil};
                                         const riid: REFIID;  // Expected: IID_ID3D12VideoMotionVectorHeap,
                                         out ppVideoMotionVectorHeap): HRESULT; stdcall;

  end;
  IID_ID3D12VideoDevice1 = ID3D12VideoDevice1;
  {$EXTERNALSYM IID_ID3D12VideoDevice1}


  PD3D12_RESOURCE_COORDINATE = ^D3D12_RESOURCE_COORDINATE;
  D3D12_RESOURCE_COORDINATE = record
    // Coordinate values below index pixels.
    X: UINT64;                       // Used for buffer, 1D, 2D, 3D
    Y: UINT;                         // Used for 2D, 3D
    Z: UINT;                         // Used for 3D
    SubresourceIndex: UINT;          // indexes into mips, arrays, and planes. Used for 1D, 2D, 3D
  end;
  {$EXTERNALSYM D3D12_RESOURCE_COORDINATE}


  PD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = ^D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT;
  D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT = record
    pMotionVectorHeap: ID3D12VideoMotionVectorHeap;
  end;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT}


  PD3D12_VIDEO_MOTION_ESTIMATOR_INPUT = ^D3D12_VIDEO_MOTION_ESTIMATOR_INPUT;
  D3D12_VIDEO_MOTION_ESTIMATOR_INPUT = record
    pInputTexture2D: PID3D12Resource;
    InputSubresourceIndex: UINT;
    pReferenceTexture2D: PID3D12Resource;
    ReferenceSubresourceIndex: UINT;
    pHintMotionVectorHeap: ID3D12VideoMotionVectorHeap;
  end;
  {$EXTERNALSYM D3D12_VIDEO_MOTION_ESTIMATOR_INPUT}


  PD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = ^D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT;
  D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT = record
    pMotionVectorTexture2D: PID3D12Resource;
    MotionVectorCoordinate: D3D12_RESOURCE_COORDINATE;
  end;
  {$EXTERNALSYM D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT}


  PD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = ^D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT;
  D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT = record
    pMotionVectorHeap: ID3D12VideoMotionVectorHeap;
    PixelWidth: UINT;
    PixelHeight: UINT;
  end;
  {$EXTERNALSYM D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT}


  // Interface ID3D12VideoEncodeCommandList
  // =======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncodeCommandList);'}
  {$EXTERNALSYM ID3D12VideoEncodeCommandList}
  ID3D12VideoEncodeCommandList = Interface(ID3D12CommandList)
    ['{8455293A-0CBD-4831-9B39-FBDBAB724723}']

    function Close(): HRESULT; stdcall;

    function Reset(pAllocator: ID3D12CommandAllocator): HRESULT; stdcall;

    procedure ClearState(); stdcall;

    procedure ResourceBarrier(NumBarriers: UINT;
                             [ref] const pBarriers: PD3D12_RESOURCE_BARRIER); stdcall;

    procedure DiscardResource(pResource: ID3D12Resource;
                              pRegion: PD3D12_DISCARD_REGION); stdcall;

    procedure BeginQuery(pQueryHeap: ID3D12QueryHeap;
                         Type_: D3D12_QUERY_TYPE;
                         Index: UINT); stdcall;

    procedure EndQuery(pQueryHeap: ID3D12QueryHeap;
                       Type_: D3D12_QUERY_TYPE;
                       Index: UINT); stdcall;

    procedure ResolveQueryData(pQueryHeap: ID3D12QueryHeap;
                               Type_: D3D12_QUERY_TYPE;
                               StartIndex: UINT;
                               NumQueries: UINT;
                               pDestinationBuffer: ID3D12Resource;
                               AlignedDestinationBufferOffset: UINT64); stdcall;

    procedure SetPredication(pBuffer: ID3D12Resource;
                             AlignedBufferOffset: UINT64;
                             Operation: D3D12_PREDICATION_OP); stdcall;

    procedure SetMarker(Metadata: UINT;
                        [ref] const pData: Pointer;
                        Size: UINT); stdcall;

    procedure BeginEvent(Metadata: UINT;
                         [ref] const pData: Pointer;
                         Size: UINT); stdcall;

    procedure EndEvent(); stdcall;

    procedure EstimateMotion(pMotionEstimator: ID3D12VideoMotionEstimator;
                             pOutputArguments: PD3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT;
                             pInputArguments: PD3D12_VIDEO_MOTION_ESTIMATOR_INPUT); stdcall;

    procedure ResolveMotionVectorHeap(pOutputArguments: PD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT;
                                      pInputArguments: PD3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT); stdcall;

    procedure WriteBufferImmediate(Count: UINT;
                                   pParams: PD3D12_WRITEBUFFERIMMEDIATE_PARAMETER;
                                   [ref] const pModes: PD3D12_WRITEBUFFERIMMEDIATE_MODE); stdcall;

    procedure SetProtectedResourceSession(pProtectedResourceSession: ID3D12ProtectedResourceSession); stdcall;

  end;
  IID_ID3D12VideoEncodeCommandList = ID3D12VideoEncodeCommandList;
  {$EXTERNALSYM IID_ID3D12VideoEncodeCommandList}


type
  PD3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = ^D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
  D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS}
const
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE      = D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED}

type

  // D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES
  PD3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = ^D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES;
  D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES = record
    NodeIndex: UINT;                                              // input
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;              // input
    SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;  // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES}


  // D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES
  PD3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = ^D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES;
  D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES = record
    NodeIndex: UINT;                                              // input
    SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;  // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES}


  // D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
  PD3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = ^D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES;
  D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = record
    NodeIndex: UINT;                                              // input
    SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;  // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES}


  //D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1
  PD3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = ^D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1;
  D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 = record
    VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC; // input
    Protected_: BOOL;                                    // input
    MemoryPoolL0Size: UINT64;                            // output
    MemoryPoolL1Size: UINT64;                            // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1}


  // D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1
  PD3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = ^D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1;
  D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 = record
    NodeMask: UINT;
    pOutputStreamDesc: PD3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;  // input
    NumInputStreamDescs: UINT;                                   // input
    pInputStreamDescs: PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;   // input
    Protected_: BOOL;                                            // input
    MemoryPoolL0Size: UINT64;                                    // output
    MemoryPoolL1Size: UINT64;                                    // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1}


  PD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = ^D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
  D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE = (
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION              = 0,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION        = 1,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION             = 2,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT            = 3,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT           = 4,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT  = 5,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6
  );
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE}


  PD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = ^D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
  D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE = (
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8    = 0,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16   = 1,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32   = 2,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64   = 3,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8    = 4,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16   = 5,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32   = 6,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64   = 7,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT    = 8,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE   = 9,
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10
  );
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE}


type
  PD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = ^D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
  D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS}
const
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE  = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS($00000000);
    {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE}
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ  = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS($00000001);
    {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ}
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS($00000002);
    {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE}

type


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT = record
    NodeIndex: UINT;                // in
    CommandCount: UINT;             // out
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT}


  PD3D12_VIDEO_EXTENSION_COMMAND_INFO = ^D3D12_VIDEO_EXTENSION_COMMAND_INFO;
  D3D12_VIDEO_EXTENSION_COMMAND_INFO = record
    CommandId: TGUID;
    Name: PWideChar;
    CommandListSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
  end;
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_INFO}


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS = record
    NodeIndex: UINT;
    CommandCount: UINT;
    pCommandInfos: PD3D12_VIDEO_EXTENSION_COMMAND_INFO;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS}


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = record
    CommandId: TGUID;                                       // in
    Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;   // in
    ParameterCount: UINT;                                   // out
    ParameterPacking: UINT;                                 // out
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT}


  PD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = ^D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO;
  D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO = record
    Name: PWideChar;
    Type_: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
    Flags: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
  end;
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO}


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS = record
    CommandId: TGUID;                                                 // in
    Stage: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;             // in
    ParameterCount: UINT;                                             // in
    pParameterInfos: PD3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO;   // out
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS}


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT = record
    NodeIndex: UINT;
    CommandId: TGUID;
    pInputData: Pointer;
    InputDataSizeInBytes: SIZE_T;
    pOutputData: Pointer;
    OutputDataSizeInBytes: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT}


  PD3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = ^D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE;
  D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE = record
    NodeIndex: UINT;
    CommandId: TGUID;
    pCreationParameters: Pointer;
    CreationParametersSizeInBytes: SIZE_T;
    MemoryPoolL0Size: UINT64;       // output
    MemoryPoolL1Size: UINT64;       // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE}


  PD3D12_VIDEO_EXTENSION_COMMAND_DESC = ^D3D12_VIDEO_EXTENSION_COMMAND_DESC;
  D3D12_VIDEO_EXTENSION_COMMAND_DESC = record
    NodeMask: UINT;
    CommandId: TGUID;
  end;
  {$EXTERNALSYM D3D12_VIDEO_EXTENSION_COMMAND_DESC}


  // Interface ID3D12VideoDecoder1
  // ==============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecoder1);'}
  {$EXTERNALSYM ID3D12VideoDecoder1}
  ID3D12VideoDecoder1 = Interface(ID3D12VideoDecoder)
    ['{79A2E5FB-CCD2-469A-9FDE-195D10951F7E}']

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;

  end;
  IID_ID3D12VideoDecoder1 = ID3D12VideoDecoder1;
  {$EXTERNALSYM IID_ID3D12VideoDecoder1}


  // Interface ID3D12VideoDecoderHeap1
  // ==================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecoderHeap1);'}
  {$EXTERNALSYM ID3D12VideoDecoderHeap1}
  ID3D12VideoDecoderHeap1 = Interface(ID3D12VideoDecoderHeap)
    ['{DA1D98C5-539F-41B2-BF6B-1198A03B6D26}']

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;

  end;
  IID_ID3D12VideoDecoderHeap1 = ID3D12VideoDecoderHeap1;
  {$EXTERNALSYM IID_ID3D12VideoDecoderHeap1}


  // Interface ID3D12VideoProcessor1
  // ================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessor1);'}
  {$EXTERNALSYM ID3D12VideoProcessor1}
  ID3D12VideoProcessor1 = Interface(ID3D12VideoProcessor)
    ['{F3CFE615-553F-425C-86D8-EE8C1B1FB01C}']

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;

  end;
  IID_ID3D12VideoProcessor1 = ID3D12VideoProcessor1;
  {$EXTERNALSYM IID_ID3D12VideoProcessor1}


  // Interface ID3D12VideoExtensionCommand
  // ======================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoExtensionCommand);'}
  {$EXTERNALSYM ID3D12VideoExtensionCommand}
  ID3D12VideoExtensionCommand = Interface(ID3D12Pageable)
    ['{554E41E8-AE8E-4A8C-B7D2-5B4F274A30E4}']

    function GetDesc(): D3D12_VIDEO_EXTENSION_COMMAND_DESC; stdcall;

    function GetProtectedResourceSession(const riid: REFIID;  // Expected: ID3D12ProtectedResourceSession
                                         out ppProtectedSession): HRESULT; stdcall;

  end;
  IID_ID3D12VideoExtensionCommand = ID3D12VideoExtensionCommand;
  {$EXTERNALSYM IID_ID3D12VideoExtensionCommand}


  // Interface ID3D12VideoDevice2
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDevice2);'}
  {$EXTERNALSYM ID3D12VideoDevice2}
  ID3D12VideoDevice2 = Interface(ID3D12VideoDevice1)
    ['{F019AC49-F838-4A95-9B17-579437C8F513}']

    function CreateVideoDecoder1(pDesc: D3D12_VIDEO_DECODER_DESC;
                                 pProtectedResourceSession: ID3D12ProtectedResourceSession;
                                 const riid: REFIID; // Expected: IID_ID3D12VideoDecoder1,
                                 out ppVideoDecoder): HRESULT; stdcall;

    function CreateVideoDecoderHeap1(pVideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC;
                                     pProtectedResourceSession: ID3D12ProtectedResourceSession;
                                     const riid: REFIID; // Expected: IID_ID3D12VideoDecoderHeap1,
                                     out ppVideoDecoderHeap): HRESULT; stdcall;

    function CreateVideoProcessor1(NodeMask: UINT;
                                   pOutputStreamDesc: D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
                                   NumInputStreamDescs: UINT;
                                   [ref] const pInputStreamDescs: PD3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
                                   pProtectedResourceSession: ID3D12ProtectedResourceSession;
                                   const riid: REFIID; // Expected: IID_ID3D12VideoProcessor1,
                                   out ppVideoProcessor): HRESULT; stdcall;

    function CreateVideoExtensionCommand(pDesc: D3D12_VIDEO_EXTENSION_COMMAND_DESC;
                                        [ref] const pCreationParameters: Pointer;
                                        CreationParametersDataSizeInBytes: SIZE_T;
                                        pProtectedResourceSession: ID3D12ProtectedResourceSession;
                                        const riid: REFIID; // Expected: IID_ID3D12VideoExtensionCommand,
                                        out ppVideoExtensionCommand): HRESULT; stdcall;

    function ExecuteExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                     [ref] const pExecutionParameters: Pointer;
                                     ExecutionParametersSizeInBytes: SIZE_T;
                                     [ref] const pOutputData: Pointer;
                                     OutputDataSizeInBytes: SIZE_T): HRESULT; stdcall;

  end;
  IID_ID3D12VideoDevice2 = ID3D12VideoDevice2;
  {$EXTERNALSYM IID_ID3D12VideoDevice2}


  // Interface ID3D12VideoDecodeCommandList2
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecodeCommandList2);'}
  {$EXTERNALSYM ID3D12VideoDecodeCommandList2}
  ID3D12VideoDecodeCommandList2 = Interface(ID3D12VideoDecodeCommandList1)
    ['{6e120880-c114-4153-8036-d247051e1729}']

    procedure SetProtectedResourceSession(pProtectedResourceSession: ID3D12ProtectedResourceSession); stdcall;

    procedure InitializeExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                         [ref] const pInitializationParameters: Pointer;
                                         InitializationParametersSizeInBytes: SIZE_T); stdcall;

    procedure ExecuteExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                      [ref] const pExecutionParameters: Pointer;
                                      ExecutionParametersSizeInBytes: SIZE_T); stdcall;

  end;
  IID_ID3D12VideoDecodeCommandList2 = ID3D12VideoDecodeCommandList2;
  {$EXTERNALSYM IID_ID3D12VideoDecodeCommandList2}


  // Interface ID3D12VideoDecodeCommandList3
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDecodeCommandList3);'}
  {$EXTERNALSYM ID3D12VideoDecodeCommandList3}
  ID3D12VideoDecodeCommandList3 = Interface(ID3D12VideoDecodeCommandList2)
    ['{2aee8c37-9562-42da-8abf-61efeb2e4513}']

    procedure Barrier(NumBarrierGroups: UINT32;
                      [ref] const pBarrierGroups: PD3D12_BARRIER_GROUP); stdcall;

  end;
  IID_ID3D12VideoDecodeCommandList3 = ID3D12VideoDecodeCommandList3;
  {$EXTERNALSYM IID_ID3D12VideoDecodeCommandList3}


  // Interface ID3D12VideoProcessCommandList2
  // =========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessCommandList2);'}
  {$EXTERNALSYM ID3D12VideoProcessCommandList2}
  ID3D12VideoProcessCommandList2 = Interface(ID3D12VideoProcessCommandList1)
    ['{db525ae4-6ad6-473c-baa7-59b2e37082e4}']

    procedure SetProtectedResourceSession(pProtectedResourceSession: ID3D12ProtectedResourceSession); stdcall;

    procedure InitializeExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                         [ref] const pInitializationParameters: Pointer;
                                         InitializationParametersSizeInBytes: SIZE_T); stdcall;

    procedure ExecuteExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                      [ref] const pExecutionParameters: Pointer;
                                      ExecutionParametersSizeInBytes: SIZE_T); stdcall;

  end;
  IID_ID3D12VideoProcessCommandList2 = ID3D12VideoProcessCommandList2;
  {$EXTERNALSYM IID_ID3D12VideoProcessCommandList2}


  // Interface ID3D12VideoProcessCommandList3
  // =========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoProcessCommandList3);'}
  {$EXTERNALSYM ID3D12VideoProcessCommandList3}
  ID3D12VideoProcessCommandList3 = Interface(ID3D12VideoProcessCommandList2)
    ['{1a0a4ca4-9f08-40ce-9558-b411fd2666ff}']

    procedure Barrier(NumBarrierGroups: UINT32;
                      [ref] const pBarrierGroups: PD3D12_BARRIER_GROUP); stdcall;

  end;
  IID_ID3D12VideoProcessCommandList3 = ID3D12VideoProcessCommandList3;
  {$EXTERNALSYM IID_ID3D12VideoProcessCommandList3}


  // Interface ID3D12VideoEncodeCommandList1
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncodeCommandList1);'}
  {$EXTERNALSYM ID3D12VideoEncodeCommandList1}
  ID3D12VideoEncodeCommandList1 = Interface(ID3D12VideoEncodeCommandList)
    ['{94971eca-2bdb-4769-88cf-3675ea757ebc}']

    procedure InitializeExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                         [ref] const pInitializationParameters: Pointer;
                                         InitializationParametersSizeInBytes: SIZE_T); stdcall;

    procedure ExecuteExtensionCommand(pExtensionCommand: ID3D12VideoExtensionCommand;
                                      [ref] const pExecutionParameters: Pointer;
                                      ExecutionParametersSizeInBytes: SIZE_T); stdcall;

  end;
  IID_ID3D12VideoEncodeCommandList1 = ID3D12VideoEncodeCommandList1;
  {$EXTERNALSYM IID_ID3D12VideoEncodeCommandList1}


const

  D3D12_VIDEO_DECODE_PROFILE_MPEG2                    : TGUID = '{ee27417f-5e28-4e65-beea-1d26b508adc9}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_MPEG2}
  D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2          : TGUID = '{86695f12-340e-4f04-9fd3-9253dd327460}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2}
  D3D12_VIDEO_DECODE_PROFILE_H264                     : TGUID = '{1b81be68-a0c7-11d3-b984-00c04f2e73c5}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_H264}
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE  : TGUID = '{d79be8da-0cf1-4c81-b82a-69a4e236f43d}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE}
  D3D12_VIDEO_DECODE_PROFILE_H264_STEREO              : TGUID = '{f9aaccbb-c2b6-4cfc-8779-5707b1760552}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_H264_STEREO}
  D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW           : TGUID = '{705b9d82-76cf-49d6-b7e6-ac8872db013c}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW}
  D3D12_VIDEO_DECODE_PROFILE_VC1                      : TGUID = '{1b81beA3-a0c7-11d3-b984-00c04f2e73c5}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_VC1}
  D3D12_VIDEO_DECODE_PROFILE_VC1_D2010                : TGUID = '{1b81beA4-a0c7-11d3-b984-00c04f2e73c5}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_VC1_D2010}
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE          : TGUID = '{efd64d74-c9e8-41d7-a5e9-e9b0e39fa319}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE}
  D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC : TGUID = '{ed418a9f-010d-4eda-9ae3-9a65358d8d2e}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC}
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN                : TGUID = '{5b11d51b-2f4c-4452-bcc3-09f2a1160cc0}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN}
  D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10              : TGUID = '{107af0e0-ef1a-4d19-aba8-67a163073d13}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10}
  D3D12_VIDEO_DECODE_PROFILE_VP9                      : TGUID = '{463707f8-a1d0-4585-876d-83aa6d60b89e}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_VP9}
  D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2       : TGUID = '{a4c749ef-6ecf-48aa-8448-50a7a1165ff7}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2}
  D3D12_VIDEO_DECODE_PROFILE_VP8                      : TGUID = '{90b899ea-3a62-4705-88b3-8df04b2744e7}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_VP8}
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0             : TGUID = '{b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0}
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1             : TGUID = '{6936ff0f-45b1-4163-9cc1-646ef6946108}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1}
  D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2             : TGUID = '{0c5f2aa1-e541-4089-bb7b-98110a19d7c8}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2}
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2       : TGUID = '{17127009-a00f-4ce1-994e-bf4081f6f3f0}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2}
  D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420   : TGUID = '{2d80bed6-9cac-4835-9e91-327bbc4f9ee8}';
  {$EXTERNALSYM D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420}

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Video Encoder
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  //
  // Rate control API
  //

type

  PD3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE = (
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0,
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP             = 1,
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR             = 2,
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR             = 3,
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR            = 4
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE}


type
  PD3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS}
const
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE                  = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP       = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE       = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP     = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE}
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES      = D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES}


type

  PD3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP = record
    ConstantQP_FullIntracodedFrame: UINT;
    ConstantQP_InterPredictedFrame_PrevRefOnly: UINT;
    ConstantQP_InterPredictedFrame_BiDirectionalRef: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP}


  PD3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR = record
    InitialQP: UINT;
    MinQP: UINT;
    MaxQP: UINT;
    MaxFrameBitSize: UINT64;
    TargetBitRate: UINT64;
    VBVCapacity: UINT64;
    InitialVBVFullness: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR}


  PD3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR = record
    InitialQP: UINT;
    MinQP: UINT;
    MaxQP: UINT;
    MaxFrameBitSize: UINT64;
    TargetAvgBitRate: UINT64;
    PeakBitRate: UINT64;
    VBVCapacity: UINT64;
    InitialVBVFullness: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR}


  PD3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR = record
    InitialQP: UINT;
    MinQP: UINT;
    MaxQP: UINT;
    MaxFrameBitSize: UINT64;
    TargetAvgBitRate: UINT64;
    PeakBitRate: UINT64;
    ConstantQualityTarget: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR}


  PD3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = ^D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS;
  D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS = record
    DataSize: UINT;
    case Integer of
      0: (pConfiguration_CQP: D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP);
      1: (pConfiguration_CBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR);
      2: (pConfiguration_VBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR);
      3: (pConfiguration_QVBR: D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR);
  end;


  PD3D12_VIDEO_ENCODER_RATE_CONTROL = ^D3D12_VIDEO_ENCODER_RATE_CONTROL;
  D3D12_VIDEO_ENCODER_RATE_CONTROL = record
    Mode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
    Flags: D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
    ConfigParams: D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS;
    TargetFrameRate: DXGI_RATIONAL;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RATE_CONTROL}


  //
  // Video Encoder support API
  //

  PD3D12_VIDEO_ENCODER_CODEC = ^D3D12_VIDEO_ENCODER_CODEC;
  D3D12_VIDEO_ENCODER_CODEC = (
    D3D12_VIDEO_ENCODER_CODEC_H264 = 0,
    D3D12_VIDEO_ENCODER_CODEC_HEVC = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC = record
    NodeIndex: UINT;                    // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;   // input
    IsSupported: BOOL;                  // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC}


  PD3D12_VIDEO_ENCODER_PROFILE_H264 = ^D3D12_VIDEO_ENCODER_PROFILE_H264;
  D3D12_VIDEO_ENCODER_PROFILE_H264 = (
    D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN    = 0,
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH    = 1,
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PROFILE_H264}


  PD3D12_VIDEO_ENCODER_PROFILE_HEVC = ^D3D12_VIDEO_ENCODER_PROFILE_HEVC;
  D3D12_VIDEO_ENCODER_PROFILE_HEVC = (
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN   = 0,
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PROFILE_HEVC}


  PD3D12_VIDEO_ENCODER_PROFILE_DESC = ^D3D12_VIDEO_ENCODER_PROFILE_DESC;
  D3D12_VIDEO_ENCODER_PROFILE_DESC = record
    DataSize: UINT;
    case Integer of
      0: (pH264Profile: D3D12_VIDEO_ENCODER_PROFILE_H264);
      1: (pHEVCProfile: D3D12_VIDEO_ENCODER_PROFILE_HEVC);
    end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PROFILE_DESC}


  PD3D12_VIDEO_ENCODER_LEVELS_H264 = ^D3D12_VIDEO_ENCODER_LEVELS_H264;
  D3D12_VIDEO_ENCODER_LEVELS_H264 = (
    D3D12_VIDEO_ENCODER_LEVELS_H264_1  = 0,
    D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1,
    D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2,
    D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3,
    D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4,
    D3D12_VIDEO_ENCODER_LEVELS_H264_2  = 5,
    D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6,
    D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7,
    D3D12_VIDEO_ENCODER_LEVELS_H264_3  = 8,
    D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9,
    D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10,
    D3D12_VIDEO_ENCODER_LEVELS_H264_4  = 11,
    D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12,
    D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13,
    D3D12_VIDEO_ENCODER_LEVELS_H264_5  = 14,
    D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15,
    D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16,
    D3D12_VIDEO_ENCODER_LEVELS_H264_6  = 17,
    D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18,
    D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_LEVELS_H264}

  PD3D12_VIDEO_ENCODER_TIER_HEVC = ^D3D12_VIDEO_ENCODER_TIER_HEVC;
  D3D12_VIDEO_ENCODER_TIER_HEVC = (
    D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0,
    D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_TIER_HEVC}


  PD3D12_VIDEO_ENCODER_LEVELS_HEVC = ^D3D12_VIDEO_ENCODER_LEVELS_HEVC;
  D3D12_VIDEO_ENCODER_LEVELS_HEVC = (
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_1  = 0,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_2  = 1,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_3  = 3,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_4  = 5,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_5  = 7,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_6  = 10,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11,
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_LEVELS_HEVC}


  PD3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = ^D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC;
  D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC = record
    Level: D3D12_VIDEO_ENCODER_LEVELS_HEVC;
    Tier: D3D12_VIDEO_ENCODER_TIER_HEVC;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC}

  PD3D12_VIDEO_ENCODER_LEVEL_SETTING = ^D3D12_VIDEO_ENCODER_LEVEL_SETTING;
  D3D12_VIDEO_ENCODER_LEVEL_SETTING = record
    DataSize: UINT;
    case Integer of
      0: (pH264LevelSetting: D3D12_VIDEO_ENCODER_LEVELS_H264);
      1: (pHEVCLevelSetting: D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC);
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_LEVEL_SETTING}

  PD3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL = record
    NodeIndex: UINT;                                        // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                       // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;              // input
    IsSupported: BOOL;                                      // output
    MinSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING;   // output
    MaxSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING;   // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL}


  PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = ^D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
  D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC = record
    Width: UINT;
    Height: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC}


  PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = ^D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC;
  D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC = record
    WidthRatio: UINT;
    HeightRatio: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT = record
    NodeIndex: UINT;                    // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;   // input
    ResolutionRatiosCount: UINT;        // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION = record
    NodeIndex: UINT;                                                       // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                                      // input
    ResolutionRatiosCount: UINT;                                           // input
    IsSupported: BOOL;                                                     // output
    MinResolutionSupported: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;   // output
    MaxResolutionSupported: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;   // output
    ResolutionWidthMultipleRequirement: UINT;                              // output
    ResolutionHeightMultipleRequirement: UINT;                             // output
    pResolutionRatios: PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT = record
    NodeIndex: UINT;                             // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;            // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;   // input
    Format: DXGI_FORMAT;                         // input
    IsSupported: BOOL;                           // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE = record
    NodeIndex: UINT;                                          // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                         // input
    RateControlMode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;   // input
    IsSupported: BOOL;                                        // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE}


  PD3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = ^D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE = (
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE      = 0,
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE = record
    NodeIndex: UINT;                                            // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                           // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;                  // input
    Level: D3D12_VIDEO_ENCODER_LEVEL_SETTING;                   // input
    IntraRefreshMode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;   // input
    IsSupported: BOOL;                                          // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE}


  PD3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = ^D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = (
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME                                = 0,
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION                       = 1,
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED  = 2,
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION   = 3,
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE = record
    NodeIndex: UINT;                                                  // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                                 // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;                        // input
    Level: D3D12_VIDEO_ENCODER_LEVEL_SETTING;                         // input
    SubregionMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;   // input
    IsSupported: BOOL;                                                // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE}


  type
  PD3D12_VIDEO_ENCODER_HEAP_FLAGS = ^D3D12_VIDEO_ENCODER_HEAP_FLAGS;
  D3D12_VIDEO_ENCODER_HEAP_FLAGS       = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_HEAP_FLAGS}
  const
    D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = D3D12_VIDEO_ENCODER_HEAP_FLAGS($0);

type

  PD3D12_VIDEO_ENCODER_HEAP_DESC = ^D3D12_VIDEO_ENCODER_HEAP_DESC;
  D3D12_VIDEO_ENCODER_HEAP_DESC = record
    NodeMask: UINT;
    Flags: D3D12_VIDEO_ENCODER_HEAP_FLAGS;
    EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC;
    EncodeLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    ResolutionsListCount: UINT;
    pResolutionList: PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_HEAP_DESC}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE = record
    HeapDesc: D3D12_VIDEO_ENCODER_HEAP_DESC;  // input
    IsSupported: BOOL;                        // output
    MemoryPoolL0Size: UINT64;                 // output
    MemoryPoolL1Size: UINT64;                 // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE}


type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS}
const
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE                                     = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT                   = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT              = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT  = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT          = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT         = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT      = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT}


type

  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES = (
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            = 0,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES                                = 1,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              = 2,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING                                     = 3,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES                                   = 4,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               = 5,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES}


type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS}
const
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE                                                           = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 0 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES                                = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 1 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 2 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING                                     = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 3 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES                                   = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 4 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 5 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS(1 shl 6 {D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING});
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING}


type

  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 = record
    SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
    DisableDeblockingFilterSupportedModes: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264}


type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS}
const
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE                                        = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT                 = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT    = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT         = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT                          = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT          = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED         = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT                      = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($80);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES  = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS($100);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES}

type

  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE = (
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8   = 0,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE}


  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE = (
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4   = 0,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8   = 1,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE}


  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC}
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC = record
    SupportFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
    MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter: UCHAR;
    max_transform_hierarchy_depth_intra: UCHAR;
  end;


  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = record
    DataSize: UINT;
    case Integer of
      0: (pH264Support: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264);
      1: (pHEVCSupport: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC);
    end;


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT = record
    NodeIndex: UINT;                                                       // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                                      // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;                             // input
    IsSupported: BOOL;                                                     // output
    CodecSupportLimits: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT;   // input/output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT}


  PD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = ^D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264;
  D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 = record
    MaxL0ReferencesForP: UINT;
    MaxL0ReferencesForB: UINT;
    MaxL1ReferencesForB: UINT;
    MaxLongTermReferences: UINT;
    MaxDPBCapacity: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264}


  PD3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = ^D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC;
  D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC = record
    MaxL0ReferencesForP: UINT;
    MaxL0ReferencesForB: UINT;
    MaxL1ReferencesForB: UINT;
    MaxLongTermReferences: UINT;
    MaxDPBCapacity: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC}


  D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = record
    DataSize: UINT;
    case Integer of
      0: (pH264Support: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264);
      1: (pHEVCSupport: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC);
  end;

  PD3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT = record
    NodeIndex: UINT;                                                     // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                                    // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;                           // input
    IsSupported: BOOL;                                                   // output
    PictureSupport: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;   // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT}


type
  PD3D12_VIDEO_ENCODER_SUPPORT_FLAGS = ^D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
  D3D12_VIDEO_ENCODER_SUPPORT_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAGS}
const
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE                                             = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK                               = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE           = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE             = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE           = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE            = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS      = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE                  = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE       = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($80);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE       = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($100);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE                = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($200);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE            = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($400);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE           = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($800);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE}
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = D3D12_VIDEO_ENCODER_SUPPORT_FLAGS($1000);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE}


type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS}
const
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE                                   = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION        = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM             = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING                  = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES}

type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES = (
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1,
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL  = 2
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES}


  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 = record
    ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
    DirectModeConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
    DisableDeblockingFilterConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264}


type
  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS}
const
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE                                   = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES      = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER                      = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES            = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION         = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING              = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING}
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION        = D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION}


type

  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC = record
    ConfigurationFlags: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
    MinLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter: UCHAR;
    max_transform_hierarchy_depth_intra: UCHAR;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC}


  PD3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = ^D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION = record
    DataSize: UINT;
    case Integer of
      0: (pH264Config: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264);
      1: (pHEVCConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC);
  end;

  PD3D12_VIDEO_ENCODER_INTRA_REFRESH = ^D3D12_VIDEO_ENCODER_INTRA_REFRESH;
  D3D12_VIDEO_ENCODER_INTRA_REFRESH = record
    Mode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    IntraRefreshDuration: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_INTRA_REFRESH}


  PD3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = ^D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
  D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE = (
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM       = 0,
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL    = 1,
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL    = 2,
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE}


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS = record
    MaxSubregionsNumber: UINT;
    MaxIntraRefreshFrameDuration: UINT;
    SubregionBlockPixelsSize: UINT;
    QPMapRegionPixelsSize: UINT;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS}


type
  PD3D12_VIDEO_ENCODER_VALIDATION_FLAGS = ^D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
  D3D12_VIDEO_ENCODER_VALIDATION_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAGS}
const
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE                                     = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED                      = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED               = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED        = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED          = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($20);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($40);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED         = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($80);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED      = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($100);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST         = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($200);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST}
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED              = D3D12_VIDEO_ENCODER_VALIDATION_FLAGS($800);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED}


type

  PD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = ^D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264;
  D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 = record
    GOPLength: UINT;
    PPicturePeriod: UINT;
    pic_order_cnt_type: UCHAR;
    log2_max_frame_num_minus4: UCHAR;
    log2_max_pic_order_cnt_lsb_minus4: UCHAR;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264}


  PD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = ^D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC;
  D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC = record
    GOPLength: UINT;
    PPicturePeriod: UINT;
    log2_max_pic_order_cnt_lsb_minus4: UCHAR;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC}


  D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE = record
    DataSize: UINT;
    case Integer of
      0: (pH264GroupOfPictures: PD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264);
      1: (pHEVCGroupOfPictures: PD3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC);
  end;


  PD3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT = record
    // input
    NodeIndex: UINT;
    Codec: D3D12_VIDEO_ENCODER_CODEC;
    InputFormat: DXGI_FORMAT;
    CodecConfiguration: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
    CodecGopSequence: D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
    RateControl: D3D12_VIDEO_ENCODER_RATE_CONTROL;
    IntraRefresh: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    SubregionFrameEncoding: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    ResolutionsListCount: UINT;
    pResolutionList: PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    MaxReferenceFramesInDPB: UINT;
    // single value output
    ValidationFlags: D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
    SupportFlags: D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
    SuggestedProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC;
    SuggestedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING;  // assuming max resolution from input list
    // resolution dependent output
    pResolutionDependentSupport: PD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT}



  PD3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = ^D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS;
  D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS = record
    NodeIndex: UINT;                                                        // input
    Codec: D3D12_VIDEO_ENCODER_CODEC;                                       // input
    Profile: D3D12_VIDEO_ENCODER_PROFILE_DESC;                              // input
    InputFormat: DXGI_FORMAT;                                               // input
    PictureTargetResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;   // input
    IsSupported: BOOL;                                                      // output
    CompressedBitstreamBufferAccessAlignment: UINT;                         // output
    EncoderMetadataBufferAccessAlignment: UINT;                             // output
    MaxEncoderOutputMetadataBufferSize: UINT;                               // output
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS}


  //
  // Video Encoder creation API
  //

type
  PD3D12_VIDEO_ENCODER_FLAGS = ^D3D12_VIDEO_ENCODER_FLAGS;
  D3D12_VIDEO_ENCODER_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_FLAGS}
const
    D3D12_VIDEO_ENCODER_FLAG_NONE = D3D12_VIDEO_ENCODER_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_FLAG_NONE}

type

  PD3D12_VIDEO_ENCODER_DESC = ^D3D12_VIDEO_ENCODER_DESC;
  D3D12_VIDEO_ENCODER_DESC = record
    NodeMask: UINT;
    Flags: D3D12_VIDEO_ENCODER_FLAGS;
    EncodeCodec: D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC;
    InputFormat: DXGI_FORMAT;
    CodecConfiguration: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
    MaxMotionEstimationPrecision: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_DESC}


  // Interface ID3D12VideoEncoder
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncoder);'}
  {$EXTERNALSYM ID3D12VideoEncoder}
  ID3D12VideoEncoder = Interface(ID3D12Pageable)
    ['{2E0D212D-8DF9-44A6-A770-BB289B182737}']

    function GetNodeMask(): UINT; stdcall;

    function GetEncoderFlags(): D3D12_VIDEO_ENCODER_FLAGS; stdcall;

    function GetCodec(): D3D12_VIDEO_ENCODER_CODEC; stdcall;

    function GetCodecProfile(var dstProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC): HRESULT; stdcall;

    function GetCodecConfiguration(var dstCodecConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION):HRESULT; stdcall;

    function GetInputFormat(): DXGI_FORMAT; stdcall;

    function GetMaxMotionEstimationPrecision(): D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE; stdcall;


  end;
  IID_ID3D12VideoEncoder = ID3D12VideoEncoder;
  {$EXTERNALSYM IID_ID3D12VideoEncoder}


  // Interface ID3D12VideoEncoderHeap
  // =================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncoderHeap);'}
  {$EXTERNALSYM ID3D12VideoEncoderHeap}
  ID3D12VideoEncoderHeap = Interface(ID3D12Pageable)
    ['{22B35D96-876A-44C0-B25E-FB8C9C7F1C4A}']

    function  GetNodeMask(): UINT; stdcall;

    function  GetEncoderHeapFlags(): D3D12_VIDEO_ENCODER_HEAP_FLAGS; stdcall;

    function  GetCodec(): D3D12_VIDEO_ENCODER_CODEC; stdcall;

    function  GetCodecProfile(var dstProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC): HRESULT; stdcall;

    function  GetCodecLevel(var dstLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING): HRESULT; stdcall;

    function  GetResolutionListCount(): UINT; stdcall;

    function  GetResolutionList(const ResolutionsListCount: UINT;
                                [ref] const pResolutionList: PD3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC): HRESULT; stdcall;

  end;
  IID_ID3D12VideoEncoderHeap = ID3D12VideoEncoderHeap;
  {$EXTERNALSYM IID_ID3D12VideoEncoderHeap}



  // Interface ID3D12VideoDevice3
  // =============================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoDevice3);'}
  {$EXTERNALSYM ID3D12VideoDevice3}
  ID3D12VideoDevice3 = Interface(ID3D12VideoDevice2)
    ['{4243ADB4-3A32-4666-973C-0CCC5625DC44}']

    function CreateVideoEncoder(pDesc: D3D12_VIDEO_ENCODER_DESC;
                                const riid: REFIID;  // Expected: IID_ID3D12VideoEncoder,
                                out ppVideoEncoder): HRESULT; stdcall;

    function CreateVideoEncoderHeap(pDesc: D3D12_VIDEO_ENCODER_HEAP_DESC;
                                    const riid: REFIID;  // Expected: IID_ID3D12VideoEncoderHeap,
                                    out ppVideoEncoderHeap): HRESULT; stdcall;

  end;
  IID_ID3D12VideoDevice3 = ID3D12VideoDevice3;
  {$EXTERNALSYM IID_ID3D12VideoDevice3}



  //
  // Video Encoder operation API
  //


  PD3D12_VIDEO_ENCODER_FRAME_TYPE_H264 = ^D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
  D3D12_VIDEO_ENCODER_FRAME_TYPE_H264             = (
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME   = 0,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME   = 1,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME   = 2,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_FRAME_TYPE_H264}


  PD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = ^D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264;
  D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 = record
    ReconstructedPictureResourceIndex: UINT;
    IsLongTermReference: BOOL;
    LongTermPictureIdx: UINT;
    PictureOrderCountNumber: UINT;
    FrameDecodingOrderNumber: UINT;
    TemporalLayerIndex: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264}


type
  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS}
const
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE                             = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE}
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES}


type

  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION = record
    memory_management_control_operation: UCHAR;
    difference_of_pic_nums_minus1: UINT;
    long_term_pic_num: UINT;
    long_term_frame_idx: UINT;
    max_long_term_frame_idx_plus1: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION}


  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION = record
    modification_of_pic_nums_idc: UCHAR;
    abs_diff_pic_num_minus1: UINT;
    long_term_pic_num: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION}


  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 = record
    Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
    FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
    pic_parameter_set_id: UINT;
    idr_pic_id: UINT;
    PictureOrderCountNumber: UINT;
    FrameDecodingOrderNumber: UINT;
    TemporalLayerIndex: UINT;
    List0ReferenceFramesCount: UINT;
    // [annotation("_Field_size_full_(List0ReferenceFramesCount)")]
    pList0ReferenceFrames: PUINT;
    List1ReferenceFramesCount: UINT;
    // [annotation("_Field_size_full_(List1ReferenceFramesCount)")]
    pList1ReferenceFrames: PUINT;
    ReferenceFramesReconPictureDescriptorsCount: UINT;
    // [annotation("_Field_size_full_(ReferenceFramesReconPictureDescriptorsCount)")]
    pReferenceFramesReconPictureDescriptors: PD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264;
    adaptive_ref_pic_marking_mode_flag: UCHAR;
    RefPicMarkingOperationsCommandsCount: UINT;
    // [annotation("_Field_size_full_(RefPicMarkingOperationsCommandsCount)")]
    pRefPicMarkingOperationsCommands: PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION;
    List0RefPicModificationsCount: UINT;
    // [annotation("_Field_size_full_(List0RefPicModificationsCount)")]
    pList0RefPicModifications: PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    List1RefPicModificationsCount: UINT;
    // [annotation("_Field_size_full_(List1RefPicModificationsCount)")]
    pList1RefPicModifications: PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    QPMapValuesCount: UINT;
    // [annotation("_Field_size_full_(QPMapValuesCount)")]
    pRateControlQPMap: PINT8;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264}


  PD3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = ^D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
  D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC = (
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME   = 0,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME   = 1,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME   = 2,
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3
  );
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC}


  PD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = ^D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC;
  D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC = record
    ReconstructedPictureResourceIndex: UINT;
    IsRefUsedByCurrentPic: BOOL;
    IsLongTermReference: BOOL;
    PictureOrderCountNumber: UINT;
    TemporalLayerIndex: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC}


type
  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS}
const
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE                             = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE}
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES}


type

  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC = record
    Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
    FrameType: D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
    slice_pic_parameter_set_id: UINT;
    PictureOrderCountNumber: UINT;
    TemporalLayerIndex: UINT;
    List0ReferenceFramesCount: UINT;
    // [annotation("_Field_size_full_(List0ReferenceFramesCount)")]
    pList0ReferenceFrames: PUINT;
    List1ReferenceFramesCount: UINT;
    // [annotation("_Field_size_full_(List1ReferenceFramesCount)")]
    pList1ReferenceFrames: PUINT;
    ReferenceFramesReconPictureDescriptorsCount: UINT;
    // [annotation("_Field_size_full_(ReferenceFramesReconPictureDescriptorsCount)")]
    pReferenceFramesReconPictureDescriptors: PD3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC;
    List0RefPicModificationsCount: UINT;
    // [annotation("_Field_size_full_(List0RefPicModificationsCount)")]
    pList0RefPicModifications: PUINT;
    List1RefPicModificationsCount: UINT;
    // [annotation("_Field_size_full_(List1RefPicModificationsCount)")]
    pList1RefPicModifications: PUINT;
    QPMapValuesCount: UINT;
    // [annotation("_Field_size_full_(QPMapValuesCount)")]
    pRateControlQPMap: PINT8;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC}


  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA = record
    DataSize: UINT;
    case Integer of
      0: (pH264PicData: PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264);
      1: (pHEVCPicData: PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC);
  end;


  PD3D12_VIDEO_ENCODE_REFERENCE_FRAMES = ^D3D12_VIDEO_ENCODE_REFERENCE_FRAMES;
  D3D12_VIDEO_ENCODE_REFERENCE_FRAMES = record
    NumTexture2Ds: UINT;
    // [annotation("_Field_size_full_(NumTexture2Ds)")]
    ppTexture2Ds: PID3D12Resource;
    // [annotation("_Field_size_full_(NumTexture2Ds)")]
    pSubresources: PUINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODE_REFERENCE_FRAMES}


type
  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS}
const
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE                      = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE}
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE}


type

  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC = record
    IntraRefreshFrameIndex: UINT;
    Flags: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
    PictureControlCodecData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA;
    ReferenceFrames: D3D12_VIDEO_ENCODE_REFERENCE_FRAMES;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC}


type
  PD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = ^D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
  D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS}
const
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE                    = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE}
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE       = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE}
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE     = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE}
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE}
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH   = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH}
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE     = D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE}


type

  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES = record
    // Mutually exclusive options according to selected mode
    case Integer of

      // Use with mode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION
      0: (MaxBytesPerSlice: UINT);

      // Use with mode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED
      1: (NumberOfCodingUnitsPerSlice: UINT);

      // Use with mode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION
      2: (NumberOfRowsPerSlice: UINT);

      // Use with mode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME
      3: (NumberOfSlicesPerFrame: UINT);
  end;


  PD3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = ^D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA;
  D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA = record
    DataSize: UINT;
    case Integer of
      0: (pSlicesPartition_H264: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES);
      1: (pSlicesPartition_HEVC: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES);
  end;


  PD3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = ^D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC;
  D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC = record
    Flags: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
    IntraRefreshConfig: D3D12_VIDEO_ENCODER_INTRA_REFRESH;
    RateControl: D3D12_VIDEO_ENCODER_RATE_CONTROL;
    PictureTargetResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    SelectedLayoutMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    FrameSubregionsLayoutData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA;
    CodecGopSequence: D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC}


  //
  // Video Encoder operation commands API
  //

  PD3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = ^D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS;
  D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS = record
    SequenceControlDesc: D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC;
    PictureControlDesc: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC;
    pInputFrame: PID3D12Resource;
    InputFrameSubresource: UINT;
    CurrentFrameBitstreamMetadataSize: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS}


  PD3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = ^D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM;
  D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM = record
    pBuffer: PID3D12Resource;
    FrameStartOffset: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM}


  PD3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = ^D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE;
  D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE = record
    pReconstructedPicture: PID3D12Resource;
    ReconstructedPictureSubresource: UINT;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE}


  PD3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = ^D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA;
  D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA = record
    bSize: UINT64;
    bStartOffset: UINT64;
    bHeaderSize: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA}


type
  PD3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = ^D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS;
  D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS = UINT;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS}
const
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR                                     = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($0);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR}
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED          = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($1);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($2);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES                   = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($4);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES}
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED        = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($8);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED}
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE               = D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS($10);
    {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE}


type

  PD3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = ^D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS;
  D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS = record
    AverageQP: UINT64;
    IntraCodingUnitsCount: UINT64;
    InterCodingUnitsCount: UINT64;
    SkipCodingUnitsCount: UINT64;
    AverageMotionEstimationXDirection: UINT64;
    AverageMotionEstimationYDirection: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS}


  PD3D12_VIDEO_ENCODER_OUTPUT_METADATA = ^D3D12_VIDEO_ENCODER_OUTPUT_METADATA;
  D3D12_VIDEO_ENCODER_OUTPUT_METADATA = record
    EncodeErrorFlags: UINT64;       // D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS
    EncodeStats: D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS;
    EncodedBitstreamWrittenBytesCount: UINT64;
    WrittenSubregionsCount: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_OUTPUT_METADATA}


  PD3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = ^D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
  D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER = record
    pBuffer: PID3D12Resource;
    Offset: UINT64;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER}


  PD3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = ^D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS;
  D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS = record
    EncoderCodec: D3D12_VIDEO_ENCODER_CODEC;
    EncoderProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC;
    EncoderInputFormat: DXGI_FORMAT;
    EncodedPictureEffectiveResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    HWLayoutMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS}


  PD3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = ^D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS;
  D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS = record
    ResolvedLayoutMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS}


  PD3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = ^D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS;
  D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS = record
    Bitstream: D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM;
    ReconstructedPicture: D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE;
    EncoderOutputMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
  end;
  {$EXTERNALSYM D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS}


  // Interface ID3D12VideoEncodeCommandList2
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncodeCommandList2);'}
  {$EXTERNALSYM ID3D12VideoEncodeCommandList2}
  ID3D12VideoEncodeCommandList2 = Interface(ID3D12VideoEncodeCommandList1)
    ['{895491e2-e701-46a9-9a1f-8d3480ed867a}']

    procedure EncodeFrame(pEncoder: ID3D12VideoEncoder;
                          pHeap: ID3D12VideoEncoderHeap;
                          pInputArguments: D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS;
                          pOutputArguments: D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS); stdcall;

    procedure ResolveEncoderOutputMetadata(pInputArguments: D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS;
                                           pOutputArguments: D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS); stdcall;

  end;
  IID_ID3D12VideoEncodeCommandList2 = ID3D12VideoEncodeCommandList2;
  {$EXTERNALSYM IID_ID3D12VideoEncodeCommandList2}


  // Interface ID3D12VideoEncodeCommandList3
  // ========================================
  //
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12VideoEncodeCommandList3);'}
  {$EXTERNALSYM ID3D12VideoEncodeCommandList3}
  ID3D12VideoEncodeCommandList3 = Interface(ID3D12VideoEncodeCommandList2)
    ['{7f027b22-1515-4e85-aa0d-026486580576}']

    procedure Barrier(NumBarrierGroups: UINT32;
                     [ref] const pBarrierGroups: PD3D12_BARRIER_GROUP); stdcall;

  end;
  IID_ID3D12VideoEncodeCommandList3 = ID3D12VideoEncodeCommandList3;
  {$EXTERNALSYM IID_ID3D12VideoEncodeCommandList3}


  // Additional Prototypes for ALL interfaces

  // End of Additional Prototypes

implementation

  // Implement Additional Prototypes here.

end.
